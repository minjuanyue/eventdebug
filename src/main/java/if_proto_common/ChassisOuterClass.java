// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chassis.proto

package if_proto_common;

public final class ChassisOuterClass {
  private ChassisOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SignalOrBuilder extends
      // @@protoc_insertion_point(interface_extends:if_proto_common.Signal)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .if_proto_common.Signal.TurnSignal turn_signal = 1;</code>
     * @return Whether the turnSignal field is set.
     */
    boolean hasTurnSignal();
    /**
     * <code>optional .if_proto_common.Signal.TurnSignal turn_signal = 1;</code>
     * @return The turnSignal.
     */
    if_proto_common.ChassisOuterClass.Signal.TurnSignal getTurnSignal();

    /**
     * <pre>
     * lights enable command
     * </pre>
     *
     * <code>optional bool high_beam = 2;</code>
     * @return Whether the highBeam field is set.
     */
    boolean hasHighBeam();
    /**
     * <pre>
     * lights enable command
     * </pre>
     *
     * <code>optional bool high_beam = 2;</code>
     * @return The highBeam.
     */
    boolean getHighBeam();

    /**
     * <code>optional bool low_beam = 3;</code>
     * @return Whether the lowBeam field is set.
     */
    boolean hasLowBeam();
    /**
     * <code>optional bool low_beam = 3;</code>
     * @return The lowBeam.
     */
    boolean getLowBeam();

    /**
     * <code>optional bool horn = 4;</code>
     * @return Whether the horn field is set.
     */
    boolean hasHorn();
    /**
     * <code>optional bool horn = 4;</code>
     * @return The horn.
     */
    boolean getHorn();

    /**
     * <code>optional bool emergency_light = 5;</code>
     * @return Whether the emergencyLight field is set.
     */
    boolean hasEmergencyLight();
    /**
     * <code>optional bool emergency_light = 5;</code>
     * @return The emergencyLight.
     */
    boolean getEmergencyLight();
  }
  /**
   * Protobuf type {@code if_proto_common.Signal}
   */
  public static final class Signal extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:if_proto_common.Signal)
      SignalOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Signal.newBuilder() to construct.
    private Signal(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Signal() {
      turnSignal_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Signal();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Signal(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              if_proto_common.ChassisOuterClass.Signal.TurnSignal value = if_proto_common.ChassisOuterClass.Signal.TurnSignal.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                turnSignal_ = rawValue;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              highBeam_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              lowBeam_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              horn_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              emergencyLight_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return if_proto_common.ChassisOuterClass.internal_static_if_proto_common_Signal_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return if_proto_common.ChassisOuterClass.internal_static_if_proto_common_Signal_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              if_proto_common.ChassisOuterClass.Signal.class, if_proto_common.ChassisOuterClass.Signal.Builder.class);
    }

    /**
     * Protobuf enum {@code if_proto_common.Signal.TurnSignal}
     */
    public enum TurnSignal
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TURN_NONE = 0;</code>
       */
      TURN_NONE(0),
      /**
       * <code>TURN_LEFT = 1;</code>
       */
      TURN_LEFT(1),
      /**
       * <code>TURN_RIGHT = 2;</code>
       */
      TURN_RIGHT(2),
      ;

      /**
       * <code>TURN_NONE = 0;</code>
       */
      public static final int TURN_NONE_VALUE = 0;
      /**
       * <code>TURN_LEFT = 1;</code>
       */
      public static final int TURN_LEFT_VALUE = 1;
      /**
       * <code>TURN_RIGHT = 2;</code>
       */
      public static final int TURN_RIGHT_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TurnSignal valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static TurnSignal forNumber(int value) {
        switch (value) {
          case 0: return TURN_NONE;
          case 1: return TURN_LEFT;
          case 2: return TURN_RIGHT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TurnSignal>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TurnSignal> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TurnSignal>() {
              public TurnSignal findValueByNumber(int number) {
                return TurnSignal.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return if_proto_common.ChassisOuterClass.Signal.getDescriptor().getEnumTypes().get(0);
      }

      private static final TurnSignal[] VALUES = values();

      public static TurnSignal valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private TurnSignal(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:if_proto_common.Signal.TurnSignal)
    }

    private int bitField0_;
    public static final int TURN_SIGNAL_FIELD_NUMBER = 1;
    private int turnSignal_;
    /**
     * <code>optional .if_proto_common.Signal.TurnSignal turn_signal = 1;</code>
     * @return Whether the turnSignal field is set.
     */
    @java.lang.Override public boolean hasTurnSignal() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .if_proto_common.Signal.TurnSignal turn_signal = 1;</code>
     * @return The turnSignal.
     */
    @java.lang.Override public if_proto_common.ChassisOuterClass.Signal.TurnSignal getTurnSignal() {
      @SuppressWarnings("deprecation")
      if_proto_common.ChassisOuterClass.Signal.TurnSignal result = if_proto_common.ChassisOuterClass.Signal.TurnSignal.valueOf(turnSignal_);
      return result == null ? if_proto_common.ChassisOuterClass.Signal.TurnSignal.TURN_NONE : result;
    }

    public static final int HIGH_BEAM_FIELD_NUMBER = 2;
    private boolean highBeam_;
    /**
     * <pre>
     * lights enable command
     * </pre>
     *
     * <code>optional bool high_beam = 2;</code>
     * @return Whether the highBeam field is set.
     */
    @java.lang.Override
    public boolean hasHighBeam() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * lights enable command
     * </pre>
     *
     * <code>optional bool high_beam = 2;</code>
     * @return The highBeam.
     */
    @java.lang.Override
    public boolean getHighBeam() {
      return highBeam_;
    }

    public static final int LOW_BEAM_FIELD_NUMBER = 3;
    private boolean lowBeam_;
    /**
     * <code>optional bool low_beam = 3;</code>
     * @return Whether the lowBeam field is set.
     */
    @java.lang.Override
    public boolean hasLowBeam() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional bool low_beam = 3;</code>
     * @return The lowBeam.
     */
    @java.lang.Override
    public boolean getLowBeam() {
      return lowBeam_;
    }

    public static final int HORN_FIELD_NUMBER = 4;
    private boolean horn_;
    /**
     * <code>optional bool horn = 4;</code>
     * @return Whether the horn field is set.
     */
    @java.lang.Override
    public boolean hasHorn() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional bool horn = 4;</code>
     * @return The horn.
     */
    @java.lang.Override
    public boolean getHorn() {
      return horn_;
    }

    public static final int EMERGENCY_LIGHT_FIELD_NUMBER = 5;
    private boolean emergencyLight_;
    /**
     * <code>optional bool emergency_light = 5;</code>
     * @return Whether the emergencyLight field is set.
     */
    @java.lang.Override
    public boolean hasEmergencyLight() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional bool emergency_light = 5;</code>
     * @return The emergencyLight.
     */
    @java.lang.Override
    public boolean getEmergencyLight() {
      return emergencyLight_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeEnum(1, turnSignal_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(2, highBeam_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(3, lowBeam_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBool(4, horn_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(5, emergencyLight_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, turnSignal_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, highBeam_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, lowBeam_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, horn_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, emergencyLight_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof if_proto_common.ChassisOuterClass.Signal)) {
        return super.equals(obj);
      }
      if_proto_common.ChassisOuterClass.Signal other = (if_proto_common.ChassisOuterClass.Signal) obj;

      if (hasTurnSignal() != other.hasTurnSignal()) return false;
      if (hasTurnSignal()) {
        if (turnSignal_ != other.turnSignal_) return false;
      }
      if (hasHighBeam() != other.hasHighBeam()) return false;
      if (hasHighBeam()) {
        if (getHighBeam()
            != other.getHighBeam()) return false;
      }
      if (hasLowBeam() != other.hasLowBeam()) return false;
      if (hasLowBeam()) {
        if (getLowBeam()
            != other.getLowBeam()) return false;
      }
      if (hasHorn() != other.hasHorn()) return false;
      if (hasHorn()) {
        if (getHorn()
            != other.getHorn()) return false;
      }
      if (hasEmergencyLight() != other.hasEmergencyLight()) return false;
      if (hasEmergencyLight()) {
        if (getEmergencyLight()
            != other.getEmergencyLight()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTurnSignal()) {
        hash = (37 * hash) + TURN_SIGNAL_FIELD_NUMBER;
        hash = (53 * hash) + turnSignal_;
      }
      if (hasHighBeam()) {
        hash = (37 * hash) + HIGH_BEAM_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getHighBeam());
      }
      if (hasLowBeam()) {
        hash = (37 * hash) + LOW_BEAM_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getLowBeam());
      }
      if (hasHorn()) {
        hash = (37 * hash) + HORN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getHorn());
      }
      if (hasEmergencyLight()) {
        hash = (37 * hash) + EMERGENCY_LIGHT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEmergencyLight());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static if_proto_common.ChassisOuterClass.Signal parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.ChassisOuterClass.Signal parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.ChassisOuterClass.Signal parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.ChassisOuterClass.Signal parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.ChassisOuterClass.Signal parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.ChassisOuterClass.Signal parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.ChassisOuterClass.Signal parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.ChassisOuterClass.Signal parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.ChassisOuterClass.Signal parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static if_proto_common.ChassisOuterClass.Signal parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.ChassisOuterClass.Signal parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.ChassisOuterClass.Signal parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(if_proto_common.ChassisOuterClass.Signal prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code if_proto_common.Signal}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:if_proto_common.Signal)
        if_proto_common.ChassisOuterClass.SignalOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return if_proto_common.ChassisOuterClass.internal_static_if_proto_common_Signal_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return if_proto_common.ChassisOuterClass.internal_static_if_proto_common_Signal_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                if_proto_common.ChassisOuterClass.Signal.class, if_proto_common.ChassisOuterClass.Signal.Builder.class);
      }

      // Construct using if_proto_common.ChassisOuterClass.Signal.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        turnSignal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        highBeam_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        lowBeam_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        horn_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        emergencyLight_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return if_proto_common.ChassisOuterClass.internal_static_if_proto_common_Signal_descriptor;
      }

      @java.lang.Override
      public if_proto_common.ChassisOuterClass.Signal getDefaultInstanceForType() {
        return if_proto_common.ChassisOuterClass.Signal.getDefaultInstance();
      }

      @java.lang.Override
      public if_proto_common.ChassisOuterClass.Signal build() {
        if_proto_common.ChassisOuterClass.Signal result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public if_proto_common.ChassisOuterClass.Signal buildPartial() {
        if_proto_common.ChassisOuterClass.Signal result = new if_proto_common.ChassisOuterClass.Signal(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.turnSignal_ = turnSignal_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.highBeam_ = highBeam_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.lowBeam_ = lowBeam_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.horn_ = horn_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.emergencyLight_ = emergencyLight_;
          to_bitField0_ |= 0x00000010;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof if_proto_common.ChassisOuterClass.Signal) {
          return mergeFrom((if_proto_common.ChassisOuterClass.Signal)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(if_proto_common.ChassisOuterClass.Signal other) {
        if (other == if_proto_common.ChassisOuterClass.Signal.getDefaultInstance()) return this;
        if (other.hasTurnSignal()) {
          setTurnSignal(other.getTurnSignal());
        }
        if (other.hasHighBeam()) {
          setHighBeam(other.getHighBeam());
        }
        if (other.hasLowBeam()) {
          setLowBeam(other.getLowBeam());
        }
        if (other.hasHorn()) {
          setHorn(other.getHorn());
        }
        if (other.hasEmergencyLight()) {
          setEmergencyLight(other.getEmergencyLight());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if_proto_common.ChassisOuterClass.Signal parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (if_proto_common.ChassisOuterClass.Signal) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int turnSignal_ = 0;
      /**
       * <code>optional .if_proto_common.Signal.TurnSignal turn_signal = 1;</code>
       * @return Whether the turnSignal field is set.
       */
      @java.lang.Override public boolean hasTurnSignal() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .if_proto_common.Signal.TurnSignal turn_signal = 1;</code>
       * @return The turnSignal.
       */
      @java.lang.Override
      public if_proto_common.ChassisOuterClass.Signal.TurnSignal getTurnSignal() {
        @SuppressWarnings("deprecation")
        if_proto_common.ChassisOuterClass.Signal.TurnSignal result = if_proto_common.ChassisOuterClass.Signal.TurnSignal.valueOf(turnSignal_);
        return result == null ? if_proto_common.ChassisOuterClass.Signal.TurnSignal.TURN_NONE : result;
      }
      /**
       * <code>optional .if_proto_common.Signal.TurnSignal turn_signal = 1;</code>
       * @param value The turnSignal to set.
       * @return This builder for chaining.
       */
      public Builder setTurnSignal(if_proto_common.ChassisOuterClass.Signal.TurnSignal value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        turnSignal_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .if_proto_common.Signal.TurnSignal turn_signal = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTurnSignal() {
        bitField0_ = (bitField0_ & ~0x00000001);
        turnSignal_ = 0;
        onChanged();
        return this;
      }

      private boolean highBeam_ ;
      /**
       * <pre>
       * lights enable command
       * </pre>
       *
       * <code>optional bool high_beam = 2;</code>
       * @return Whether the highBeam field is set.
       */
      @java.lang.Override
      public boolean hasHighBeam() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * lights enable command
       * </pre>
       *
       * <code>optional bool high_beam = 2;</code>
       * @return The highBeam.
       */
      @java.lang.Override
      public boolean getHighBeam() {
        return highBeam_;
      }
      /**
       * <pre>
       * lights enable command
       * </pre>
       *
       * <code>optional bool high_beam = 2;</code>
       * @param value The highBeam to set.
       * @return This builder for chaining.
       */
      public Builder setHighBeam(boolean value) {
        bitField0_ |= 0x00000002;
        highBeam_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * lights enable command
       * </pre>
       *
       * <code>optional bool high_beam = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearHighBeam() {
        bitField0_ = (bitField0_ & ~0x00000002);
        highBeam_ = false;
        onChanged();
        return this;
      }

      private boolean lowBeam_ ;
      /**
       * <code>optional bool low_beam = 3;</code>
       * @return Whether the lowBeam field is set.
       */
      @java.lang.Override
      public boolean hasLowBeam() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional bool low_beam = 3;</code>
       * @return The lowBeam.
       */
      @java.lang.Override
      public boolean getLowBeam() {
        return lowBeam_;
      }
      /**
       * <code>optional bool low_beam = 3;</code>
       * @param value The lowBeam to set.
       * @return This builder for chaining.
       */
      public Builder setLowBeam(boolean value) {
        bitField0_ |= 0x00000004;
        lowBeam_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool low_beam = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearLowBeam() {
        bitField0_ = (bitField0_ & ~0x00000004);
        lowBeam_ = false;
        onChanged();
        return this;
      }

      private boolean horn_ ;
      /**
       * <code>optional bool horn = 4;</code>
       * @return Whether the horn field is set.
       */
      @java.lang.Override
      public boolean hasHorn() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional bool horn = 4;</code>
       * @return The horn.
       */
      @java.lang.Override
      public boolean getHorn() {
        return horn_;
      }
      /**
       * <code>optional bool horn = 4;</code>
       * @param value The horn to set.
       * @return This builder for chaining.
       */
      public Builder setHorn(boolean value) {
        bitField0_ |= 0x00000008;
        horn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool horn = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearHorn() {
        bitField0_ = (bitField0_ & ~0x00000008);
        horn_ = false;
        onChanged();
        return this;
      }

      private boolean emergencyLight_ ;
      /**
       * <code>optional bool emergency_light = 5;</code>
       * @return Whether the emergencyLight field is set.
       */
      @java.lang.Override
      public boolean hasEmergencyLight() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional bool emergency_light = 5;</code>
       * @return The emergencyLight.
       */
      @java.lang.Override
      public boolean getEmergencyLight() {
        return emergencyLight_;
      }
      /**
       * <code>optional bool emergency_light = 5;</code>
       * @param value The emergencyLight to set.
       * @return This builder for chaining.
       */
      public Builder setEmergencyLight(boolean value) {
        bitField0_ |= 0x00000010;
        emergencyLight_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool emergency_light = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearEmergencyLight() {
        bitField0_ = (bitField0_ & ~0x00000010);
        emergencyLight_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:if_proto_common.Signal)
    }

    // @@protoc_insertion_point(class_scope:if_proto_common.Signal)
    private static final if_proto_common.ChassisOuterClass.Signal DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new if_proto_common.ChassisOuterClass.Signal();
    }

    public static if_proto_common.ChassisOuterClass.Signal getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Signal>
        PARSER = new com.google.protobuf.AbstractParser<Signal>() {
      @java.lang.Override
      public Signal parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Signal(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Signal> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Signal> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public if_proto_common.ChassisOuterClass.Signal getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ChassisOrBuilder extends
      // @@protoc_insertion_point(interface_extends:if_proto_common.Chassis)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .if_proto_common.Header header = 1;</code>
     * @return Whether the header field is set.
     */
    boolean hasHeader();
    /**
     * <code>optional .if_proto_common.Header header = 1;</code>
     * @return The header.
     */
    if_proto_common.BxtCommonHeader.Header getHeader();
    /**
     * <code>optional .if_proto_common.Header header = 1;</code>
     */
    if_proto_common.BxtCommonHeader.HeaderOrBuilder getHeaderOrBuilder();

    /**
     * <pre>
     * EPS
     * </pre>
     *
     * <code>optional double steering_angle_speed_executed = 2 [default = 0];</code>
     * @return Whether the steeringAngleSpeedExecuted field is set.
     */
    boolean hasSteeringAngleSpeedExecuted();
    /**
     * <pre>
     * EPS
     * </pre>
     *
     * <code>optional double steering_angle_speed_executed = 2 [default = 0];</code>
     * @return The steeringAngleSpeedExecuted.
     */
    double getSteeringAngleSpeedExecuted();

    /**
     * <pre>
     * degree
     * </pre>
     *
     * <code>optional double steering_angle_executed = 3 [default = 0];</code>
     * @return Whether the steeringAngleExecuted field is set.
     */
    boolean hasSteeringAngleExecuted();
    /**
     * <pre>
     * degree
     * </pre>
     *
     * <code>optional double steering_angle_executed = 3 [default = 0];</code>
     * @return The steeringAngleExecuted.
     */
    double getSteeringAngleExecuted();

    /**
     * <pre>
     * km/h
     * </pre>
     *
     * <code>optional double front_axle_speed = 4 [default = 0];</code>
     * @return Whether the frontAxleSpeed field is set.
     */
    boolean hasFrontAxleSpeed();
    /**
     * <pre>
     * km/h
     * </pre>
     *
     * <code>optional double front_axle_speed = 4 [default = 0];</code>
     * @return The frontAxleSpeed.
     */
    double getFrontAxleSpeed();

    /**
     * <pre>
     * wheel speed relative to front_axle_speed, km/h
     * </pre>
     *
     * <code>optional double wheelspeed_leftfront = 5 [default = 0];</code>
     * @return Whether the wheelspeedLeftfront field is set.
     */
    boolean hasWheelspeedLeftfront();
    /**
     * <pre>
     * wheel speed relative to front_axle_speed, km/h
     * </pre>
     *
     * <code>optional double wheelspeed_leftfront = 5 [default = 0];</code>
     * @return The wheelspeedLeftfront.
     */
    double getWheelspeedLeftfront();

    /**
     * <code>optional double wheelspeed_rightfront = 6 [default = 0];</code>
     * @return Whether the wheelspeedRightfront field is set.
     */
    boolean hasWheelspeedRightfront();
    /**
     * <code>optional double wheelspeed_rightfront = 6 [default = 0];</code>
     * @return The wheelspeedRightfront.
     */
    double getWheelspeedRightfront();

    /**
     * <code>optional double wheelspeed_leftrear = 7 [default = 0];</code>
     * @return Whether the wheelspeedLeftrear field is set.
     */
    boolean hasWheelspeedLeftrear();
    /**
     * <code>optional double wheelspeed_leftrear = 7 [default = 0];</code>
     * @return The wheelspeedLeftrear.
     */
    double getWheelspeedLeftrear();

    /**
     * <code>optional double wheelspeed_rightrear = 8 [default = 0];</code>
     * @return Whether the wheelspeedRightrear field is set.
     */
    boolean hasWheelspeedRightrear();
    /**
     * <code>optional double wheelspeed_rightrear = 8 [default = 0];</code>
     * @return The wheelspeedRightrear.
     */
    double getWheelspeedRightrear();

    /**
     * <pre>
     * vcu
     * </pre>
     *
     * <code>optional double vehicle_speed = 9 [default = 0];</code>
     * @return Whether the vehicleSpeed field is set.
     */
    boolean hasVehicleSpeed();
    /**
     * <pre>
     * vcu
     * </pre>
     *
     * <code>optional double vehicle_speed = 9 [default = 0];</code>
     * @return The vehicleSpeed.
     */
    double getVehicleSpeed();

    /**
     * <code>optional double motor_rpm = 10 [default = nan];</code>
     * @return Whether the motorRpm field is set.
     */
    boolean hasMotorRpm();
    /**
     * <code>optional double motor_rpm = 10 [default = nan];</code>
     * @return The motorRpm.
     */
    double getMotorRpm();

    /**
     * <code>optional double motor_torque = 11 [default = nan];</code>
     * @return Whether the motorTorque field is set.
     */
    boolean hasMotorTorque();
    /**
     * <code>optional double motor_torque = 11 [default = nan];</code>
     * @return The motorTorque.
     */
    double getMotorTorque();

    /**
     * <code>optional int32 chassis_error_mask = 12 [default = 0];</code>
     * @return Whether the chassisErrorMask field is set.
     */
    boolean hasChassisErrorMask();
    /**
     * <code>optional int32 chassis_error_mask = 12 [default = 0];</code>
     * @return The chassisErrorMask.
     */
    int getChassisErrorMask();

    /**
     * <code>optional .if_proto_common.Chassis.ErrorCode error_code = 13 [default = NO_ERROR];</code>
     * @return Whether the errorCode field is set.
     */
    boolean hasErrorCode();
    /**
     * <code>optional .if_proto_common.Chassis.ErrorCode error_code = 13 [default = NO_ERROR];</code>
     * @return The errorCode.
     */
    if_proto_common.ChassisOuterClass.Chassis.ErrorCode getErrorCode();

    /**
     * <code>optional .if_proto_common.Chassis.DrivingMode driving_mode = 14 [default = COMPLETE_MANUAL];</code>
     * @return Whether the drivingMode field is set.
     */
    boolean hasDrivingMode();
    /**
     * <code>optional .if_proto_common.Chassis.DrivingMode driving_mode = 14 [default = COMPLETE_MANUAL];</code>
     * @return The drivingMode.
     */
    if_proto_common.ChassisOuterClass.Chassis.DrivingMode getDrivingMode();

    /**
     * <code>optional .if_proto_common.Chassis.GearPosition gear_position = 15 [default = GEAR_NEUTRAL];</code>
     * @return Whether the gearPosition field is set.
     */
    boolean hasGearPosition();
    /**
     * <code>optional .if_proto_common.Chassis.GearPosition gear_position = 15 [default = GEAR_NEUTRAL];</code>
     * @return The gearPosition.
     */
    if_proto_common.ChassisOuterClass.Chassis.GearPosition getGearPosition();

    /**
     * <code>optional .if_proto_common.Chassis.Status left_turn_lamp = 16 [default = OFF];</code>
     * @return Whether the leftTurnLamp field is set.
     */
    boolean hasLeftTurnLamp();
    /**
     * <code>optional .if_proto_common.Chassis.Status left_turn_lamp = 16 [default = OFF];</code>
     * @return The leftTurnLamp.
     */
    if_proto_common.ChassisOuterClass.Chassis.Status getLeftTurnLamp();

    /**
     * <code>optional .if_proto_common.Chassis.Status right_turn_lamp = 17 [default = OFF];</code>
     * @return Whether the rightTurnLamp field is set.
     */
    boolean hasRightTurnLamp();
    /**
     * <code>optional .if_proto_common.Chassis.Status right_turn_lamp = 17 [default = OFF];</code>
     * @return The rightTurnLamp.
     */
    if_proto_common.ChassisOuterClass.Chassis.Status getRightTurnLamp();

    /**
     * <pre>
     * %
     * </pre>
     *
     * <code>optional double throttle_pedal = 18 [default = 0];</code>
     * @return Whether the throttlePedal field is set.
     */
    boolean hasThrottlePedal();
    /**
     * <pre>
     * %
     * </pre>
     *
     * <code>optional double throttle_pedal = 18 [default = 0];</code>
     * @return The throttlePedal.
     */
    double getThrottlePedal();

    /**
     * <pre>
     *%
     * </pre>
     *
     * <code>optional double brake_pedal = 19 [default = 0];</code>
     * @return Whether the brakePedal field is set.
     */
    boolean hasBrakePedal();
    /**
     * <pre>
     *%
     * </pre>
     *
     * <code>optional double brake_pedal = 19 [default = 0];</code>
     * @return The brakePedal.
     */
    double getBrakePedal();

    /**
     * <code>optional bool auto_drive_request = 20 [default = false];</code>
     * @return Whether the autoDriveRequest field is set.
     */
    boolean hasAutoDriveRequest();
    /**
     * <code>optional bool auto_drive_request = 20 [default = false];</code>
     * @return The autoDriveRequest.
     */
    boolean getAutoDriveRequest();

    /**
     * <pre>
     *%
     * </pre>
     *
     * <code>optional double soc = 21 [default = 0];</code>
     * @return Whether the soc field is set.
     */
    boolean hasSoc();
    /**
     * <pre>
     *%
     * </pre>
     *
     * <code>optional double soc = 21 [default = 0];</code>
     * @return The soc.
     */
    double getSoc();

    /**
     * <pre>
     * IBS(brake system) hydraulic pressure
     * </pre>
     *
     * <code>optional double hydraulic_pressure = 22;</code>
     * @return Whether the hydraulicPressure field is set.
     */
    boolean hasHydraulicPressure();
    /**
     * <pre>
     * IBS(brake system) hydraulic pressure
     * </pre>
     *
     * <code>optional double hydraulic_pressure = 22;</code>
     * @return The hydraulicPressure.
     */
    double getHydraulicPressure();

    /**
     * <pre>
     * Beam status
     * </pre>
     *
     * <code>optional .if_proto_common.Chassis.Status high_beam = 23 [default = OFF];</code>
     * @return Whether the highBeam field is set.
     */
    boolean hasHighBeam();
    /**
     * <pre>
     * Beam status
     * </pre>
     *
     * <code>optional .if_proto_common.Chassis.Status high_beam = 23 [default = OFF];</code>
     * @return The highBeam.
     */
    if_proto_common.ChassisOuterClass.Chassis.Status getHighBeam();

    /**
     * <code>optional .if_proto_common.Chassis.Status low_beam = 24 [default = OFF];</code>
     * @return Whether the lowBeam field is set.
     */
    boolean hasLowBeam();
    /**
     * <code>optional .if_proto_common.Chassis.Status low_beam = 24 [default = OFF];</code>
     * @return The lowBeam.
     */
    if_proto_common.ChassisOuterClass.Chassis.Status getLowBeam();
  }
  /**
   * <pre>
   * next id :28
   * </pre>
   *
   * Protobuf type {@code if_proto_common.Chassis}
   */
  public static final class Chassis extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:if_proto_common.Chassis)
      ChassisOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Chassis.newBuilder() to construct.
    private Chassis(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Chassis() {
      motorRpm_ = Double.NaN;
      motorTorque_ = Double.NaN;
      errorCode_ = 0;
      drivingMode_ = 0;
      gearPosition_ = 2;
      leftTurnLamp_ = 0;
      rightTurnLamp_ = 0;
      highBeam_ = 0;
      lowBeam_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Chassis();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Chassis(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if_proto_common.BxtCommonHeader.Header.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) != 0)) {
                subBuilder = header_.toBuilder();
              }
              header_ = input.readMessage(if_proto_common.BxtCommonHeader.Header.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(header_);
                header_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              steeringAngleSpeedExecuted_ = input.readDouble();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              steeringAngleExecuted_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              frontAxleSpeed_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              wheelspeedLeftfront_ = input.readDouble();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              wheelspeedRightfront_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              wheelspeedLeftrear_ = input.readDouble();
              break;
            }
            case 65: {
              bitField0_ |= 0x00000080;
              wheelspeedRightrear_ = input.readDouble();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000100;
              vehicleSpeed_ = input.readDouble();
              break;
            }
            case 81: {
              bitField0_ |= 0x00000200;
              motorRpm_ = input.readDouble();
              break;
            }
            case 89: {
              bitField0_ |= 0x00000400;
              motorTorque_ = input.readDouble();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              chassisErrorMask_ = input.readInt32();
              break;
            }
            case 104: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              if_proto_common.ChassisOuterClass.Chassis.ErrorCode value = if_proto_common.ChassisOuterClass.Chassis.ErrorCode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(13, rawValue);
              } else {
                bitField0_ |= 0x00001000;
                errorCode_ = rawValue;
              }
              break;
            }
            case 112: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              if_proto_common.ChassisOuterClass.Chassis.DrivingMode value = if_proto_common.ChassisOuterClass.Chassis.DrivingMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(14, rawValue);
              } else {
                bitField0_ |= 0x00002000;
                drivingMode_ = rawValue;
              }
              break;
            }
            case 120: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              if_proto_common.ChassisOuterClass.Chassis.GearPosition value = if_proto_common.ChassisOuterClass.Chassis.GearPosition.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(15, rawValue);
              } else {
                bitField0_ |= 0x00004000;
                gearPosition_ = rawValue;
              }
              break;
            }
            case 128: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              if_proto_common.ChassisOuterClass.Chassis.Status value = if_proto_common.ChassisOuterClass.Chassis.Status.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(16, rawValue);
              } else {
                bitField0_ |= 0x00008000;
                leftTurnLamp_ = rawValue;
              }
              break;
            }
            case 136: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              if_proto_common.ChassisOuterClass.Chassis.Status value = if_proto_common.ChassisOuterClass.Chassis.Status.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(17, rawValue);
              } else {
                bitField0_ |= 0x00010000;
                rightTurnLamp_ = rawValue;
              }
              break;
            }
            case 145: {
              bitField0_ |= 0x00020000;
              throttlePedal_ = input.readDouble();
              break;
            }
            case 153: {
              bitField0_ |= 0x00040000;
              brakePedal_ = input.readDouble();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              autoDriveRequest_ = input.readBool();
              break;
            }
            case 169: {
              bitField0_ |= 0x00100000;
              soc_ = input.readDouble();
              break;
            }
            case 177: {
              bitField0_ |= 0x00200000;
              hydraulicPressure_ = input.readDouble();
              break;
            }
            case 184: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              if_proto_common.ChassisOuterClass.Chassis.Status value = if_proto_common.ChassisOuterClass.Chassis.Status.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(23, rawValue);
              } else {
                bitField0_ |= 0x00400000;
                highBeam_ = rawValue;
              }
              break;
            }
            case 192: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              if_proto_common.ChassisOuterClass.Chassis.Status value = if_proto_common.ChassisOuterClass.Chassis.Status.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(24, rawValue);
              } else {
                bitField0_ |= 0x00800000;
                lowBeam_ = rawValue;
              }
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return if_proto_common.ChassisOuterClass.internal_static_if_proto_common_Chassis_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return if_proto_common.ChassisOuterClass.internal_static_if_proto_common_Chassis_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              if_proto_common.ChassisOuterClass.Chassis.class, if_proto_common.ChassisOuterClass.Chassis.Builder.class);
    }

    /**
     * Protobuf enum {@code if_proto_common.Chassis.DrivingMode}
     */
    public enum DrivingMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * human drive
       * </pre>
       *
       * <code>COMPLETE_MANUAL = 0;</code>
       */
      COMPLETE_MANUAL(0),
      /**
       * <code>COMPLETE_AUTO_DRIVE = 1;</code>
       */
      COMPLETE_AUTO_DRIVE(1),
      /**
       * <pre>
       * security mode when manual intervention happens, only response status
       * </pre>
       *
       * <code>EMERGENCY_MODE = 2;</code>
       */
      EMERGENCY_MODE(2),
      /**
       * <pre>
       * only steer
       * </pre>
       *
       * <code>AUTO_STEER_ONLY = 3;</code>
       */
      AUTO_STEER_ONLY(3),
      /**
       * <pre>
       * include throttle and brake
       * </pre>
       *
       * <code>AUTO_SPEED_ONLY = 4;</code>
       */
      AUTO_SPEED_ONLY(4),
      /**
       * <pre>
       * only misc
       * </pre>
       *
       * <code>AUTO_MISC_ONLY = 5;</code>
       */
      AUTO_MISC_ONLY(5),
      ;

      /**
       * <pre>
       * human drive
       * </pre>
       *
       * <code>COMPLETE_MANUAL = 0;</code>
       */
      public static final int COMPLETE_MANUAL_VALUE = 0;
      /**
       * <code>COMPLETE_AUTO_DRIVE = 1;</code>
       */
      public static final int COMPLETE_AUTO_DRIVE_VALUE = 1;
      /**
       * <pre>
       * security mode when manual intervention happens, only response status
       * </pre>
       *
       * <code>EMERGENCY_MODE = 2;</code>
       */
      public static final int EMERGENCY_MODE_VALUE = 2;
      /**
       * <pre>
       * only steer
       * </pre>
       *
       * <code>AUTO_STEER_ONLY = 3;</code>
       */
      public static final int AUTO_STEER_ONLY_VALUE = 3;
      /**
       * <pre>
       * include throttle and brake
       * </pre>
       *
       * <code>AUTO_SPEED_ONLY = 4;</code>
       */
      public static final int AUTO_SPEED_ONLY_VALUE = 4;
      /**
       * <pre>
       * only misc
       * </pre>
       *
       * <code>AUTO_MISC_ONLY = 5;</code>
       */
      public static final int AUTO_MISC_ONLY_VALUE = 5;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static DrivingMode valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static DrivingMode forNumber(int value) {
        switch (value) {
          case 0: return COMPLETE_MANUAL;
          case 1: return COMPLETE_AUTO_DRIVE;
          case 2: return EMERGENCY_MODE;
          case 3: return AUTO_STEER_ONLY;
          case 4: return AUTO_SPEED_ONLY;
          case 5: return AUTO_MISC_ONLY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DrivingMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          DrivingMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DrivingMode>() {
              public DrivingMode findValueByNumber(int number) {
                return DrivingMode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return if_proto_common.ChassisOuterClass.Chassis.getDescriptor().getEnumTypes().get(0);
      }

      private static final DrivingMode[] VALUES = values();

      public static DrivingMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private DrivingMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:if_proto_common.Chassis.DrivingMode)
    }

    /**
     * Protobuf enum {@code if_proto_common.Chassis.ErrorCode}
     */
    public enum ErrorCode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NO_ERROR = 0;</code>
       */
      NO_ERROR(0),
      /**
       * <pre>
       * ecu not ready
       * </pre>
       *
       * <code>ECU_NOT_READY = 1;</code>
       */
      ECU_NOT_READY(1),
      /**
       * <pre>
       * car chassis report error, like steer, brake, throttle, gear fault
       * </pre>
       *
       * <code>CHASSIS_ERROR = 2;</code>
       */
      CHASSIS_ERROR(2),
      /**
       * <pre>
       * human manual intervention
       * </pre>
       *
       * <code>MANUAL_INTERVENTION = 3;</code>
       */
      MANUAL_INTERVENTION(3),
      /**
       * <pre>
       * receive car chassis can frame not in period
       * </pre>
       *
       * <code>CHASSIS_CAN_NOT_IN_PERIOD = 4;</code>
       */
      CHASSIS_CAN_NOT_IN_PERIOD(4),
      /**
       * <pre>
       * control cmd not in period
       * </pre>
       *
       * <code>CONTROL_MESSAGE_LOST = 5;</code>
       */
      CONTROL_MESSAGE_LOST(5),
      /**
       * <code>UNKNOWN_ERROR = 6;</code>
       */
      UNKNOWN_ERROR(6),
      /**
       * <pre>
       * Start conditions unsatisfied
       * </pre>
       *
       * <code>STEERING_ANGLE_TOO_LARGE = 7;</code>
       */
      STEERING_ANGLE_TOO_LARGE(7),
      /**
       * <code>AUTO_SWITCH_OFF = 8;</code>
       */
      AUTO_SWITCH_OFF(8),
      /**
       * <code>VEHICLE_SPEED_TOO_LARGE = 9;</code>
       */
      VEHICLE_SPEED_TOO_LARGE(9),
      /**
       * <code>PARKING_BRAKE_NOT_RELEASED = 10;</code>
       */
      PARKING_BRAKE_NOT_RELEASED(10),
      /**
       * <code>GEAR_IN_WRONG_POSITION = 11;</code>
       */
      GEAR_IN_WRONG_POSITION(11),
      ;

      /**
       * <code>NO_ERROR = 0;</code>
       */
      public static final int NO_ERROR_VALUE = 0;
      /**
       * <pre>
       * ecu not ready
       * </pre>
       *
       * <code>ECU_NOT_READY = 1;</code>
       */
      public static final int ECU_NOT_READY_VALUE = 1;
      /**
       * <pre>
       * car chassis report error, like steer, brake, throttle, gear fault
       * </pre>
       *
       * <code>CHASSIS_ERROR = 2;</code>
       */
      public static final int CHASSIS_ERROR_VALUE = 2;
      /**
       * <pre>
       * human manual intervention
       * </pre>
       *
       * <code>MANUAL_INTERVENTION = 3;</code>
       */
      public static final int MANUAL_INTERVENTION_VALUE = 3;
      /**
       * <pre>
       * receive car chassis can frame not in period
       * </pre>
       *
       * <code>CHASSIS_CAN_NOT_IN_PERIOD = 4;</code>
       */
      public static final int CHASSIS_CAN_NOT_IN_PERIOD_VALUE = 4;
      /**
       * <pre>
       * control cmd not in period
       * </pre>
       *
       * <code>CONTROL_MESSAGE_LOST = 5;</code>
       */
      public static final int CONTROL_MESSAGE_LOST_VALUE = 5;
      /**
       * <code>UNKNOWN_ERROR = 6;</code>
       */
      public static final int UNKNOWN_ERROR_VALUE = 6;
      /**
       * <pre>
       * Start conditions unsatisfied
       * </pre>
       *
       * <code>STEERING_ANGLE_TOO_LARGE = 7;</code>
       */
      public static final int STEERING_ANGLE_TOO_LARGE_VALUE = 7;
      /**
       * <code>AUTO_SWITCH_OFF = 8;</code>
       */
      public static final int AUTO_SWITCH_OFF_VALUE = 8;
      /**
       * <code>VEHICLE_SPEED_TOO_LARGE = 9;</code>
       */
      public static final int VEHICLE_SPEED_TOO_LARGE_VALUE = 9;
      /**
       * <code>PARKING_BRAKE_NOT_RELEASED = 10;</code>
       */
      public static final int PARKING_BRAKE_NOT_RELEASED_VALUE = 10;
      /**
       * <code>GEAR_IN_WRONG_POSITION = 11;</code>
       */
      public static final int GEAR_IN_WRONG_POSITION_VALUE = 11;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ErrorCode valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static ErrorCode forNumber(int value) {
        switch (value) {
          case 0: return NO_ERROR;
          case 1: return ECU_NOT_READY;
          case 2: return CHASSIS_ERROR;
          case 3: return MANUAL_INTERVENTION;
          case 4: return CHASSIS_CAN_NOT_IN_PERIOD;
          case 5: return CONTROL_MESSAGE_LOST;
          case 6: return UNKNOWN_ERROR;
          case 7: return STEERING_ANGLE_TOO_LARGE;
          case 8: return AUTO_SWITCH_OFF;
          case 9: return VEHICLE_SPEED_TOO_LARGE;
          case 10: return PARKING_BRAKE_NOT_RELEASED;
          case 11: return GEAR_IN_WRONG_POSITION;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ErrorCode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ErrorCode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ErrorCode>() {
              public ErrorCode findValueByNumber(int number) {
                return ErrorCode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return if_proto_common.ChassisOuterClass.Chassis.getDescriptor().getEnumTypes().get(1);
      }

      private static final ErrorCode[] VALUES = values();

      public static ErrorCode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ErrorCode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:if_proto_common.Chassis.ErrorCode)
    }

    /**
     * Protobuf enum {@code if_proto_common.Chassis.GearPosition}
     */
    public enum GearPosition
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>GEAR_PARKING = 0;</code>
       */
      GEAR_PARKING(0),
      /**
       * <code>GEAR_REVERSE = 1;</code>
       */
      GEAR_REVERSE(1),
      /**
       * <code>GEAR_NEUTRAL = 2;</code>
       */
      GEAR_NEUTRAL(2),
      /**
       * <code>GEAR_DRIVE = 3;</code>
       */
      GEAR_DRIVE(3),
      /**
       * <code>GEAR_LOW = 4;</code>
       */
      GEAR_LOW(4),
      /**
       * <code>GEAR_NONE = 5;</code>
       */
      GEAR_NONE(5),
      /**
       * <code>GEAR_INVALID = 6;</code>
       */
      GEAR_INVALID(6),
      ;

      /**
       * <code>GEAR_PARKING = 0;</code>
       */
      public static final int GEAR_PARKING_VALUE = 0;
      /**
       * <code>GEAR_REVERSE = 1;</code>
       */
      public static final int GEAR_REVERSE_VALUE = 1;
      /**
       * <code>GEAR_NEUTRAL = 2;</code>
       */
      public static final int GEAR_NEUTRAL_VALUE = 2;
      /**
       * <code>GEAR_DRIVE = 3;</code>
       */
      public static final int GEAR_DRIVE_VALUE = 3;
      /**
       * <code>GEAR_LOW = 4;</code>
       */
      public static final int GEAR_LOW_VALUE = 4;
      /**
       * <code>GEAR_NONE = 5;</code>
       */
      public static final int GEAR_NONE_VALUE = 5;
      /**
       * <code>GEAR_INVALID = 6;</code>
       */
      public static final int GEAR_INVALID_VALUE = 6;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static GearPosition valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static GearPosition forNumber(int value) {
        switch (value) {
          case 0: return GEAR_PARKING;
          case 1: return GEAR_REVERSE;
          case 2: return GEAR_NEUTRAL;
          case 3: return GEAR_DRIVE;
          case 4: return GEAR_LOW;
          case 5: return GEAR_NONE;
          case 6: return GEAR_INVALID;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<GearPosition>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          GearPosition> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<GearPosition>() {
              public GearPosition findValueByNumber(int number) {
                return GearPosition.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return if_proto_common.ChassisOuterClass.Chassis.getDescriptor().getEnumTypes().get(2);
      }

      private static final GearPosition[] VALUES = values();

      public static GearPosition valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private GearPosition(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:if_proto_common.Chassis.GearPosition)
    }

    /**
     * Protobuf enum {@code if_proto_common.Chassis.Status}
     */
    public enum Status
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>OFF = 0;</code>
       */
      OFF(0),
      /**
       * <code>ON = 1;</code>
       */
      ON(1),
      /**
       * <code>ERR = 2;</code>
       */
      ERR(2),
      /**
       * <code>RESERVE = 3;</code>
       */
      RESERVE(3),
      ;

      /**
       * <code>OFF = 0;</code>
       */
      public static final int OFF_VALUE = 0;
      /**
       * <code>ON = 1;</code>
       */
      public static final int ON_VALUE = 1;
      /**
       * <code>ERR = 2;</code>
       */
      public static final int ERR_VALUE = 2;
      /**
       * <code>RESERVE = 3;</code>
       */
      public static final int RESERVE_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Status valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Status forNumber(int value) {
        switch (value) {
          case 0: return OFF;
          case 1: return ON;
          case 2: return ERR;
          case 3: return RESERVE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Status>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Status> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Status>() {
              public Status findValueByNumber(int number) {
                return Status.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return if_proto_common.ChassisOuterClass.Chassis.getDescriptor().getEnumTypes().get(3);
      }

      private static final Status[] VALUES = values();

      public static Status valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Status(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:if_proto_common.Chassis.Status)
    }

    private int bitField0_;
    public static final int HEADER_FIELD_NUMBER = 1;
    private if_proto_common.BxtCommonHeader.Header header_;
    /**
     * <code>optional .if_proto_common.Header header = 1;</code>
     * @return Whether the header field is set.
     */
    @java.lang.Override
    public boolean hasHeader() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .if_proto_common.Header header = 1;</code>
     * @return The header.
     */
    @java.lang.Override
    public if_proto_common.BxtCommonHeader.Header getHeader() {
      return header_ == null ? if_proto_common.BxtCommonHeader.Header.getDefaultInstance() : header_;
    }
    /**
     * <code>optional .if_proto_common.Header header = 1;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtCommonHeader.HeaderOrBuilder getHeaderOrBuilder() {
      return header_ == null ? if_proto_common.BxtCommonHeader.Header.getDefaultInstance() : header_;
    }

    public static final int STEERING_ANGLE_SPEED_EXECUTED_FIELD_NUMBER = 2;
    private double steeringAngleSpeedExecuted_;
    /**
     * <pre>
     * EPS
     * </pre>
     *
     * <code>optional double steering_angle_speed_executed = 2 [default = 0];</code>
     * @return Whether the steeringAngleSpeedExecuted field is set.
     */
    @java.lang.Override
    public boolean hasSteeringAngleSpeedExecuted() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * EPS
     * </pre>
     *
     * <code>optional double steering_angle_speed_executed = 2 [default = 0];</code>
     * @return The steeringAngleSpeedExecuted.
     */
    @java.lang.Override
    public double getSteeringAngleSpeedExecuted() {
      return steeringAngleSpeedExecuted_;
    }

    public static final int STEERING_ANGLE_EXECUTED_FIELD_NUMBER = 3;
    private double steeringAngleExecuted_;
    /**
     * <pre>
     * degree
     * </pre>
     *
     * <code>optional double steering_angle_executed = 3 [default = 0];</code>
     * @return Whether the steeringAngleExecuted field is set.
     */
    @java.lang.Override
    public boolean hasSteeringAngleExecuted() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * degree
     * </pre>
     *
     * <code>optional double steering_angle_executed = 3 [default = 0];</code>
     * @return The steeringAngleExecuted.
     */
    @java.lang.Override
    public double getSteeringAngleExecuted() {
      return steeringAngleExecuted_;
    }

    public static final int FRONT_AXLE_SPEED_FIELD_NUMBER = 4;
    private double frontAxleSpeed_;
    /**
     * <pre>
     * km/h
     * </pre>
     *
     * <code>optional double front_axle_speed = 4 [default = 0];</code>
     * @return Whether the frontAxleSpeed field is set.
     */
    @java.lang.Override
    public boolean hasFrontAxleSpeed() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * km/h
     * </pre>
     *
     * <code>optional double front_axle_speed = 4 [default = 0];</code>
     * @return The frontAxleSpeed.
     */
    @java.lang.Override
    public double getFrontAxleSpeed() {
      return frontAxleSpeed_;
    }

    public static final int WHEELSPEED_LEFTFRONT_FIELD_NUMBER = 5;
    private double wheelspeedLeftfront_;
    /**
     * <pre>
     * wheel speed relative to front_axle_speed, km/h
     * </pre>
     *
     * <code>optional double wheelspeed_leftfront = 5 [default = 0];</code>
     * @return Whether the wheelspeedLeftfront field is set.
     */
    @java.lang.Override
    public boolean hasWheelspeedLeftfront() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * wheel speed relative to front_axle_speed, km/h
     * </pre>
     *
     * <code>optional double wheelspeed_leftfront = 5 [default = 0];</code>
     * @return The wheelspeedLeftfront.
     */
    @java.lang.Override
    public double getWheelspeedLeftfront() {
      return wheelspeedLeftfront_;
    }

    public static final int WHEELSPEED_RIGHTFRONT_FIELD_NUMBER = 6;
    private double wheelspeedRightfront_;
    /**
     * <code>optional double wheelspeed_rightfront = 6 [default = 0];</code>
     * @return Whether the wheelspeedRightfront field is set.
     */
    @java.lang.Override
    public boolean hasWheelspeedRightfront() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional double wheelspeed_rightfront = 6 [default = 0];</code>
     * @return The wheelspeedRightfront.
     */
    @java.lang.Override
    public double getWheelspeedRightfront() {
      return wheelspeedRightfront_;
    }

    public static final int WHEELSPEED_LEFTREAR_FIELD_NUMBER = 7;
    private double wheelspeedLeftrear_;
    /**
     * <code>optional double wheelspeed_leftrear = 7 [default = 0];</code>
     * @return Whether the wheelspeedLeftrear field is set.
     */
    @java.lang.Override
    public boolean hasWheelspeedLeftrear() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional double wheelspeed_leftrear = 7 [default = 0];</code>
     * @return The wheelspeedLeftrear.
     */
    @java.lang.Override
    public double getWheelspeedLeftrear() {
      return wheelspeedLeftrear_;
    }

    public static final int WHEELSPEED_RIGHTREAR_FIELD_NUMBER = 8;
    private double wheelspeedRightrear_;
    /**
     * <code>optional double wheelspeed_rightrear = 8 [default = 0];</code>
     * @return Whether the wheelspeedRightrear field is set.
     */
    @java.lang.Override
    public boolean hasWheelspeedRightrear() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional double wheelspeed_rightrear = 8 [default = 0];</code>
     * @return The wheelspeedRightrear.
     */
    @java.lang.Override
    public double getWheelspeedRightrear() {
      return wheelspeedRightrear_;
    }

    public static final int VEHICLE_SPEED_FIELD_NUMBER = 9;
    private double vehicleSpeed_;
    /**
     * <pre>
     * vcu
     * </pre>
     *
     * <code>optional double vehicle_speed = 9 [default = 0];</code>
     * @return Whether the vehicleSpeed field is set.
     */
    @java.lang.Override
    public boolean hasVehicleSpeed() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * vcu
     * </pre>
     *
     * <code>optional double vehicle_speed = 9 [default = 0];</code>
     * @return The vehicleSpeed.
     */
    @java.lang.Override
    public double getVehicleSpeed() {
      return vehicleSpeed_;
    }

    public static final int MOTOR_RPM_FIELD_NUMBER = 10;
    private double motorRpm_;
    /**
     * <code>optional double motor_rpm = 10 [default = nan];</code>
     * @return Whether the motorRpm field is set.
     */
    @java.lang.Override
    public boolean hasMotorRpm() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional double motor_rpm = 10 [default = nan];</code>
     * @return The motorRpm.
     */
    @java.lang.Override
    public double getMotorRpm() {
      return motorRpm_;
    }

    public static final int MOTOR_TORQUE_FIELD_NUMBER = 11;
    private double motorTorque_;
    /**
     * <code>optional double motor_torque = 11 [default = nan];</code>
     * @return Whether the motorTorque field is set.
     */
    @java.lang.Override
    public boolean hasMotorTorque() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>optional double motor_torque = 11 [default = nan];</code>
     * @return The motorTorque.
     */
    @java.lang.Override
    public double getMotorTorque() {
      return motorTorque_;
    }

    public static final int CHASSIS_ERROR_MASK_FIELD_NUMBER = 12;
    private int chassisErrorMask_;
    /**
     * <code>optional int32 chassis_error_mask = 12 [default = 0];</code>
     * @return Whether the chassisErrorMask field is set.
     */
    @java.lang.Override
    public boolean hasChassisErrorMask() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <code>optional int32 chassis_error_mask = 12 [default = 0];</code>
     * @return The chassisErrorMask.
     */
    @java.lang.Override
    public int getChassisErrorMask() {
      return chassisErrorMask_;
    }

    public static final int ERROR_CODE_FIELD_NUMBER = 13;
    private int errorCode_;
    /**
     * <code>optional .if_proto_common.Chassis.ErrorCode error_code = 13 [default = NO_ERROR];</code>
     * @return Whether the errorCode field is set.
     */
    @java.lang.Override public boolean hasErrorCode() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <code>optional .if_proto_common.Chassis.ErrorCode error_code = 13 [default = NO_ERROR];</code>
     * @return The errorCode.
     */
    @java.lang.Override public if_proto_common.ChassisOuterClass.Chassis.ErrorCode getErrorCode() {
      @SuppressWarnings("deprecation")
      if_proto_common.ChassisOuterClass.Chassis.ErrorCode result = if_proto_common.ChassisOuterClass.Chassis.ErrorCode.valueOf(errorCode_);
      return result == null ? if_proto_common.ChassisOuterClass.Chassis.ErrorCode.NO_ERROR : result;
    }

    public static final int DRIVING_MODE_FIELD_NUMBER = 14;
    private int drivingMode_;
    /**
     * <code>optional .if_proto_common.Chassis.DrivingMode driving_mode = 14 [default = COMPLETE_MANUAL];</code>
     * @return Whether the drivingMode field is set.
     */
    @java.lang.Override public boolean hasDrivingMode() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <code>optional .if_proto_common.Chassis.DrivingMode driving_mode = 14 [default = COMPLETE_MANUAL];</code>
     * @return The drivingMode.
     */
    @java.lang.Override public if_proto_common.ChassisOuterClass.Chassis.DrivingMode getDrivingMode() {
      @SuppressWarnings("deprecation")
      if_proto_common.ChassisOuterClass.Chassis.DrivingMode result = if_proto_common.ChassisOuterClass.Chassis.DrivingMode.valueOf(drivingMode_);
      return result == null ? if_proto_common.ChassisOuterClass.Chassis.DrivingMode.COMPLETE_MANUAL : result;
    }

    public static final int GEAR_POSITION_FIELD_NUMBER = 15;
    private int gearPosition_;
    /**
     * <code>optional .if_proto_common.Chassis.GearPosition gear_position = 15 [default = GEAR_NEUTRAL];</code>
     * @return Whether the gearPosition field is set.
     */
    @java.lang.Override public boolean hasGearPosition() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <code>optional .if_proto_common.Chassis.GearPosition gear_position = 15 [default = GEAR_NEUTRAL];</code>
     * @return The gearPosition.
     */
    @java.lang.Override public if_proto_common.ChassisOuterClass.Chassis.GearPosition getGearPosition() {
      @SuppressWarnings("deprecation")
      if_proto_common.ChassisOuterClass.Chassis.GearPosition result = if_proto_common.ChassisOuterClass.Chassis.GearPosition.valueOf(gearPosition_);
      return result == null ? if_proto_common.ChassisOuterClass.Chassis.GearPosition.GEAR_NEUTRAL : result;
    }

    public static final int LEFT_TURN_LAMP_FIELD_NUMBER = 16;
    private int leftTurnLamp_;
    /**
     * <code>optional .if_proto_common.Chassis.Status left_turn_lamp = 16 [default = OFF];</code>
     * @return Whether the leftTurnLamp field is set.
     */
    @java.lang.Override public boolean hasLeftTurnLamp() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <code>optional .if_proto_common.Chassis.Status left_turn_lamp = 16 [default = OFF];</code>
     * @return The leftTurnLamp.
     */
    @java.lang.Override public if_proto_common.ChassisOuterClass.Chassis.Status getLeftTurnLamp() {
      @SuppressWarnings("deprecation")
      if_proto_common.ChassisOuterClass.Chassis.Status result = if_proto_common.ChassisOuterClass.Chassis.Status.valueOf(leftTurnLamp_);
      return result == null ? if_proto_common.ChassisOuterClass.Chassis.Status.OFF : result;
    }

    public static final int RIGHT_TURN_LAMP_FIELD_NUMBER = 17;
    private int rightTurnLamp_;
    /**
     * <code>optional .if_proto_common.Chassis.Status right_turn_lamp = 17 [default = OFF];</code>
     * @return Whether the rightTurnLamp field is set.
     */
    @java.lang.Override public boolean hasRightTurnLamp() {
      return ((bitField0_ & 0x00010000) != 0);
    }
    /**
     * <code>optional .if_proto_common.Chassis.Status right_turn_lamp = 17 [default = OFF];</code>
     * @return The rightTurnLamp.
     */
    @java.lang.Override public if_proto_common.ChassisOuterClass.Chassis.Status getRightTurnLamp() {
      @SuppressWarnings("deprecation")
      if_proto_common.ChassisOuterClass.Chassis.Status result = if_proto_common.ChassisOuterClass.Chassis.Status.valueOf(rightTurnLamp_);
      return result == null ? if_proto_common.ChassisOuterClass.Chassis.Status.OFF : result;
    }

    public static final int THROTTLE_PEDAL_FIELD_NUMBER = 18;
    private double throttlePedal_;
    /**
     * <pre>
     * %
     * </pre>
     *
     * <code>optional double throttle_pedal = 18 [default = 0];</code>
     * @return Whether the throttlePedal field is set.
     */
    @java.lang.Override
    public boolean hasThrottlePedal() {
      return ((bitField0_ & 0x00020000) != 0);
    }
    /**
     * <pre>
     * %
     * </pre>
     *
     * <code>optional double throttle_pedal = 18 [default = 0];</code>
     * @return The throttlePedal.
     */
    @java.lang.Override
    public double getThrottlePedal() {
      return throttlePedal_;
    }

    public static final int BRAKE_PEDAL_FIELD_NUMBER = 19;
    private double brakePedal_;
    /**
     * <pre>
     *%
     * </pre>
     *
     * <code>optional double brake_pedal = 19 [default = 0];</code>
     * @return Whether the brakePedal field is set.
     */
    @java.lang.Override
    public boolean hasBrakePedal() {
      return ((bitField0_ & 0x00040000) != 0);
    }
    /**
     * <pre>
     *%
     * </pre>
     *
     * <code>optional double brake_pedal = 19 [default = 0];</code>
     * @return The brakePedal.
     */
    @java.lang.Override
    public double getBrakePedal() {
      return brakePedal_;
    }

    public static final int AUTO_DRIVE_REQUEST_FIELD_NUMBER = 20;
    private boolean autoDriveRequest_;
    /**
     * <code>optional bool auto_drive_request = 20 [default = false];</code>
     * @return Whether the autoDriveRequest field is set.
     */
    @java.lang.Override
    public boolean hasAutoDriveRequest() {
      return ((bitField0_ & 0x00080000) != 0);
    }
    /**
     * <code>optional bool auto_drive_request = 20 [default = false];</code>
     * @return The autoDriveRequest.
     */
    @java.lang.Override
    public boolean getAutoDriveRequest() {
      return autoDriveRequest_;
    }

    public static final int SOC_FIELD_NUMBER = 21;
    private double soc_;
    /**
     * <pre>
     *%
     * </pre>
     *
     * <code>optional double soc = 21 [default = 0];</code>
     * @return Whether the soc field is set.
     */
    @java.lang.Override
    public boolean hasSoc() {
      return ((bitField0_ & 0x00100000) != 0);
    }
    /**
     * <pre>
     *%
     * </pre>
     *
     * <code>optional double soc = 21 [default = 0];</code>
     * @return The soc.
     */
    @java.lang.Override
    public double getSoc() {
      return soc_;
    }

    public static final int HYDRAULIC_PRESSURE_FIELD_NUMBER = 22;
    private double hydraulicPressure_;
    /**
     * <pre>
     * IBS(brake system) hydraulic pressure
     * </pre>
     *
     * <code>optional double hydraulic_pressure = 22;</code>
     * @return Whether the hydraulicPressure field is set.
     */
    @java.lang.Override
    public boolean hasHydraulicPressure() {
      return ((bitField0_ & 0x00200000) != 0);
    }
    /**
     * <pre>
     * IBS(brake system) hydraulic pressure
     * </pre>
     *
     * <code>optional double hydraulic_pressure = 22;</code>
     * @return The hydraulicPressure.
     */
    @java.lang.Override
    public double getHydraulicPressure() {
      return hydraulicPressure_;
    }

    public static final int HIGH_BEAM_FIELD_NUMBER = 23;
    private int highBeam_;
    /**
     * <pre>
     * Beam status
     * </pre>
     *
     * <code>optional .if_proto_common.Chassis.Status high_beam = 23 [default = OFF];</code>
     * @return Whether the highBeam field is set.
     */
    @java.lang.Override public boolean hasHighBeam() {
      return ((bitField0_ & 0x00400000) != 0);
    }
    /**
     * <pre>
     * Beam status
     * </pre>
     *
     * <code>optional .if_proto_common.Chassis.Status high_beam = 23 [default = OFF];</code>
     * @return The highBeam.
     */
    @java.lang.Override public if_proto_common.ChassisOuterClass.Chassis.Status getHighBeam() {
      @SuppressWarnings("deprecation")
      if_proto_common.ChassisOuterClass.Chassis.Status result = if_proto_common.ChassisOuterClass.Chassis.Status.valueOf(highBeam_);
      return result == null ? if_proto_common.ChassisOuterClass.Chassis.Status.OFF : result;
    }

    public static final int LOW_BEAM_FIELD_NUMBER = 24;
    private int lowBeam_;
    /**
     * <code>optional .if_proto_common.Chassis.Status low_beam = 24 [default = OFF];</code>
     * @return Whether the lowBeam field is set.
     */
    @java.lang.Override public boolean hasLowBeam() {
      return ((bitField0_ & 0x00800000) != 0);
    }
    /**
     * <code>optional .if_proto_common.Chassis.Status low_beam = 24 [default = OFF];</code>
     * @return The lowBeam.
     */
    @java.lang.Override public if_proto_common.ChassisOuterClass.Chassis.Status getLowBeam() {
      @SuppressWarnings("deprecation")
      if_proto_common.ChassisOuterClass.Chassis.Status result = if_proto_common.ChassisOuterClass.Chassis.Status.valueOf(lowBeam_);
      return result == null ? if_proto_common.ChassisOuterClass.Chassis.Status.OFF : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getHeader());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeDouble(2, steeringAngleSpeedExecuted_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeDouble(3, steeringAngleExecuted_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeDouble(4, frontAxleSpeed_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeDouble(5, wheelspeedLeftfront_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeDouble(6, wheelspeedRightfront_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeDouble(7, wheelspeedLeftrear_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeDouble(8, wheelspeedRightrear_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeDouble(9, vehicleSpeed_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeDouble(10, motorRpm_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeDouble(11, motorTorque_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeInt32(12, chassisErrorMask_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeEnum(13, errorCode_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        output.writeEnum(14, drivingMode_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        output.writeEnum(15, gearPosition_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        output.writeEnum(16, leftTurnLamp_);
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        output.writeEnum(17, rightTurnLamp_);
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        output.writeDouble(18, throttlePedal_);
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        output.writeDouble(19, brakePedal_);
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        output.writeBool(20, autoDriveRequest_);
      }
      if (((bitField0_ & 0x00100000) != 0)) {
        output.writeDouble(21, soc_);
      }
      if (((bitField0_ & 0x00200000) != 0)) {
        output.writeDouble(22, hydraulicPressure_);
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        output.writeEnum(23, highBeam_);
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        output.writeEnum(24, lowBeam_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeader());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, steeringAngleSpeedExecuted_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, steeringAngleExecuted_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, frontAxleSpeed_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, wheelspeedLeftfront_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, wheelspeedRightfront_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, wheelspeedLeftrear_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, wheelspeedRightrear_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, vehicleSpeed_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, motorRpm_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, motorTorque_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, chassisErrorMask_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(13, errorCode_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(14, drivingMode_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(15, gearPosition_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(16, leftTurnLamp_);
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(17, rightTurnLamp_);
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(18, throttlePedal_);
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(19, brakePedal_);
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(20, autoDriveRequest_);
      }
      if (((bitField0_ & 0x00100000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(21, soc_);
      }
      if (((bitField0_ & 0x00200000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(22, hydraulicPressure_);
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(23, highBeam_);
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(24, lowBeam_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof if_proto_common.ChassisOuterClass.Chassis)) {
        return super.equals(obj);
      }
      if_proto_common.ChassisOuterClass.Chassis other = (if_proto_common.ChassisOuterClass.Chassis) obj;

      if (hasHeader() != other.hasHeader()) return false;
      if (hasHeader()) {
        if (!getHeader()
            .equals(other.getHeader())) return false;
      }
      if (hasSteeringAngleSpeedExecuted() != other.hasSteeringAngleSpeedExecuted()) return false;
      if (hasSteeringAngleSpeedExecuted()) {
        if (java.lang.Double.doubleToLongBits(getSteeringAngleSpeedExecuted())
            != java.lang.Double.doubleToLongBits(
                other.getSteeringAngleSpeedExecuted())) return false;
      }
      if (hasSteeringAngleExecuted() != other.hasSteeringAngleExecuted()) return false;
      if (hasSteeringAngleExecuted()) {
        if (java.lang.Double.doubleToLongBits(getSteeringAngleExecuted())
            != java.lang.Double.doubleToLongBits(
                other.getSteeringAngleExecuted())) return false;
      }
      if (hasFrontAxleSpeed() != other.hasFrontAxleSpeed()) return false;
      if (hasFrontAxleSpeed()) {
        if (java.lang.Double.doubleToLongBits(getFrontAxleSpeed())
            != java.lang.Double.doubleToLongBits(
                other.getFrontAxleSpeed())) return false;
      }
      if (hasWheelspeedLeftfront() != other.hasWheelspeedLeftfront()) return false;
      if (hasWheelspeedLeftfront()) {
        if (java.lang.Double.doubleToLongBits(getWheelspeedLeftfront())
            != java.lang.Double.doubleToLongBits(
                other.getWheelspeedLeftfront())) return false;
      }
      if (hasWheelspeedRightfront() != other.hasWheelspeedRightfront()) return false;
      if (hasWheelspeedRightfront()) {
        if (java.lang.Double.doubleToLongBits(getWheelspeedRightfront())
            != java.lang.Double.doubleToLongBits(
                other.getWheelspeedRightfront())) return false;
      }
      if (hasWheelspeedLeftrear() != other.hasWheelspeedLeftrear()) return false;
      if (hasWheelspeedLeftrear()) {
        if (java.lang.Double.doubleToLongBits(getWheelspeedLeftrear())
            != java.lang.Double.doubleToLongBits(
                other.getWheelspeedLeftrear())) return false;
      }
      if (hasWheelspeedRightrear() != other.hasWheelspeedRightrear()) return false;
      if (hasWheelspeedRightrear()) {
        if (java.lang.Double.doubleToLongBits(getWheelspeedRightrear())
            != java.lang.Double.doubleToLongBits(
                other.getWheelspeedRightrear())) return false;
      }
      if (hasVehicleSpeed() != other.hasVehicleSpeed()) return false;
      if (hasVehicleSpeed()) {
        if (java.lang.Double.doubleToLongBits(getVehicleSpeed())
            != java.lang.Double.doubleToLongBits(
                other.getVehicleSpeed())) return false;
      }
      if (hasMotorRpm() != other.hasMotorRpm()) return false;
      if (hasMotorRpm()) {
        if (java.lang.Double.doubleToLongBits(getMotorRpm())
            != java.lang.Double.doubleToLongBits(
                other.getMotorRpm())) return false;
      }
      if (hasMotorTorque() != other.hasMotorTorque()) return false;
      if (hasMotorTorque()) {
        if (java.lang.Double.doubleToLongBits(getMotorTorque())
            != java.lang.Double.doubleToLongBits(
                other.getMotorTorque())) return false;
      }
      if (hasChassisErrorMask() != other.hasChassisErrorMask()) return false;
      if (hasChassisErrorMask()) {
        if (getChassisErrorMask()
            != other.getChassisErrorMask()) return false;
      }
      if (hasErrorCode() != other.hasErrorCode()) return false;
      if (hasErrorCode()) {
        if (errorCode_ != other.errorCode_) return false;
      }
      if (hasDrivingMode() != other.hasDrivingMode()) return false;
      if (hasDrivingMode()) {
        if (drivingMode_ != other.drivingMode_) return false;
      }
      if (hasGearPosition() != other.hasGearPosition()) return false;
      if (hasGearPosition()) {
        if (gearPosition_ != other.gearPosition_) return false;
      }
      if (hasLeftTurnLamp() != other.hasLeftTurnLamp()) return false;
      if (hasLeftTurnLamp()) {
        if (leftTurnLamp_ != other.leftTurnLamp_) return false;
      }
      if (hasRightTurnLamp() != other.hasRightTurnLamp()) return false;
      if (hasRightTurnLamp()) {
        if (rightTurnLamp_ != other.rightTurnLamp_) return false;
      }
      if (hasThrottlePedal() != other.hasThrottlePedal()) return false;
      if (hasThrottlePedal()) {
        if (java.lang.Double.doubleToLongBits(getThrottlePedal())
            != java.lang.Double.doubleToLongBits(
                other.getThrottlePedal())) return false;
      }
      if (hasBrakePedal() != other.hasBrakePedal()) return false;
      if (hasBrakePedal()) {
        if (java.lang.Double.doubleToLongBits(getBrakePedal())
            != java.lang.Double.doubleToLongBits(
                other.getBrakePedal())) return false;
      }
      if (hasAutoDriveRequest() != other.hasAutoDriveRequest()) return false;
      if (hasAutoDriveRequest()) {
        if (getAutoDriveRequest()
            != other.getAutoDriveRequest()) return false;
      }
      if (hasSoc() != other.hasSoc()) return false;
      if (hasSoc()) {
        if (java.lang.Double.doubleToLongBits(getSoc())
            != java.lang.Double.doubleToLongBits(
                other.getSoc())) return false;
      }
      if (hasHydraulicPressure() != other.hasHydraulicPressure()) return false;
      if (hasHydraulicPressure()) {
        if (java.lang.Double.doubleToLongBits(getHydraulicPressure())
            != java.lang.Double.doubleToLongBits(
                other.getHydraulicPressure())) return false;
      }
      if (hasHighBeam() != other.hasHighBeam()) return false;
      if (hasHighBeam()) {
        if (highBeam_ != other.highBeam_) return false;
      }
      if (hasLowBeam() != other.hasLowBeam()) return false;
      if (hasLowBeam()) {
        if (lowBeam_ != other.lowBeam_) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasHeader()) {
        hash = (37 * hash) + HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getHeader().hashCode();
      }
      if (hasSteeringAngleSpeedExecuted()) {
        hash = (37 * hash) + STEERING_ANGLE_SPEED_EXECUTED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getSteeringAngleSpeedExecuted()));
      }
      if (hasSteeringAngleExecuted()) {
        hash = (37 * hash) + STEERING_ANGLE_EXECUTED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getSteeringAngleExecuted()));
      }
      if (hasFrontAxleSpeed()) {
        hash = (37 * hash) + FRONT_AXLE_SPEED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getFrontAxleSpeed()));
      }
      if (hasWheelspeedLeftfront()) {
        hash = (37 * hash) + WHEELSPEED_LEFTFRONT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getWheelspeedLeftfront()));
      }
      if (hasWheelspeedRightfront()) {
        hash = (37 * hash) + WHEELSPEED_RIGHTFRONT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getWheelspeedRightfront()));
      }
      if (hasWheelspeedLeftrear()) {
        hash = (37 * hash) + WHEELSPEED_LEFTREAR_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getWheelspeedLeftrear()));
      }
      if (hasWheelspeedRightrear()) {
        hash = (37 * hash) + WHEELSPEED_RIGHTREAR_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getWheelspeedRightrear()));
      }
      if (hasVehicleSpeed()) {
        hash = (37 * hash) + VEHICLE_SPEED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getVehicleSpeed()));
      }
      if (hasMotorRpm()) {
        hash = (37 * hash) + MOTOR_RPM_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getMotorRpm()));
      }
      if (hasMotorTorque()) {
        hash = (37 * hash) + MOTOR_TORQUE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getMotorTorque()));
      }
      if (hasChassisErrorMask()) {
        hash = (37 * hash) + CHASSIS_ERROR_MASK_FIELD_NUMBER;
        hash = (53 * hash) + getChassisErrorMask();
      }
      if (hasErrorCode()) {
        hash = (37 * hash) + ERROR_CODE_FIELD_NUMBER;
        hash = (53 * hash) + errorCode_;
      }
      if (hasDrivingMode()) {
        hash = (37 * hash) + DRIVING_MODE_FIELD_NUMBER;
        hash = (53 * hash) + drivingMode_;
      }
      if (hasGearPosition()) {
        hash = (37 * hash) + GEAR_POSITION_FIELD_NUMBER;
        hash = (53 * hash) + gearPosition_;
      }
      if (hasLeftTurnLamp()) {
        hash = (37 * hash) + LEFT_TURN_LAMP_FIELD_NUMBER;
        hash = (53 * hash) + leftTurnLamp_;
      }
      if (hasRightTurnLamp()) {
        hash = (37 * hash) + RIGHT_TURN_LAMP_FIELD_NUMBER;
        hash = (53 * hash) + rightTurnLamp_;
      }
      if (hasThrottlePedal()) {
        hash = (37 * hash) + THROTTLE_PEDAL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getThrottlePedal()));
      }
      if (hasBrakePedal()) {
        hash = (37 * hash) + BRAKE_PEDAL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getBrakePedal()));
      }
      if (hasAutoDriveRequest()) {
        hash = (37 * hash) + AUTO_DRIVE_REQUEST_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAutoDriveRequest());
      }
      if (hasSoc()) {
        hash = (37 * hash) + SOC_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getSoc()));
      }
      if (hasHydraulicPressure()) {
        hash = (37 * hash) + HYDRAULIC_PRESSURE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getHydraulicPressure()));
      }
      if (hasHighBeam()) {
        hash = (37 * hash) + HIGH_BEAM_FIELD_NUMBER;
        hash = (53 * hash) + highBeam_;
      }
      if (hasLowBeam()) {
        hash = (37 * hash) + LOW_BEAM_FIELD_NUMBER;
        hash = (53 * hash) + lowBeam_;
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static if_proto_common.ChassisOuterClass.Chassis parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.ChassisOuterClass.Chassis parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.ChassisOuterClass.Chassis parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.ChassisOuterClass.Chassis parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.ChassisOuterClass.Chassis parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.ChassisOuterClass.Chassis parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.ChassisOuterClass.Chassis parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.ChassisOuterClass.Chassis parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.ChassisOuterClass.Chassis parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static if_proto_common.ChassisOuterClass.Chassis parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.ChassisOuterClass.Chassis parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.ChassisOuterClass.Chassis parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(if_proto_common.ChassisOuterClass.Chassis prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * next id :28
     * </pre>
     *
     * Protobuf type {@code if_proto_common.Chassis}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:if_proto_common.Chassis)
        if_proto_common.ChassisOuterClass.ChassisOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return if_proto_common.ChassisOuterClass.internal_static_if_proto_common_Chassis_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return if_proto_common.ChassisOuterClass.internal_static_if_proto_common_Chassis_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                if_proto_common.ChassisOuterClass.Chassis.class, if_proto_common.ChassisOuterClass.Chassis.Builder.class);
      }

      // Construct using if_proto_common.ChassisOuterClass.Chassis.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getHeaderFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (headerBuilder_ == null) {
          header_ = null;
        } else {
          headerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        steeringAngleSpeedExecuted_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        steeringAngleExecuted_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        frontAxleSpeed_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        wheelspeedLeftfront_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        wheelspeedRightfront_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        wheelspeedLeftrear_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        wheelspeedRightrear_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        vehicleSpeed_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        motorRpm_ = Double.NaN;
        bitField0_ = (bitField0_ & ~0x00000200);
        motorTorque_ = Double.NaN;
        bitField0_ = (bitField0_ & ~0x00000400);
        chassisErrorMask_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        errorCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        drivingMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        gearPosition_ = 2;
        bitField0_ = (bitField0_ & ~0x00004000);
        leftTurnLamp_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        rightTurnLamp_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        throttlePedal_ = 0D;
        bitField0_ = (bitField0_ & ~0x00020000);
        brakePedal_ = 0D;
        bitField0_ = (bitField0_ & ~0x00040000);
        autoDriveRequest_ = false;
        bitField0_ = (bitField0_ & ~0x00080000);
        soc_ = 0D;
        bitField0_ = (bitField0_ & ~0x00100000);
        hydraulicPressure_ = 0D;
        bitField0_ = (bitField0_ & ~0x00200000);
        highBeam_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        lowBeam_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return if_proto_common.ChassisOuterClass.internal_static_if_proto_common_Chassis_descriptor;
      }

      @java.lang.Override
      public if_proto_common.ChassisOuterClass.Chassis getDefaultInstanceForType() {
        return if_proto_common.ChassisOuterClass.Chassis.getDefaultInstance();
      }

      @java.lang.Override
      public if_proto_common.ChassisOuterClass.Chassis build() {
        if_proto_common.ChassisOuterClass.Chassis result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public if_proto_common.ChassisOuterClass.Chassis buildPartial() {
        if_proto_common.ChassisOuterClass.Chassis result = new if_proto_common.ChassisOuterClass.Chassis(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          if (headerBuilder_ == null) {
            result.header_ = header_;
          } else {
            result.header_ = headerBuilder_.build();
          }
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.steeringAngleSpeedExecuted_ = steeringAngleSpeedExecuted_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.steeringAngleExecuted_ = steeringAngleExecuted_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.frontAxleSpeed_ = frontAxleSpeed_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.wheelspeedLeftfront_ = wheelspeedLeftfront_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.wheelspeedRightfront_ = wheelspeedRightfront_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.wheelspeedLeftrear_ = wheelspeedLeftrear_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.wheelspeedRightrear_ = wheelspeedRightrear_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.vehicleSpeed_ = vehicleSpeed_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          to_bitField0_ |= 0x00000200;
        }
        result.motorRpm_ = motorRpm_;
        if (((from_bitField0_ & 0x00000400) != 0)) {
          to_bitField0_ |= 0x00000400;
        }
        result.motorTorque_ = motorTorque_;
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.chassisErrorMask_ = chassisErrorMask_;
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          to_bitField0_ |= 0x00001000;
        }
        result.errorCode_ = errorCode_;
        if (((from_bitField0_ & 0x00002000) != 0)) {
          to_bitField0_ |= 0x00002000;
        }
        result.drivingMode_ = drivingMode_;
        if (((from_bitField0_ & 0x00004000) != 0)) {
          to_bitField0_ |= 0x00004000;
        }
        result.gearPosition_ = gearPosition_;
        if (((from_bitField0_ & 0x00008000) != 0)) {
          to_bitField0_ |= 0x00008000;
        }
        result.leftTurnLamp_ = leftTurnLamp_;
        if (((from_bitField0_ & 0x00010000) != 0)) {
          to_bitField0_ |= 0x00010000;
        }
        result.rightTurnLamp_ = rightTurnLamp_;
        if (((from_bitField0_ & 0x00020000) != 0)) {
          result.throttlePedal_ = throttlePedal_;
          to_bitField0_ |= 0x00020000;
        }
        if (((from_bitField0_ & 0x00040000) != 0)) {
          result.brakePedal_ = brakePedal_;
          to_bitField0_ |= 0x00040000;
        }
        if (((from_bitField0_ & 0x00080000) != 0)) {
          result.autoDriveRequest_ = autoDriveRequest_;
          to_bitField0_ |= 0x00080000;
        }
        if (((from_bitField0_ & 0x00100000) != 0)) {
          result.soc_ = soc_;
          to_bitField0_ |= 0x00100000;
        }
        if (((from_bitField0_ & 0x00200000) != 0)) {
          result.hydraulicPressure_ = hydraulicPressure_;
          to_bitField0_ |= 0x00200000;
        }
        if (((from_bitField0_ & 0x00400000) != 0)) {
          to_bitField0_ |= 0x00400000;
        }
        result.highBeam_ = highBeam_;
        if (((from_bitField0_ & 0x00800000) != 0)) {
          to_bitField0_ |= 0x00800000;
        }
        result.lowBeam_ = lowBeam_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof if_proto_common.ChassisOuterClass.Chassis) {
          return mergeFrom((if_proto_common.ChassisOuterClass.Chassis)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(if_proto_common.ChassisOuterClass.Chassis other) {
        if (other == if_proto_common.ChassisOuterClass.Chassis.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (other.hasSteeringAngleSpeedExecuted()) {
          setSteeringAngleSpeedExecuted(other.getSteeringAngleSpeedExecuted());
        }
        if (other.hasSteeringAngleExecuted()) {
          setSteeringAngleExecuted(other.getSteeringAngleExecuted());
        }
        if (other.hasFrontAxleSpeed()) {
          setFrontAxleSpeed(other.getFrontAxleSpeed());
        }
        if (other.hasWheelspeedLeftfront()) {
          setWheelspeedLeftfront(other.getWheelspeedLeftfront());
        }
        if (other.hasWheelspeedRightfront()) {
          setWheelspeedRightfront(other.getWheelspeedRightfront());
        }
        if (other.hasWheelspeedLeftrear()) {
          setWheelspeedLeftrear(other.getWheelspeedLeftrear());
        }
        if (other.hasWheelspeedRightrear()) {
          setWheelspeedRightrear(other.getWheelspeedRightrear());
        }
        if (other.hasVehicleSpeed()) {
          setVehicleSpeed(other.getVehicleSpeed());
        }
        if (other.hasMotorRpm()) {
          setMotorRpm(other.getMotorRpm());
        }
        if (other.hasMotorTorque()) {
          setMotorTorque(other.getMotorTorque());
        }
        if (other.hasChassisErrorMask()) {
          setChassisErrorMask(other.getChassisErrorMask());
        }
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        if (other.hasDrivingMode()) {
          setDrivingMode(other.getDrivingMode());
        }
        if (other.hasGearPosition()) {
          setGearPosition(other.getGearPosition());
        }
        if (other.hasLeftTurnLamp()) {
          setLeftTurnLamp(other.getLeftTurnLamp());
        }
        if (other.hasRightTurnLamp()) {
          setRightTurnLamp(other.getRightTurnLamp());
        }
        if (other.hasThrottlePedal()) {
          setThrottlePedal(other.getThrottlePedal());
        }
        if (other.hasBrakePedal()) {
          setBrakePedal(other.getBrakePedal());
        }
        if (other.hasAutoDriveRequest()) {
          setAutoDriveRequest(other.getAutoDriveRequest());
        }
        if (other.hasSoc()) {
          setSoc(other.getSoc());
        }
        if (other.hasHydraulicPressure()) {
          setHydraulicPressure(other.getHydraulicPressure());
        }
        if (other.hasHighBeam()) {
          setHighBeam(other.getHighBeam());
        }
        if (other.hasLowBeam()) {
          setLowBeam(other.getLowBeam());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if_proto_common.ChassisOuterClass.Chassis parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (if_proto_common.ChassisOuterClass.Chassis) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private if_proto_common.BxtCommonHeader.Header header_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonHeader.Header, if_proto_common.BxtCommonHeader.Header.Builder, if_proto_common.BxtCommonHeader.HeaderOrBuilder> headerBuilder_;
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       * @return Whether the header field is set.
       */
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       * @return The header.
       */
      public if_proto_common.BxtCommonHeader.Header getHeader() {
        if (headerBuilder_ == null) {
          return header_ == null ? if_proto_common.BxtCommonHeader.Header.getDefaultInstance() : header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       */
      public Builder setHeader(if_proto_common.BxtCommonHeader.Header value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
          onChanged();
        } else {
          headerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       */
      public Builder setHeader(
          if_proto_common.BxtCommonHeader.Header.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
          onChanged();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       */
      public Builder mergeHeader(if_proto_common.BxtCommonHeader.Header value) {
        if (headerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
              header_ != null &&
              header_ != if_proto_common.BxtCommonHeader.Header.getDefaultInstance()) {
            header_ =
              if_proto_common.BxtCommonHeader.Header.newBuilder(header_).mergeFrom(value).buildPartial();
          } else {
            header_ = value;
          }
          onChanged();
        } else {
          headerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       */
      public Builder clearHeader() {
        if (headerBuilder_ == null) {
          header_ = null;
          onChanged();
        } else {
          headerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       */
      public if_proto_common.BxtCommonHeader.Header.Builder getHeaderBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       */
      public if_proto_common.BxtCommonHeader.HeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_ == null ?
              if_proto_common.BxtCommonHeader.Header.getDefaultInstance() : header_;
        }
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonHeader.Header, if_proto_common.BxtCommonHeader.Header.Builder, if_proto_common.BxtCommonHeader.HeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtCommonHeader.Header, if_proto_common.BxtCommonHeader.Header.Builder, if_proto_common.BxtCommonHeader.HeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private double steeringAngleSpeedExecuted_ ;
      /**
       * <pre>
       * EPS
       * </pre>
       *
       * <code>optional double steering_angle_speed_executed = 2 [default = 0];</code>
       * @return Whether the steeringAngleSpeedExecuted field is set.
       */
      @java.lang.Override
      public boolean hasSteeringAngleSpeedExecuted() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * EPS
       * </pre>
       *
       * <code>optional double steering_angle_speed_executed = 2 [default = 0];</code>
       * @return The steeringAngleSpeedExecuted.
       */
      @java.lang.Override
      public double getSteeringAngleSpeedExecuted() {
        return steeringAngleSpeedExecuted_;
      }
      /**
       * <pre>
       * EPS
       * </pre>
       *
       * <code>optional double steering_angle_speed_executed = 2 [default = 0];</code>
       * @param value The steeringAngleSpeedExecuted to set.
       * @return This builder for chaining.
       */
      public Builder setSteeringAngleSpeedExecuted(double value) {
        bitField0_ |= 0x00000002;
        steeringAngleSpeedExecuted_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * EPS
       * </pre>
       *
       * <code>optional double steering_angle_speed_executed = 2 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearSteeringAngleSpeedExecuted() {
        bitField0_ = (bitField0_ & ~0x00000002);
        steeringAngleSpeedExecuted_ = 0D;
        onChanged();
        return this;
      }

      private double steeringAngleExecuted_ ;
      /**
       * <pre>
       * degree
       * </pre>
       *
       * <code>optional double steering_angle_executed = 3 [default = 0];</code>
       * @return Whether the steeringAngleExecuted field is set.
       */
      @java.lang.Override
      public boolean hasSteeringAngleExecuted() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * degree
       * </pre>
       *
       * <code>optional double steering_angle_executed = 3 [default = 0];</code>
       * @return The steeringAngleExecuted.
       */
      @java.lang.Override
      public double getSteeringAngleExecuted() {
        return steeringAngleExecuted_;
      }
      /**
       * <pre>
       * degree
       * </pre>
       *
       * <code>optional double steering_angle_executed = 3 [default = 0];</code>
       * @param value The steeringAngleExecuted to set.
       * @return This builder for chaining.
       */
      public Builder setSteeringAngleExecuted(double value) {
        bitField0_ |= 0x00000004;
        steeringAngleExecuted_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * degree
       * </pre>
       *
       * <code>optional double steering_angle_executed = 3 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearSteeringAngleExecuted() {
        bitField0_ = (bitField0_ & ~0x00000004);
        steeringAngleExecuted_ = 0D;
        onChanged();
        return this;
      }

      private double frontAxleSpeed_ ;
      /**
       * <pre>
       * km/h
       * </pre>
       *
       * <code>optional double front_axle_speed = 4 [default = 0];</code>
       * @return Whether the frontAxleSpeed field is set.
       */
      @java.lang.Override
      public boolean hasFrontAxleSpeed() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * km/h
       * </pre>
       *
       * <code>optional double front_axle_speed = 4 [default = 0];</code>
       * @return The frontAxleSpeed.
       */
      @java.lang.Override
      public double getFrontAxleSpeed() {
        return frontAxleSpeed_;
      }
      /**
       * <pre>
       * km/h
       * </pre>
       *
       * <code>optional double front_axle_speed = 4 [default = 0];</code>
       * @param value The frontAxleSpeed to set.
       * @return This builder for chaining.
       */
      public Builder setFrontAxleSpeed(double value) {
        bitField0_ |= 0x00000008;
        frontAxleSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * km/h
       * </pre>
       *
       * <code>optional double front_axle_speed = 4 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearFrontAxleSpeed() {
        bitField0_ = (bitField0_ & ~0x00000008);
        frontAxleSpeed_ = 0D;
        onChanged();
        return this;
      }

      private double wheelspeedLeftfront_ ;
      /**
       * <pre>
       * wheel speed relative to front_axle_speed, km/h
       * </pre>
       *
       * <code>optional double wheelspeed_leftfront = 5 [default = 0];</code>
       * @return Whether the wheelspeedLeftfront field is set.
       */
      @java.lang.Override
      public boolean hasWheelspeedLeftfront() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * wheel speed relative to front_axle_speed, km/h
       * </pre>
       *
       * <code>optional double wheelspeed_leftfront = 5 [default = 0];</code>
       * @return The wheelspeedLeftfront.
       */
      @java.lang.Override
      public double getWheelspeedLeftfront() {
        return wheelspeedLeftfront_;
      }
      /**
       * <pre>
       * wheel speed relative to front_axle_speed, km/h
       * </pre>
       *
       * <code>optional double wheelspeed_leftfront = 5 [default = 0];</code>
       * @param value The wheelspeedLeftfront to set.
       * @return This builder for chaining.
       */
      public Builder setWheelspeedLeftfront(double value) {
        bitField0_ |= 0x00000010;
        wheelspeedLeftfront_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * wheel speed relative to front_axle_speed, km/h
       * </pre>
       *
       * <code>optional double wheelspeed_leftfront = 5 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearWheelspeedLeftfront() {
        bitField0_ = (bitField0_ & ~0x00000010);
        wheelspeedLeftfront_ = 0D;
        onChanged();
        return this;
      }

      private double wheelspeedRightfront_ ;
      /**
       * <code>optional double wheelspeed_rightfront = 6 [default = 0];</code>
       * @return Whether the wheelspeedRightfront field is set.
       */
      @java.lang.Override
      public boolean hasWheelspeedRightfront() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional double wheelspeed_rightfront = 6 [default = 0];</code>
       * @return The wheelspeedRightfront.
       */
      @java.lang.Override
      public double getWheelspeedRightfront() {
        return wheelspeedRightfront_;
      }
      /**
       * <code>optional double wheelspeed_rightfront = 6 [default = 0];</code>
       * @param value The wheelspeedRightfront to set.
       * @return This builder for chaining.
       */
      public Builder setWheelspeedRightfront(double value) {
        bitField0_ |= 0x00000020;
        wheelspeedRightfront_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double wheelspeed_rightfront = 6 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearWheelspeedRightfront() {
        bitField0_ = (bitField0_ & ~0x00000020);
        wheelspeedRightfront_ = 0D;
        onChanged();
        return this;
      }

      private double wheelspeedLeftrear_ ;
      /**
       * <code>optional double wheelspeed_leftrear = 7 [default = 0];</code>
       * @return Whether the wheelspeedLeftrear field is set.
       */
      @java.lang.Override
      public boolean hasWheelspeedLeftrear() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional double wheelspeed_leftrear = 7 [default = 0];</code>
       * @return The wheelspeedLeftrear.
       */
      @java.lang.Override
      public double getWheelspeedLeftrear() {
        return wheelspeedLeftrear_;
      }
      /**
       * <code>optional double wheelspeed_leftrear = 7 [default = 0];</code>
       * @param value The wheelspeedLeftrear to set.
       * @return This builder for chaining.
       */
      public Builder setWheelspeedLeftrear(double value) {
        bitField0_ |= 0x00000040;
        wheelspeedLeftrear_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double wheelspeed_leftrear = 7 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearWheelspeedLeftrear() {
        bitField0_ = (bitField0_ & ~0x00000040);
        wheelspeedLeftrear_ = 0D;
        onChanged();
        return this;
      }

      private double wheelspeedRightrear_ ;
      /**
       * <code>optional double wheelspeed_rightrear = 8 [default = 0];</code>
       * @return Whether the wheelspeedRightrear field is set.
       */
      @java.lang.Override
      public boolean hasWheelspeedRightrear() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional double wheelspeed_rightrear = 8 [default = 0];</code>
       * @return The wheelspeedRightrear.
       */
      @java.lang.Override
      public double getWheelspeedRightrear() {
        return wheelspeedRightrear_;
      }
      /**
       * <code>optional double wheelspeed_rightrear = 8 [default = 0];</code>
       * @param value The wheelspeedRightrear to set.
       * @return This builder for chaining.
       */
      public Builder setWheelspeedRightrear(double value) {
        bitField0_ |= 0x00000080;
        wheelspeedRightrear_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double wheelspeed_rightrear = 8 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearWheelspeedRightrear() {
        bitField0_ = (bitField0_ & ~0x00000080);
        wheelspeedRightrear_ = 0D;
        onChanged();
        return this;
      }

      private double vehicleSpeed_ ;
      /**
       * <pre>
       * vcu
       * </pre>
       *
       * <code>optional double vehicle_speed = 9 [default = 0];</code>
       * @return Whether the vehicleSpeed field is set.
       */
      @java.lang.Override
      public boolean hasVehicleSpeed() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * vcu
       * </pre>
       *
       * <code>optional double vehicle_speed = 9 [default = 0];</code>
       * @return The vehicleSpeed.
       */
      @java.lang.Override
      public double getVehicleSpeed() {
        return vehicleSpeed_;
      }
      /**
       * <pre>
       * vcu
       * </pre>
       *
       * <code>optional double vehicle_speed = 9 [default = 0];</code>
       * @param value The vehicleSpeed to set.
       * @return This builder for chaining.
       */
      public Builder setVehicleSpeed(double value) {
        bitField0_ |= 0x00000100;
        vehicleSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * vcu
       * </pre>
       *
       * <code>optional double vehicle_speed = 9 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearVehicleSpeed() {
        bitField0_ = (bitField0_ & ~0x00000100);
        vehicleSpeed_ = 0D;
        onChanged();
        return this;
      }

      private double motorRpm_ = Double.NaN;
      /**
       * <code>optional double motor_rpm = 10 [default = nan];</code>
       * @return Whether the motorRpm field is set.
       */
      @java.lang.Override
      public boolean hasMotorRpm() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional double motor_rpm = 10 [default = nan];</code>
       * @return The motorRpm.
       */
      @java.lang.Override
      public double getMotorRpm() {
        return motorRpm_;
      }
      /**
       * <code>optional double motor_rpm = 10 [default = nan];</code>
       * @param value The motorRpm to set.
       * @return This builder for chaining.
       */
      public Builder setMotorRpm(double value) {
        bitField0_ |= 0x00000200;
        motorRpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double motor_rpm = 10 [default = nan];</code>
       * @return This builder for chaining.
       */
      public Builder clearMotorRpm() {
        bitField0_ = (bitField0_ & ~0x00000200);
        motorRpm_ = Double.NaN;
        onChanged();
        return this;
      }

      private double motorTorque_ = Double.NaN;
      /**
       * <code>optional double motor_torque = 11 [default = nan];</code>
       * @return Whether the motorTorque field is set.
       */
      @java.lang.Override
      public boolean hasMotorTorque() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <code>optional double motor_torque = 11 [default = nan];</code>
       * @return The motorTorque.
       */
      @java.lang.Override
      public double getMotorTorque() {
        return motorTorque_;
      }
      /**
       * <code>optional double motor_torque = 11 [default = nan];</code>
       * @param value The motorTorque to set.
       * @return This builder for chaining.
       */
      public Builder setMotorTorque(double value) {
        bitField0_ |= 0x00000400;
        motorTorque_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double motor_torque = 11 [default = nan];</code>
       * @return This builder for chaining.
       */
      public Builder clearMotorTorque() {
        bitField0_ = (bitField0_ & ~0x00000400);
        motorTorque_ = Double.NaN;
        onChanged();
        return this;
      }

      private int chassisErrorMask_ ;
      /**
       * <code>optional int32 chassis_error_mask = 12 [default = 0];</code>
       * @return Whether the chassisErrorMask field is set.
       */
      @java.lang.Override
      public boolean hasChassisErrorMask() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <code>optional int32 chassis_error_mask = 12 [default = 0];</code>
       * @return The chassisErrorMask.
       */
      @java.lang.Override
      public int getChassisErrorMask() {
        return chassisErrorMask_;
      }
      /**
       * <code>optional int32 chassis_error_mask = 12 [default = 0];</code>
       * @param value The chassisErrorMask to set.
       * @return This builder for chaining.
       */
      public Builder setChassisErrorMask(int value) {
        bitField0_ |= 0x00000800;
        chassisErrorMask_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 chassis_error_mask = 12 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearChassisErrorMask() {
        bitField0_ = (bitField0_ & ~0x00000800);
        chassisErrorMask_ = 0;
        onChanged();
        return this;
      }

      private int errorCode_ = 0;
      /**
       * <code>optional .if_proto_common.Chassis.ErrorCode error_code = 13 [default = NO_ERROR];</code>
       * @return Whether the errorCode field is set.
       */
      @java.lang.Override public boolean hasErrorCode() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <code>optional .if_proto_common.Chassis.ErrorCode error_code = 13 [default = NO_ERROR];</code>
       * @return The errorCode.
       */
      @java.lang.Override
      public if_proto_common.ChassisOuterClass.Chassis.ErrorCode getErrorCode() {
        @SuppressWarnings("deprecation")
        if_proto_common.ChassisOuterClass.Chassis.ErrorCode result = if_proto_common.ChassisOuterClass.Chassis.ErrorCode.valueOf(errorCode_);
        return result == null ? if_proto_common.ChassisOuterClass.Chassis.ErrorCode.NO_ERROR : result;
      }
      /**
       * <code>optional .if_proto_common.Chassis.ErrorCode error_code = 13 [default = NO_ERROR];</code>
       * @param value The errorCode to set.
       * @return This builder for chaining.
       */
      public Builder setErrorCode(if_proto_common.ChassisOuterClass.Chassis.ErrorCode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00001000;
        errorCode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .if_proto_common.Chassis.ErrorCode error_code = 13 [default = NO_ERROR];</code>
       * @return This builder for chaining.
       */
      public Builder clearErrorCode() {
        bitField0_ = (bitField0_ & ~0x00001000);
        errorCode_ = 0;
        onChanged();
        return this;
      }

      private int drivingMode_ = 0;
      /**
       * <code>optional .if_proto_common.Chassis.DrivingMode driving_mode = 14 [default = COMPLETE_MANUAL];</code>
       * @return Whether the drivingMode field is set.
       */
      @java.lang.Override public boolean hasDrivingMode() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <code>optional .if_proto_common.Chassis.DrivingMode driving_mode = 14 [default = COMPLETE_MANUAL];</code>
       * @return The drivingMode.
       */
      @java.lang.Override
      public if_proto_common.ChassisOuterClass.Chassis.DrivingMode getDrivingMode() {
        @SuppressWarnings("deprecation")
        if_proto_common.ChassisOuterClass.Chassis.DrivingMode result = if_proto_common.ChassisOuterClass.Chassis.DrivingMode.valueOf(drivingMode_);
        return result == null ? if_proto_common.ChassisOuterClass.Chassis.DrivingMode.COMPLETE_MANUAL : result;
      }
      /**
       * <code>optional .if_proto_common.Chassis.DrivingMode driving_mode = 14 [default = COMPLETE_MANUAL];</code>
       * @param value The drivingMode to set.
       * @return This builder for chaining.
       */
      public Builder setDrivingMode(if_proto_common.ChassisOuterClass.Chassis.DrivingMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00002000;
        drivingMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .if_proto_common.Chassis.DrivingMode driving_mode = 14 [default = COMPLETE_MANUAL];</code>
       * @return This builder for chaining.
       */
      public Builder clearDrivingMode() {
        bitField0_ = (bitField0_ & ~0x00002000);
        drivingMode_ = 0;
        onChanged();
        return this;
      }

      private int gearPosition_ = 2;
      /**
       * <code>optional .if_proto_common.Chassis.GearPosition gear_position = 15 [default = GEAR_NEUTRAL];</code>
       * @return Whether the gearPosition field is set.
       */
      @java.lang.Override public boolean hasGearPosition() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <code>optional .if_proto_common.Chassis.GearPosition gear_position = 15 [default = GEAR_NEUTRAL];</code>
       * @return The gearPosition.
       */
      @java.lang.Override
      public if_proto_common.ChassisOuterClass.Chassis.GearPosition getGearPosition() {
        @SuppressWarnings("deprecation")
        if_proto_common.ChassisOuterClass.Chassis.GearPosition result = if_proto_common.ChassisOuterClass.Chassis.GearPosition.valueOf(gearPosition_);
        return result == null ? if_proto_common.ChassisOuterClass.Chassis.GearPosition.GEAR_NEUTRAL : result;
      }
      /**
       * <code>optional .if_proto_common.Chassis.GearPosition gear_position = 15 [default = GEAR_NEUTRAL];</code>
       * @param value The gearPosition to set.
       * @return This builder for chaining.
       */
      public Builder setGearPosition(if_proto_common.ChassisOuterClass.Chassis.GearPosition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00004000;
        gearPosition_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .if_proto_common.Chassis.GearPosition gear_position = 15 [default = GEAR_NEUTRAL];</code>
       * @return This builder for chaining.
       */
      public Builder clearGearPosition() {
        bitField0_ = (bitField0_ & ~0x00004000);
        gearPosition_ = 2;
        onChanged();
        return this;
      }

      private int leftTurnLamp_ = 0;
      /**
       * <code>optional .if_proto_common.Chassis.Status left_turn_lamp = 16 [default = OFF];</code>
       * @return Whether the leftTurnLamp field is set.
       */
      @java.lang.Override public boolean hasLeftTurnLamp() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <code>optional .if_proto_common.Chassis.Status left_turn_lamp = 16 [default = OFF];</code>
       * @return The leftTurnLamp.
       */
      @java.lang.Override
      public if_proto_common.ChassisOuterClass.Chassis.Status getLeftTurnLamp() {
        @SuppressWarnings("deprecation")
        if_proto_common.ChassisOuterClass.Chassis.Status result = if_proto_common.ChassisOuterClass.Chassis.Status.valueOf(leftTurnLamp_);
        return result == null ? if_proto_common.ChassisOuterClass.Chassis.Status.OFF : result;
      }
      /**
       * <code>optional .if_proto_common.Chassis.Status left_turn_lamp = 16 [default = OFF];</code>
       * @param value The leftTurnLamp to set.
       * @return This builder for chaining.
       */
      public Builder setLeftTurnLamp(if_proto_common.ChassisOuterClass.Chassis.Status value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00008000;
        leftTurnLamp_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .if_proto_common.Chassis.Status left_turn_lamp = 16 [default = OFF];</code>
       * @return This builder for chaining.
       */
      public Builder clearLeftTurnLamp() {
        bitField0_ = (bitField0_ & ~0x00008000);
        leftTurnLamp_ = 0;
        onChanged();
        return this;
      }

      private int rightTurnLamp_ = 0;
      /**
       * <code>optional .if_proto_common.Chassis.Status right_turn_lamp = 17 [default = OFF];</code>
       * @return Whether the rightTurnLamp field is set.
       */
      @java.lang.Override public boolean hasRightTurnLamp() {
        return ((bitField0_ & 0x00010000) != 0);
      }
      /**
       * <code>optional .if_proto_common.Chassis.Status right_turn_lamp = 17 [default = OFF];</code>
       * @return The rightTurnLamp.
       */
      @java.lang.Override
      public if_proto_common.ChassisOuterClass.Chassis.Status getRightTurnLamp() {
        @SuppressWarnings("deprecation")
        if_proto_common.ChassisOuterClass.Chassis.Status result = if_proto_common.ChassisOuterClass.Chassis.Status.valueOf(rightTurnLamp_);
        return result == null ? if_proto_common.ChassisOuterClass.Chassis.Status.OFF : result;
      }
      /**
       * <code>optional .if_proto_common.Chassis.Status right_turn_lamp = 17 [default = OFF];</code>
       * @param value The rightTurnLamp to set.
       * @return This builder for chaining.
       */
      public Builder setRightTurnLamp(if_proto_common.ChassisOuterClass.Chassis.Status value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00010000;
        rightTurnLamp_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .if_proto_common.Chassis.Status right_turn_lamp = 17 [default = OFF];</code>
       * @return This builder for chaining.
       */
      public Builder clearRightTurnLamp() {
        bitField0_ = (bitField0_ & ~0x00010000);
        rightTurnLamp_ = 0;
        onChanged();
        return this;
      }

      private double throttlePedal_ ;
      /**
       * <pre>
       * %
       * </pre>
       *
       * <code>optional double throttle_pedal = 18 [default = 0];</code>
       * @return Whether the throttlePedal field is set.
       */
      @java.lang.Override
      public boolean hasThrottlePedal() {
        return ((bitField0_ & 0x00020000) != 0);
      }
      /**
       * <pre>
       * %
       * </pre>
       *
       * <code>optional double throttle_pedal = 18 [default = 0];</code>
       * @return The throttlePedal.
       */
      @java.lang.Override
      public double getThrottlePedal() {
        return throttlePedal_;
      }
      /**
       * <pre>
       * %
       * </pre>
       *
       * <code>optional double throttle_pedal = 18 [default = 0];</code>
       * @param value The throttlePedal to set.
       * @return This builder for chaining.
       */
      public Builder setThrottlePedal(double value) {
        bitField0_ |= 0x00020000;
        throttlePedal_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * %
       * </pre>
       *
       * <code>optional double throttle_pedal = 18 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearThrottlePedal() {
        bitField0_ = (bitField0_ & ~0x00020000);
        throttlePedal_ = 0D;
        onChanged();
        return this;
      }

      private double brakePedal_ ;
      /**
       * <pre>
       *%
       * </pre>
       *
       * <code>optional double brake_pedal = 19 [default = 0];</code>
       * @return Whether the brakePedal field is set.
       */
      @java.lang.Override
      public boolean hasBrakePedal() {
        return ((bitField0_ & 0x00040000) != 0);
      }
      /**
       * <pre>
       *%
       * </pre>
       *
       * <code>optional double brake_pedal = 19 [default = 0];</code>
       * @return The brakePedal.
       */
      @java.lang.Override
      public double getBrakePedal() {
        return brakePedal_;
      }
      /**
       * <pre>
       *%
       * </pre>
       *
       * <code>optional double brake_pedal = 19 [default = 0];</code>
       * @param value The brakePedal to set.
       * @return This builder for chaining.
       */
      public Builder setBrakePedal(double value) {
        bitField0_ |= 0x00040000;
        brakePedal_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *%
       * </pre>
       *
       * <code>optional double brake_pedal = 19 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearBrakePedal() {
        bitField0_ = (bitField0_ & ~0x00040000);
        brakePedal_ = 0D;
        onChanged();
        return this;
      }

      private boolean autoDriveRequest_ ;
      /**
       * <code>optional bool auto_drive_request = 20 [default = false];</code>
       * @return Whether the autoDriveRequest field is set.
       */
      @java.lang.Override
      public boolean hasAutoDriveRequest() {
        return ((bitField0_ & 0x00080000) != 0);
      }
      /**
       * <code>optional bool auto_drive_request = 20 [default = false];</code>
       * @return The autoDriveRequest.
       */
      @java.lang.Override
      public boolean getAutoDriveRequest() {
        return autoDriveRequest_;
      }
      /**
       * <code>optional bool auto_drive_request = 20 [default = false];</code>
       * @param value The autoDriveRequest to set.
       * @return This builder for chaining.
       */
      public Builder setAutoDriveRequest(boolean value) {
        bitField0_ |= 0x00080000;
        autoDriveRequest_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool auto_drive_request = 20 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearAutoDriveRequest() {
        bitField0_ = (bitField0_ & ~0x00080000);
        autoDriveRequest_ = false;
        onChanged();
        return this;
      }

      private double soc_ ;
      /**
       * <pre>
       *%
       * </pre>
       *
       * <code>optional double soc = 21 [default = 0];</code>
       * @return Whether the soc field is set.
       */
      @java.lang.Override
      public boolean hasSoc() {
        return ((bitField0_ & 0x00100000) != 0);
      }
      /**
       * <pre>
       *%
       * </pre>
       *
       * <code>optional double soc = 21 [default = 0];</code>
       * @return The soc.
       */
      @java.lang.Override
      public double getSoc() {
        return soc_;
      }
      /**
       * <pre>
       *%
       * </pre>
       *
       * <code>optional double soc = 21 [default = 0];</code>
       * @param value The soc to set.
       * @return This builder for chaining.
       */
      public Builder setSoc(double value) {
        bitField0_ |= 0x00100000;
        soc_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *%
       * </pre>
       *
       * <code>optional double soc = 21 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearSoc() {
        bitField0_ = (bitField0_ & ~0x00100000);
        soc_ = 0D;
        onChanged();
        return this;
      }

      private double hydraulicPressure_ ;
      /**
       * <pre>
       * IBS(brake system) hydraulic pressure
       * </pre>
       *
       * <code>optional double hydraulic_pressure = 22;</code>
       * @return Whether the hydraulicPressure field is set.
       */
      @java.lang.Override
      public boolean hasHydraulicPressure() {
        return ((bitField0_ & 0x00200000) != 0);
      }
      /**
       * <pre>
       * IBS(brake system) hydraulic pressure
       * </pre>
       *
       * <code>optional double hydraulic_pressure = 22;</code>
       * @return The hydraulicPressure.
       */
      @java.lang.Override
      public double getHydraulicPressure() {
        return hydraulicPressure_;
      }
      /**
       * <pre>
       * IBS(brake system) hydraulic pressure
       * </pre>
       *
       * <code>optional double hydraulic_pressure = 22;</code>
       * @param value The hydraulicPressure to set.
       * @return This builder for chaining.
       */
      public Builder setHydraulicPressure(double value) {
        bitField0_ |= 0x00200000;
        hydraulicPressure_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * IBS(brake system) hydraulic pressure
       * </pre>
       *
       * <code>optional double hydraulic_pressure = 22;</code>
       * @return This builder for chaining.
       */
      public Builder clearHydraulicPressure() {
        bitField0_ = (bitField0_ & ~0x00200000);
        hydraulicPressure_ = 0D;
        onChanged();
        return this;
      }

      private int highBeam_ = 0;
      /**
       * <pre>
       * Beam status
       * </pre>
       *
       * <code>optional .if_proto_common.Chassis.Status high_beam = 23 [default = OFF];</code>
       * @return Whether the highBeam field is set.
       */
      @java.lang.Override public boolean hasHighBeam() {
        return ((bitField0_ & 0x00400000) != 0);
      }
      /**
       * <pre>
       * Beam status
       * </pre>
       *
       * <code>optional .if_proto_common.Chassis.Status high_beam = 23 [default = OFF];</code>
       * @return The highBeam.
       */
      @java.lang.Override
      public if_proto_common.ChassisOuterClass.Chassis.Status getHighBeam() {
        @SuppressWarnings("deprecation")
        if_proto_common.ChassisOuterClass.Chassis.Status result = if_proto_common.ChassisOuterClass.Chassis.Status.valueOf(highBeam_);
        return result == null ? if_proto_common.ChassisOuterClass.Chassis.Status.OFF : result;
      }
      /**
       * <pre>
       * Beam status
       * </pre>
       *
       * <code>optional .if_proto_common.Chassis.Status high_beam = 23 [default = OFF];</code>
       * @param value The highBeam to set.
       * @return This builder for chaining.
       */
      public Builder setHighBeam(if_proto_common.ChassisOuterClass.Chassis.Status value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00400000;
        highBeam_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Beam status
       * </pre>
       *
       * <code>optional .if_proto_common.Chassis.Status high_beam = 23 [default = OFF];</code>
       * @return This builder for chaining.
       */
      public Builder clearHighBeam() {
        bitField0_ = (bitField0_ & ~0x00400000);
        highBeam_ = 0;
        onChanged();
        return this;
      }

      private int lowBeam_ = 0;
      /**
       * <code>optional .if_proto_common.Chassis.Status low_beam = 24 [default = OFF];</code>
       * @return Whether the lowBeam field is set.
       */
      @java.lang.Override public boolean hasLowBeam() {
        return ((bitField0_ & 0x00800000) != 0);
      }
      /**
       * <code>optional .if_proto_common.Chassis.Status low_beam = 24 [default = OFF];</code>
       * @return The lowBeam.
       */
      @java.lang.Override
      public if_proto_common.ChassisOuterClass.Chassis.Status getLowBeam() {
        @SuppressWarnings("deprecation")
        if_proto_common.ChassisOuterClass.Chassis.Status result = if_proto_common.ChassisOuterClass.Chassis.Status.valueOf(lowBeam_);
        return result == null ? if_proto_common.ChassisOuterClass.Chassis.Status.OFF : result;
      }
      /**
       * <code>optional .if_proto_common.Chassis.Status low_beam = 24 [default = OFF];</code>
       * @param value The lowBeam to set.
       * @return This builder for chaining.
       */
      public Builder setLowBeam(if_proto_common.ChassisOuterClass.Chassis.Status value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00800000;
        lowBeam_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .if_proto_common.Chassis.Status low_beam = 24 [default = OFF];</code>
       * @return This builder for chaining.
       */
      public Builder clearLowBeam() {
        bitField0_ = (bitField0_ & ~0x00800000);
        lowBeam_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:if_proto_common.Chassis)
    }

    // @@protoc_insertion_point(class_scope:if_proto_common.Chassis)
    private static final if_proto_common.ChassisOuterClass.Chassis DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new if_proto_common.ChassisOuterClass.Chassis();
    }

    public static if_proto_common.ChassisOuterClass.Chassis getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Chassis>
        PARSER = new com.google.protobuf.AbstractParser<Chassis>() {
      @java.lang.Override
      public Chassis parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Chassis(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Chassis> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Chassis> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public if_proto_common.ChassisOuterClass.Chassis getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_if_proto_common_Signal_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_if_proto_common_Signal_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_if_proto_common_Chassis_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_if_proto_common_Chassis_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rchassis.proto\022\017if_proto_common\032\027bxt.co" +
      "mmon.Header.proto\"\311\001\n\006Signal\0227\n\013turn_sig" +
      "nal\030\001 \001(\0162\".if_proto_common.Signal.TurnS" +
      "ignal\022\021\n\thigh_beam\030\002 \001(\010\022\020\n\010low_beam\030\003 \001" +
      "(\010\022\014\n\004horn\030\004 \001(\010\022\027\n\017emergency_light\030\005 \001(" +
      "\010\":\n\nTurnSignal\022\r\n\tTURN_NONE\020\000\022\r\n\tTURN_L" +
      "EFT\020\001\022\016\n\nTURN_RIGHT\020\002\"\322\014\n\007Chassis\022\'\n\006hea" +
      "der\030\001 \001(\0132\027.if_proto_common.Header\022(\n\035st" +
      "eering_angle_speed_executed\030\002 \001(\001:\0010\022\"\n\027" +
      "steering_angle_executed\030\003 \001(\001:\0010\022\033\n\020fron" +
      "t_axle_speed\030\004 \001(\001:\0010\022\037\n\024wheelspeed_left" +
      "front\030\005 \001(\001:\0010\022 \n\025wheelspeed_rightfront\030" +
      "\006 \001(\001:\0010\022\036\n\023wheelspeed_leftrear\030\007 \001(\001:\0010" +
      "\022\037\n\024wheelspeed_rightrear\030\010 \001(\001:\0010\022\030\n\rveh" +
      "icle_speed\030\t \001(\001:\0010\022\026\n\tmotor_rpm\030\n \001(\001:\003" +
      "nan\022\031\n\014motor_torque\030\013 \001(\001:\003nan\022\035\n\022chassi" +
      "s_error_mask\030\014 \001(\005:\0010\022@\n\nerror_code\030\r \001(" +
      "\0162\".if_proto_common.Chassis.ErrorCode:\010N" +
      "O_ERROR\022K\n\014driving_mode\030\016 \001(\0162$.if_proto" +
      "_common.Chassis.DrivingMode:\017COMPLETE_MA" +
      "NUAL\022J\n\rgear_position\030\017 \001(\0162%.if_proto_c" +
      "ommon.Chassis.GearPosition:\014GEAR_NEUTRAL" +
      "\022<\n\016left_turn_lamp\030\020 \001(\0162\037.if_proto_comm" +
      "on.Chassis.Status:\003OFF\022=\n\017right_turn_lam" +
      "p\030\021 \001(\0162\037.if_proto_common.Chassis.Status" +
      ":\003OFF\022\031\n\016throttle_pedal\030\022 \001(\001:\0010\022\026\n\013brak" +
      "e_pedal\030\023 \001(\001:\0010\022!\n\022auto_drive_request\030\024" +
      " \001(\010:\005false\022\016\n\003soc\030\025 \001(\001:\0010\022\032\n\022hydraulic" +
      "_pressure\030\026 \001(\001\0227\n\thigh_beam\030\027 \001(\0162\037.if_" +
      "proto_common.Chassis.Status:\003OFF\0226\n\010low_" +
      "beam\030\030 \001(\0162\037.if_proto_common.Chassis.Sta" +
      "tus:\003OFF\"\215\001\n\013DrivingMode\022\023\n\017COMPLETE_MAN" +
      "UAL\020\000\022\027\n\023COMPLETE_AUTO_DRIVE\020\001\022\022\n\016EMERGE" +
      "NCY_MODE\020\002\022\023\n\017AUTO_STEER_ONLY\020\003\022\023\n\017AUTO_" +
      "SPEED_ONLY\020\004\022\022\n\016AUTO_MISC_ONLY\020\005\"\260\002\n\tErr" +
      "orCode\022\014\n\010NO_ERROR\020\000\022\021\n\rECU_NOT_READY\020\001\022" +
      "\021\n\rCHASSIS_ERROR\020\002\022\027\n\023MANUAL_INTERVENTIO" +
      "N\020\003\022\035\n\031CHASSIS_CAN_NOT_IN_PERIOD\020\004\022\030\n\024CO" +
      "NTROL_MESSAGE_LOST\020\005\022\021\n\rUNKNOWN_ERROR\020\006\022" +
      "\034\n\030STEERING_ANGLE_TOO_LARGE\020\007\022\023\n\017AUTO_SW" +
      "ITCH_OFF\020\010\022\033\n\027VEHICLE_SPEED_TOO_LARGE\020\t\022" +
      "\036\n\032PARKING_BRAKE_NOT_RELEASED\020\n\022\032\n\026GEAR_" +
      "IN_WRONG_POSITION\020\013\"\203\001\n\014GearPosition\022\020\n\014" +
      "GEAR_PARKING\020\000\022\020\n\014GEAR_REVERSE\020\001\022\020\n\014GEAR" +
      "_NEUTRAL\020\002\022\016\n\nGEAR_DRIVE\020\003\022\014\n\010GEAR_LOW\020\004" +
      "\022\r\n\tGEAR_NONE\020\005\022\020\n\014GEAR_INVALID\020\006\"/\n\006Sta" +
      "tus\022\007\n\003OFF\020\000\022\006\n\002ON\020\001\022\007\n\003ERR\020\002\022\013\n\007RESERVE" +
      "\020\003"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          if_proto_common.BxtCommonHeader.getDescriptor(),
        });
    internal_static_if_proto_common_Signal_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_if_proto_common_Signal_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_if_proto_common_Signal_descriptor,
        new java.lang.String[] { "TurnSignal", "HighBeam", "LowBeam", "Horn", "EmergencyLight", });
    internal_static_if_proto_common_Chassis_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_if_proto_common_Chassis_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_if_proto_common_Chassis_descriptor,
        new java.lang.String[] { "Header", "SteeringAngleSpeedExecuted", "SteeringAngleExecuted", "FrontAxleSpeed", "WheelspeedLeftfront", "WheelspeedRightfront", "WheelspeedLeftrear", "WheelspeedRightrear", "VehicleSpeed", "MotorRpm", "MotorTorque", "ChassisErrorMask", "ErrorCode", "DrivingMode", "GearPosition", "LeftTurnLamp", "RightTurnLamp", "ThrottlePedal", "BrakePedal", "AutoDriveRequest", "Soc", "HydraulicPressure", "HighBeam", "LowBeam", });
    if_proto_common.BxtCommonHeader.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
