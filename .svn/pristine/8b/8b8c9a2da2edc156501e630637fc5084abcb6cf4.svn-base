// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bxt.obstacle_v2.proto

package if_proto_common;

public final class BxtObstacleV2 {
  private BxtObstacleV2() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code if_proto_common.CameraCalibType}
   */
  public enum CameraCalibType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CAMERA_CALIBRATION_HEAD_RIGHT = 0;</code>
     */
    CAMERA_CALIBRATION_HEAD_RIGHT(0),
    /**
     * <code>CAMERA_CALIBRATION_FRONT_LEFT = 1;</code>
     */
    CAMERA_CALIBRATION_FRONT_LEFT(1),
    /**
     * <code>CAMERA_CALIBRATION_FRONT_RIGHT = 2;</code>
     */
    CAMERA_CALIBRATION_FRONT_RIGHT(2),
    /**
     * <code>CAMERA_CALIBRATION_INVALID = 255;</code>
     */
    CAMERA_CALIBRATION_INVALID(255),
    ;

    /**
     * <code>CAMERA_CALIBRATION_HEAD_RIGHT = 0;</code>
     */
    public static final int CAMERA_CALIBRATION_HEAD_RIGHT_VALUE = 0;
    /**
     * <code>CAMERA_CALIBRATION_FRONT_LEFT = 1;</code>
     */
    public static final int CAMERA_CALIBRATION_FRONT_LEFT_VALUE = 1;
    /**
     * <code>CAMERA_CALIBRATION_FRONT_RIGHT = 2;</code>
     */
    public static final int CAMERA_CALIBRATION_FRONT_RIGHT_VALUE = 2;
    /**
     * <code>CAMERA_CALIBRATION_INVALID = 255;</code>
     */
    public static final int CAMERA_CALIBRATION_INVALID_VALUE = 255;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CameraCalibType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CameraCalibType forNumber(int value) {
      switch (value) {
        case 0: return CAMERA_CALIBRATION_HEAD_RIGHT;
        case 1: return CAMERA_CALIBRATION_FRONT_LEFT;
        case 2: return CAMERA_CALIBRATION_FRONT_RIGHT;
        case 255: return CAMERA_CALIBRATION_INVALID;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CameraCalibType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CameraCalibType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CameraCalibType>() {
            public CameraCalibType findValueByNumber(int number) {
              return CameraCalibType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.getDescriptor().getEnumTypes().get(0);
    }

    private static final CameraCalibType[] VALUES = values();

    public static CameraCalibType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CameraCalibType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:if_proto_common.CameraCalibType)
  }

  /**
   * Protobuf enum {@code if_proto_common.ObjectType}
   */
  public enum ObjectType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN = 0;</code>
     */
    UNKNOWN(0),
    /**
     * <code>UNKNOWN_MOVABLE = 1;</code>
     */
    UNKNOWN_MOVABLE(1),
    /**
     * <code>UNKNOWN_UNMOVABLE = 2;</code>
     */
    UNKNOWN_UNMOVABLE(2),
    /**
     * <pre>
     * Pedestrian, usually determined by moving behaviour.
     * </pre>
     *
     * <code>PEDESTRIAN = 3;</code>
     */
    PEDESTRIAN(3),
    /**
     * <pre>
     * bike, motor bike
     * </pre>
     *
     * <code>BICYCLE = 4;</code>
     */
    BICYCLE(4),
    /**
     * <pre>
     * Passenger car or truck.
     * </pre>
     *
     * <code>VEHICLE = 5;</code>
     */
    VEHICLE(5),
    /**
     * <pre>
     * Passenger car.
     * </pre>
     *
     * <code>CAR = 6;</code>
     */
    CAR(6),
    /**
     * <pre>
     * Truck.
     * </pre>
     *
     * <code>TRUCK = 7;</code>
     */
    TRUCK(7),
    /**
     * <code>BUS = 8;</code>
     */
    BUS(8),
    /**
     * <code>TRICYCLE = 9;</code>
     */
    TRICYCLE(9),
    /**
     * <code>BLOCK = 10;</code>
     */
    BLOCK(10),
    /**
     * <code>CONE_BARREL = 11;</code>
     */
    CONE_BARREL(11),
    /**
     * <code>ABANDONED_BOX = 12;</code>
     */
    ABANDONED_BOX(12),
    /**
     * <code>ABANDONED_TYRE = 13;</code>
     */
    ABANDONED_TYRE(13),
    /**
     * <pre>
     *行人
     * </pre>
     *
     * <code>TYPE_PEDESTRIAN = 21;</code>
     */
    TYPE_PEDESTRIAN(21),
    /**
     * <pre>
     *目标
     * </pre>
     *
     * <code>TYPE_OBJECT = 22;</code>
     */
    TYPE_OBJECT(22),
    /**
     * <pre>
     *机动车
     * </pre>
     *
     * <code>TYPE_VEHICLE = 23;</code>
     */
    TYPE_VEHICLE(23),
    /**
     * <pre>
     *非机动车
     * </pre>
     *
     * <code>TYPE_NONMOTOR = 24;</code>
     */
    TYPE_NONMOTOR(24),
    /**
     * <pre>
     *物品
     * </pre>
     *
     * <code>TYPE_GOODS = 25;</code>
     */
    TYPE_GOODS(25),
    /**
     * <pre>
     *场景
     * </pre>
     *
     * <code>TYPE_SCENE = 26;</code>
     */
    TYPE_SCENE(26),
    ;

    /**
     * <code>UNKNOWN = 0;</code>
     */
    public static final int UNKNOWN_VALUE = 0;
    /**
     * <code>UNKNOWN_MOVABLE = 1;</code>
     */
    public static final int UNKNOWN_MOVABLE_VALUE = 1;
    /**
     * <code>UNKNOWN_UNMOVABLE = 2;</code>
     */
    public static final int UNKNOWN_UNMOVABLE_VALUE = 2;
    /**
     * <pre>
     * Pedestrian, usually determined by moving behaviour.
     * </pre>
     *
     * <code>PEDESTRIAN = 3;</code>
     */
    public static final int PEDESTRIAN_VALUE = 3;
    /**
     * <pre>
     * bike, motor bike
     * </pre>
     *
     * <code>BICYCLE = 4;</code>
     */
    public static final int BICYCLE_VALUE = 4;
    /**
     * <pre>
     * Passenger car or truck.
     * </pre>
     *
     * <code>VEHICLE = 5;</code>
     */
    public static final int VEHICLE_VALUE = 5;
    /**
     * <pre>
     * Passenger car.
     * </pre>
     *
     * <code>CAR = 6;</code>
     */
    public static final int CAR_VALUE = 6;
    /**
     * <pre>
     * Truck.
     * </pre>
     *
     * <code>TRUCK = 7;</code>
     */
    public static final int TRUCK_VALUE = 7;
    /**
     * <code>BUS = 8;</code>
     */
    public static final int BUS_VALUE = 8;
    /**
     * <code>TRICYCLE = 9;</code>
     */
    public static final int TRICYCLE_VALUE = 9;
    /**
     * <code>BLOCK = 10;</code>
     */
    public static final int BLOCK_VALUE = 10;
    /**
     * <code>CONE_BARREL = 11;</code>
     */
    public static final int CONE_BARREL_VALUE = 11;
    /**
     * <code>ABANDONED_BOX = 12;</code>
     */
    public static final int ABANDONED_BOX_VALUE = 12;
    /**
     * <code>ABANDONED_TYRE = 13;</code>
     */
    public static final int ABANDONED_TYRE_VALUE = 13;
    /**
     * <pre>
     *行人
     * </pre>
     *
     * <code>TYPE_PEDESTRIAN = 21;</code>
     */
    public static final int TYPE_PEDESTRIAN_VALUE = 21;
    /**
     * <pre>
     *目标
     * </pre>
     *
     * <code>TYPE_OBJECT = 22;</code>
     */
    public static final int TYPE_OBJECT_VALUE = 22;
    /**
     * <pre>
     *机动车
     * </pre>
     *
     * <code>TYPE_VEHICLE = 23;</code>
     */
    public static final int TYPE_VEHICLE_VALUE = 23;
    /**
     * <pre>
     *非机动车
     * </pre>
     *
     * <code>TYPE_NONMOTOR = 24;</code>
     */
    public static final int TYPE_NONMOTOR_VALUE = 24;
    /**
     * <pre>
     *物品
     * </pre>
     *
     * <code>TYPE_GOODS = 25;</code>
     */
    public static final int TYPE_GOODS_VALUE = 25;
    /**
     * <pre>
     *场景
     * </pre>
     *
     * <code>TYPE_SCENE = 26;</code>
     */
    public static final int TYPE_SCENE_VALUE = 26;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ObjectType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ObjectType forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return UNKNOWN_MOVABLE;
        case 2: return UNKNOWN_UNMOVABLE;
        case 3: return PEDESTRIAN;
        case 4: return BICYCLE;
        case 5: return VEHICLE;
        case 6: return CAR;
        case 7: return TRUCK;
        case 8: return BUS;
        case 9: return TRICYCLE;
        case 10: return BLOCK;
        case 11: return CONE_BARREL;
        case 12: return ABANDONED_BOX;
        case 13: return ABANDONED_TYRE;
        case 21: return TYPE_PEDESTRIAN;
        case 22: return TYPE_OBJECT;
        case 23: return TYPE_VEHICLE;
        case 24: return TYPE_NONMOTOR;
        case 25: return TYPE_GOODS;
        case 26: return TYPE_SCENE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ObjectType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ObjectType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ObjectType>() {
            public ObjectType findValueByNumber(int number) {
              return ObjectType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.getDescriptor().getEnumTypes().get(1);
    }

    private static final ObjectType[] VALUES = values();

    public static ObjectType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ObjectType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:if_proto_common.ObjectType)
  }

  /**
   * Protobuf enum {@code if_proto_common.SpecialVehicleType}
   */
  public enum SpecialVehicleType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *非特殊车辆
     * </pre>
     *
     * <code>NON_SPECIAL_VEHICLE = 0;</code>
     */
    NON_SPECIAL_VEHICLE(0),
    /**
     * <pre>
     *校车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_SCHOOL_BUS = 1;</code>
     */
    SPECIAL_VEHICLE_SCHOOL_BUS(1),
    /**
     * <pre>
     *泥头车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_DUMP_TRUCK = 2;</code>
     */
    SPECIAL_VEHICLE_DUMP_TRUCK(2),
    /**
     * <pre>
     *高危车辆
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_HIGH_RISK = 3;</code>
     */
    SPECIAL_VEHICLE_HIGH_RISK(3),
    /**
     * <pre>
     *出租车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_TAXI = 4;</code>
     */
    SPECIAL_VEHICLE_TAXI(4),
    /**
     * <pre>
     *油罐车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_OIL_TANKER = 5;</code>
     */
    SPECIAL_VEHICLE_OIL_TANKER(5),
    /**
     * <pre>
     *吊车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_CRANE = 6;</code>
     */
    SPECIAL_VEHICLE_CRANE(6),
    /**
     * <pre>
     *公交车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_BUS = 7;</code>
     */
    SPECIAL_VEHICLE_BUS(7),
    /**
     * <pre>
     *四轮代步车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_FOUR_WHEEL_SCOOTER = 8;</code>
     */
    SPECIAL_VEHICLE_FOUR_WHEEL_SCOOTER(8),
    /**
     * <pre>
     *救护车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_AMBULANCE = 9;</code>
     */
    SPECIAL_VEHICLE_AMBULANCE(9),
    /**
     * <pre>
     *工程救援车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_ENGINEERING_RESCUE_VEHICLE = 10;</code>
     */
    SPECIAL_VEHICLE_ENGINEERING_RESCUE_VEHICLE(10),
    /**
     * <pre>
     *消防车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_FIRE_TRUCK = 11;</code>
     */
    SPECIAL_VEHICLE_FIRE_TRUCK(11),
    ;

    /**
     * <pre>
     *非特殊车辆
     * </pre>
     *
     * <code>NON_SPECIAL_VEHICLE = 0;</code>
     */
    public static final int NON_SPECIAL_VEHICLE_VALUE = 0;
    /**
     * <pre>
     *校车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_SCHOOL_BUS = 1;</code>
     */
    public static final int SPECIAL_VEHICLE_SCHOOL_BUS_VALUE = 1;
    /**
     * <pre>
     *泥头车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_DUMP_TRUCK = 2;</code>
     */
    public static final int SPECIAL_VEHICLE_DUMP_TRUCK_VALUE = 2;
    /**
     * <pre>
     *高危车辆
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_HIGH_RISK = 3;</code>
     */
    public static final int SPECIAL_VEHICLE_HIGH_RISK_VALUE = 3;
    /**
     * <pre>
     *出租车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_TAXI = 4;</code>
     */
    public static final int SPECIAL_VEHICLE_TAXI_VALUE = 4;
    /**
     * <pre>
     *油罐车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_OIL_TANKER = 5;</code>
     */
    public static final int SPECIAL_VEHICLE_OIL_TANKER_VALUE = 5;
    /**
     * <pre>
     *吊车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_CRANE = 6;</code>
     */
    public static final int SPECIAL_VEHICLE_CRANE_VALUE = 6;
    /**
     * <pre>
     *公交车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_BUS = 7;</code>
     */
    public static final int SPECIAL_VEHICLE_BUS_VALUE = 7;
    /**
     * <pre>
     *四轮代步车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_FOUR_WHEEL_SCOOTER = 8;</code>
     */
    public static final int SPECIAL_VEHICLE_FOUR_WHEEL_SCOOTER_VALUE = 8;
    /**
     * <pre>
     *救护车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_AMBULANCE = 9;</code>
     */
    public static final int SPECIAL_VEHICLE_AMBULANCE_VALUE = 9;
    /**
     * <pre>
     *工程救援车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_ENGINEERING_RESCUE_VEHICLE = 10;</code>
     */
    public static final int SPECIAL_VEHICLE_ENGINEERING_RESCUE_VEHICLE_VALUE = 10;
    /**
     * <pre>
     *消防车
     * </pre>
     *
     * <code>SPECIAL_VEHICLE_FIRE_TRUCK = 11;</code>
     */
    public static final int SPECIAL_VEHICLE_FIRE_TRUCK_VALUE = 11;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SpecialVehicleType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SpecialVehicleType forNumber(int value) {
      switch (value) {
        case 0: return NON_SPECIAL_VEHICLE;
        case 1: return SPECIAL_VEHICLE_SCHOOL_BUS;
        case 2: return SPECIAL_VEHICLE_DUMP_TRUCK;
        case 3: return SPECIAL_VEHICLE_HIGH_RISK;
        case 4: return SPECIAL_VEHICLE_TAXI;
        case 5: return SPECIAL_VEHICLE_OIL_TANKER;
        case 6: return SPECIAL_VEHICLE_CRANE;
        case 7: return SPECIAL_VEHICLE_BUS;
        case 8: return SPECIAL_VEHICLE_FOUR_WHEEL_SCOOTER;
        case 9: return SPECIAL_VEHICLE_AMBULANCE;
        case 10: return SPECIAL_VEHICLE_ENGINEERING_RESCUE_VEHICLE;
        case 11: return SPECIAL_VEHICLE_FIRE_TRUCK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SpecialVehicleType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SpecialVehicleType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SpecialVehicleType>() {
            public SpecialVehicleType findValueByNumber(int number) {
              return SpecialVehicleType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.getDescriptor().getEnumTypes().get(2);
    }

    private static final SpecialVehicleType[] VALUES = values();

    public static SpecialVehicleType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SpecialVehicleType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:if_proto_common.SpecialVehicleType)
  }

  /**
   * Protobuf enum {@code if_proto_common.ITS800VehicleClass}
   */
  public enum ITS800VehicleClass
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>ITS_VEHICLE_TYPE_NOT = 0;</code>
     */
    ITS_VEHICLE_TYPE_NOT(0),
    /**
     * <pre>
     * 轿车
     * </pre>
     *
     * <code>ITS_VEHICLE_CAR = 1;</code>
     */
    ITS_VEHICLE_CAR(1),
    /**
     * <pre>
     * 货车
     * </pre>
     *
     * <code>ITS_VEHICLE_TRUCK = 2;</code>
     */
    ITS_VEHICLE_TRUCK(2),
    /**
     * <pre>
     * 面包车
     * </pre>
     *
     * <code>ITS_VEHICLE_VAN = 3;</code>
     */
    ITS_VEHICLE_VAN(3),
    /**
     * <pre>
     * 客车
     * </pre>
     *
     * <code>ITS_VEHICLE_PAS = 4;</code>
     */
    ITS_VEHICLE_PAS(4),
    /**
     * <pre>
     * 小货车
     * </pre>
     *
     * <code>ITS_VEHICLE_BUGGY = 5;</code>
     */
    ITS_VEHICLE_BUGGY(5),
    /**
     * <pre>
     * SUV
     * </pre>
     *
     * <code>ITS_VEHICLE_SUV = 6;</code>
     */
    ITS_VEHICLE_SUV(6),
    /**
     * <pre>
     * 中型客车
     * </pre>
     *
     * <code>ITS_VEHICLE_MEDIUM_BUS = 7;</code>
     */
    ITS_VEHICLE_MEDIUM_BUS(7),
    /**
     * <pre>
     * 校车
     * </pre>
     *
     * <code>ITS_VEHICLE_SCHOOL_BUS = 8;</code>
     */
    ITS_VEHICLE_SCHOOL_BUS(8),
    /**
     * <pre>
     * 泥头车
     * </pre>
     *
     * <code>ITS_VEHICLE_HEAVY_TRUCK = 9;</code>
     */
    ITS_VEHICLE_HEAVY_TRUCK(9),
    /**
     * <pre>
     * 高危车
     * </pre>
     *
     * <code>ITS_VEHICLE_TANKER = 10;</code>
     */
    ITS_VEHICLE_TANKER(10),
    /**
     * <pre>
     * MPV
     * </pre>
     *
     * <code>ITS_VEHICLE_MPV = 11;</code>
     */
    ITS_VEHICLE_MPV(11),
    /**
     * <pre>
     * 皮卡车
     * </pre>
     *
     * <code>ITS_VEHICLE_PICKUP = 13;</code>
     */
    ITS_VEHICLE_PICKUP(13),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>ITS_VEHICLE_TYPE_NOT = 0;</code>
     */
    public static final int ITS_VEHICLE_TYPE_NOT_VALUE = 0;
    /**
     * <pre>
     * 轿车
     * </pre>
     *
     * <code>ITS_VEHICLE_CAR = 1;</code>
     */
    public static final int ITS_VEHICLE_CAR_VALUE = 1;
    /**
     * <pre>
     * 货车
     * </pre>
     *
     * <code>ITS_VEHICLE_TRUCK = 2;</code>
     */
    public static final int ITS_VEHICLE_TRUCK_VALUE = 2;
    /**
     * <pre>
     * 面包车
     * </pre>
     *
     * <code>ITS_VEHICLE_VAN = 3;</code>
     */
    public static final int ITS_VEHICLE_VAN_VALUE = 3;
    /**
     * <pre>
     * 客车
     * </pre>
     *
     * <code>ITS_VEHICLE_PAS = 4;</code>
     */
    public static final int ITS_VEHICLE_PAS_VALUE = 4;
    /**
     * <pre>
     * 小货车
     * </pre>
     *
     * <code>ITS_VEHICLE_BUGGY = 5;</code>
     */
    public static final int ITS_VEHICLE_BUGGY_VALUE = 5;
    /**
     * <pre>
     * SUV
     * </pre>
     *
     * <code>ITS_VEHICLE_SUV = 6;</code>
     */
    public static final int ITS_VEHICLE_SUV_VALUE = 6;
    /**
     * <pre>
     * 中型客车
     * </pre>
     *
     * <code>ITS_VEHICLE_MEDIUM_BUS = 7;</code>
     */
    public static final int ITS_VEHICLE_MEDIUM_BUS_VALUE = 7;
    /**
     * <pre>
     * 校车
     * </pre>
     *
     * <code>ITS_VEHICLE_SCHOOL_BUS = 8;</code>
     */
    public static final int ITS_VEHICLE_SCHOOL_BUS_VALUE = 8;
    /**
     * <pre>
     * 泥头车
     * </pre>
     *
     * <code>ITS_VEHICLE_HEAVY_TRUCK = 9;</code>
     */
    public static final int ITS_VEHICLE_HEAVY_TRUCK_VALUE = 9;
    /**
     * <pre>
     * 高危车
     * </pre>
     *
     * <code>ITS_VEHICLE_TANKER = 10;</code>
     */
    public static final int ITS_VEHICLE_TANKER_VALUE = 10;
    /**
     * <pre>
     * MPV
     * </pre>
     *
     * <code>ITS_VEHICLE_MPV = 11;</code>
     */
    public static final int ITS_VEHICLE_MPV_VALUE = 11;
    /**
     * <pre>
     * 皮卡车
     * </pre>
     *
     * <code>ITS_VEHICLE_PICKUP = 13;</code>
     */
    public static final int ITS_VEHICLE_PICKUP_VALUE = 13;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ITS800VehicleClass valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ITS800VehicleClass forNumber(int value) {
      switch (value) {
        case 0: return ITS_VEHICLE_TYPE_NOT;
        case 1: return ITS_VEHICLE_CAR;
        case 2: return ITS_VEHICLE_TRUCK;
        case 3: return ITS_VEHICLE_VAN;
        case 4: return ITS_VEHICLE_PAS;
        case 5: return ITS_VEHICLE_BUGGY;
        case 6: return ITS_VEHICLE_SUV;
        case 7: return ITS_VEHICLE_MEDIUM_BUS;
        case 8: return ITS_VEHICLE_SCHOOL_BUS;
        case 9: return ITS_VEHICLE_HEAVY_TRUCK;
        case 10: return ITS_VEHICLE_TANKER;
        case 11: return ITS_VEHICLE_MPV;
        case 13: return ITS_VEHICLE_PICKUP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ITS800VehicleClass>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ITS800VehicleClass> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ITS800VehicleClass>() {
            public ITS800VehicleClass findValueByNumber(int number) {
              return ITS800VehicleClass.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.getDescriptor().getEnumTypes().get(3);
    }

    private static final ITS800VehicleClass[] VALUES = values();

    public static ITS800VehicleClass valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ITS800VehicleClass(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:if_proto_common.ITS800VehicleClass)
  }

  /**
   * Protobuf enum {@code if_proto_common.ITS800NonMotorVehicleClass}
   */
  public enum ITS800NonMotorVehicleClass
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 自行车
     * </pre>
     *
     * <code>ITS_NONMOTOR_BICYCLE = 1;</code>
     */
    ITS_NONMOTOR_BICYCLE(1),
    /**
     * <pre>
     * 摩托车
     * </pre>
     *
     * <code>ITS_NONMOTOR_MOTORCYCLE = 2;</code>
     */
    ITS_NONMOTOR_MOTORCYCLE(2),
    /**
     * <pre>
     * 三轮车
     * </pre>
     *
     * <code>ITS_NONMOTOR_TRICYCLE = 3;</code>
     */
    ITS_NONMOTOR_TRICYCLE(3),
    /**
     * <pre>
     * 其他
     * </pre>
     *
     * <code>ITS_NONMOTOR_OTHER = 99;</code>
     */
    ITS_NONMOTOR_OTHER(99),
    ;

    /**
     * <pre>
     * 自行车
     * </pre>
     *
     * <code>ITS_NONMOTOR_BICYCLE = 1;</code>
     */
    public static final int ITS_NONMOTOR_BICYCLE_VALUE = 1;
    /**
     * <pre>
     * 摩托车
     * </pre>
     *
     * <code>ITS_NONMOTOR_MOTORCYCLE = 2;</code>
     */
    public static final int ITS_NONMOTOR_MOTORCYCLE_VALUE = 2;
    /**
     * <pre>
     * 三轮车
     * </pre>
     *
     * <code>ITS_NONMOTOR_TRICYCLE = 3;</code>
     */
    public static final int ITS_NONMOTOR_TRICYCLE_VALUE = 3;
    /**
     * <pre>
     * 其他
     * </pre>
     *
     * <code>ITS_NONMOTOR_OTHER = 99;</code>
     */
    public static final int ITS_NONMOTOR_OTHER_VALUE = 99;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ITS800NonMotorVehicleClass valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ITS800NonMotorVehicleClass forNumber(int value) {
      switch (value) {
        case 1: return ITS_NONMOTOR_BICYCLE;
        case 2: return ITS_NONMOTOR_MOTORCYCLE;
        case 3: return ITS_NONMOTOR_TRICYCLE;
        case 99: return ITS_NONMOTOR_OTHER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ITS800NonMotorVehicleClass>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ITS800NonMotorVehicleClass> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ITS800NonMotorVehicleClass>() {
            public ITS800NonMotorVehicleClass findValueByNumber(int number) {
              return ITS800NonMotorVehicleClass.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.getDescriptor().getEnumTypes().get(4);
    }

    private static final ITS800NonMotorVehicleClass[] VALUES = values();

    public static ITS800NonMotorVehicleClass valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ITS800NonMotorVehicleClass(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:if_proto_common.ITS800NonMotorVehicleClass)
  }

  /**
   * Protobuf enum {@code if_proto_common.ITS800VehicleColor}
   */
  public enum ITS800VehicleColor
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 白色
     * </pre>
     *
     * <code>ITS_WHITE = 0;</code>
     */
    ITS_WHITE(0),
    /**
     * <pre>
     * 灰色
     * </pre>
     *
     * <code>ITS_GRAY = 1;</code>
     */
    ITS_GRAY(1),
    /**
     * <pre>
     * 黄色
     * </pre>
     *
     * <code>ITS_YELLOW = 2;</code>
     */
    ITS_YELLOW(2),
    /**
     * <pre>
     * 粉色
     * </pre>
     *
     * <code>ITS_PINK = 3;</code>
     */
    ITS_PINK(3),
    /**
     * <pre>
     * 红色
     * </pre>
     *
     * <code>ITS_RED = 4;</code>
     */
    ITS_RED(4),
    /**
     * <pre>
     * 绿色
     * </pre>
     *
     * <code>ITS_GREEN = 5;</code>
     */
    ITS_GREEN(5),
    /**
     * <pre>
     * 蓝色
     * </pre>
     *
     * <code>ITS_BLUE = 6;</code>
     */
    ITS_BLUE(6),
    /**
     * <pre>
     * 棕色
     * </pre>
     *
     * <code>ITS_BROWN = 7;</code>
     */
    ITS_BROWN(7),
    /**
     * <pre>
     * 黑色
     * </pre>
     *
     * <code>ITS_BLACK = 8;</code>
     */
    ITS_BLACK(8),
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>ITS_COLOR_NOT = 9;</code>
     */
    ITS_COLOR_NOT(9),
    /**
     * <pre>
     * 紫色
     * </pre>
     *
     * <code>ITS_PURPLE = 10;</code>
     */
    ITS_PURPLE(10),
    /**
     * <pre>
     * 橙色
     * </pre>
     *
     * <code>ITS_ORANGE = 11;</code>
     */
    ITS_ORANGE(11),
    /**
     * <pre>
     * 银色
     * </pre>
     *
     * <code>ITS_SILVER = 12;</code>
     */
    ITS_SILVER(12),
    /**
     * <pre>
     * 青色
     * </pre>
     *
     * <code>ITS_CYAN = 13;</code>
     */
    ITS_CYAN(13),
    /**
     * <pre>
     * 金色
     * </pre>
     *
     * <code>ITS_GLODEN = 14;</code>
     */
    ITS_GLODEN(14),
    /**
     * <pre>
     * 透明
     * </pre>
     *
     * <code>ITS_LUCENCY = 15;</code>
     */
    ITS_LUCENCY(15),
    /**
     * <code>ITS_COLOR_OTHER = 99;</code>
     */
    ITS_COLOR_OTHER(99),
    ;

    /**
     * <pre>
     * 白色
     * </pre>
     *
     * <code>ITS_WHITE = 0;</code>
     */
    public static final int ITS_WHITE_VALUE = 0;
    /**
     * <pre>
     * 灰色
     * </pre>
     *
     * <code>ITS_GRAY = 1;</code>
     */
    public static final int ITS_GRAY_VALUE = 1;
    /**
     * <pre>
     * 黄色
     * </pre>
     *
     * <code>ITS_YELLOW = 2;</code>
     */
    public static final int ITS_YELLOW_VALUE = 2;
    /**
     * <pre>
     * 粉色
     * </pre>
     *
     * <code>ITS_PINK = 3;</code>
     */
    public static final int ITS_PINK_VALUE = 3;
    /**
     * <pre>
     * 红色
     * </pre>
     *
     * <code>ITS_RED = 4;</code>
     */
    public static final int ITS_RED_VALUE = 4;
    /**
     * <pre>
     * 绿色
     * </pre>
     *
     * <code>ITS_GREEN = 5;</code>
     */
    public static final int ITS_GREEN_VALUE = 5;
    /**
     * <pre>
     * 蓝色
     * </pre>
     *
     * <code>ITS_BLUE = 6;</code>
     */
    public static final int ITS_BLUE_VALUE = 6;
    /**
     * <pre>
     * 棕色
     * </pre>
     *
     * <code>ITS_BROWN = 7;</code>
     */
    public static final int ITS_BROWN_VALUE = 7;
    /**
     * <pre>
     * 黑色
     * </pre>
     *
     * <code>ITS_BLACK = 8;</code>
     */
    public static final int ITS_BLACK_VALUE = 8;
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>ITS_COLOR_NOT = 9;</code>
     */
    public static final int ITS_COLOR_NOT_VALUE = 9;
    /**
     * <pre>
     * 紫色
     * </pre>
     *
     * <code>ITS_PURPLE = 10;</code>
     */
    public static final int ITS_PURPLE_VALUE = 10;
    /**
     * <pre>
     * 橙色
     * </pre>
     *
     * <code>ITS_ORANGE = 11;</code>
     */
    public static final int ITS_ORANGE_VALUE = 11;
    /**
     * <pre>
     * 银色
     * </pre>
     *
     * <code>ITS_SILVER = 12;</code>
     */
    public static final int ITS_SILVER_VALUE = 12;
    /**
     * <pre>
     * 青色
     * </pre>
     *
     * <code>ITS_CYAN = 13;</code>
     */
    public static final int ITS_CYAN_VALUE = 13;
    /**
     * <pre>
     * 金色
     * </pre>
     *
     * <code>ITS_GLODEN = 14;</code>
     */
    public static final int ITS_GLODEN_VALUE = 14;
    /**
     * <pre>
     * 透明
     * </pre>
     *
     * <code>ITS_LUCENCY = 15;</code>
     */
    public static final int ITS_LUCENCY_VALUE = 15;
    /**
     * <code>ITS_COLOR_OTHER = 99;</code>
     */
    public static final int ITS_COLOR_OTHER_VALUE = 99;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ITS800VehicleColor valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ITS800VehicleColor forNumber(int value) {
      switch (value) {
        case 0: return ITS_WHITE;
        case 1: return ITS_GRAY;
        case 2: return ITS_YELLOW;
        case 3: return ITS_PINK;
        case 4: return ITS_RED;
        case 5: return ITS_GREEN;
        case 6: return ITS_BLUE;
        case 7: return ITS_BROWN;
        case 8: return ITS_BLACK;
        case 9: return ITS_COLOR_NOT;
        case 10: return ITS_PURPLE;
        case 11: return ITS_ORANGE;
        case 12: return ITS_SILVER;
        case 13: return ITS_CYAN;
        case 14: return ITS_GLODEN;
        case 15: return ITS_LUCENCY;
        case 99: return ITS_COLOR_OTHER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ITS800VehicleColor>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ITS800VehicleColor> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ITS800VehicleColor>() {
            public ITS800VehicleColor findValueByNumber(int number) {
              return ITS800VehicleColor.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.getDescriptor().getEnumTypes().get(5);
    }

    private static final ITS800VehicleColor[] VALUES = values();

    public static ITS800VehicleColor valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ITS800VehicleColor(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:if_proto_common.ITS800VehicleColor)
  }

  /**
   * Protobuf enum {@code if_proto_common.GAT1400VehicleColor}
   */
  public enum GAT1400VehicleColor
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>VEHICLE_BLACK = 1;</code>
     */
    VEHICLE_BLACK(1),
    /**
     * <code>VEHICLE_WHITE = 2;</code>
     */
    VEHICLE_WHITE(2),
    /**
     * <code>VEHICLE_GRAY = 3;</code>
     */
    VEHICLE_GRAY(3),
    /**
     * <code>VEHICLE_RED = 4;</code>
     */
    VEHICLE_RED(4),
    /**
     * <code>VEHICLE_BLUE = 5;</code>
     */
    VEHICLE_BLUE(5),
    /**
     * <code>VEHICLE_YELLOW = 6;</code>
     */
    VEHICLE_YELLOW(6),
    /**
     * <code>VEHICLE_ORANGE = 7;</code>
     */
    VEHICLE_ORANGE(7),
    /**
     * <code>VEHICLE_BROWN = 8;</code>
     */
    VEHICLE_BROWN(8),
    /**
     * <code>VEHICLE_GREEN = 9;</code>
     */
    VEHICLE_GREEN(9),
    /**
     * <code>VEHICLE_PINK = 12;</code>
     */
    VEHICLE_PINK(12),
    /**
     * <code>VEHICLE_PURPLE = 10;</code>
     */
    VEHICLE_PURPLE(10),
    /**
     * <code>VEHICLE_CYAN = 11;</code>
     */
    VEHICLE_CYAN(11),
    /**
     * <code>VEHICLE_LUCENCY = 13;</code>
     */
    VEHICLE_LUCENCY(13),
    /**
     * <code>VEHICLE_SILVER = 61;</code>
     */
    VEHICLE_SILVER(61),
    /**
     * <code>VEHICLE_GLODEN = 62;</code>
     */
    VEHICLE_GLODEN(62),
    /**
     * <pre>
     *未知
     * </pre>
     *
     * <code>VEHICLE_COLOR_NOT = 98;</code>
     */
    VEHICLE_COLOR_NOT(98),
    /**
     * <code>VEHICLE_COLOR_OTHER = 99;</code>
     */
    VEHICLE_COLOR_OTHER(99),
    ;

    /**
     * <code>VEHICLE_BLACK = 1;</code>
     */
    public static final int VEHICLE_BLACK_VALUE = 1;
    /**
     * <code>VEHICLE_WHITE = 2;</code>
     */
    public static final int VEHICLE_WHITE_VALUE = 2;
    /**
     * <code>VEHICLE_GRAY = 3;</code>
     */
    public static final int VEHICLE_GRAY_VALUE = 3;
    /**
     * <code>VEHICLE_RED = 4;</code>
     */
    public static final int VEHICLE_RED_VALUE = 4;
    /**
     * <code>VEHICLE_BLUE = 5;</code>
     */
    public static final int VEHICLE_BLUE_VALUE = 5;
    /**
     * <code>VEHICLE_YELLOW = 6;</code>
     */
    public static final int VEHICLE_YELLOW_VALUE = 6;
    /**
     * <code>VEHICLE_ORANGE = 7;</code>
     */
    public static final int VEHICLE_ORANGE_VALUE = 7;
    /**
     * <code>VEHICLE_BROWN = 8;</code>
     */
    public static final int VEHICLE_BROWN_VALUE = 8;
    /**
     * <code>VEHICLE_GREEN = 9;</code>
     */
    public static final int VEHICLE_GREEN_VALUE = 9;
    /**
     * <code>VEHICLE_PINK = 12;</code>
     */
    public static final int VEHICLE_PINK_VALUE = 12;
    /**
     * <code>VEHICLE_PURPLE = 10;</code>
     */
    public static final int VEHICLE_PURPLE_VALUE = 10;
    /**
     * <code>VEHICLE_CYAN = 11;</code>
     */
    public static final int VEHICLE_CYAN_VALUE = 11;
    /**
     * <code>VEHICLE_LUCENCY = 13;</code>
     */
    public static final int VEHICLE_LUCENCY_VALUE = 13;
    /**
     * <code>VEHICLE_SILVER = 61;</code>
     */
    public static final int VEHICLE_SILVER_VALUE = 61;
    /**
     * <code>VEHICLE_GLODEN = 62;</code>
     */
    public static final int VEHICLE_GLODEN_VALUE = 62;
    /**
     * <pre>
     *未知
     * </pre>
     *
     * <code>VEHICLE_COLOR_NOT = 98;</code>
     */
    public static final int VEHICLE_COLOR_NOT_VALUE = 98;
    /**
     * <code>VEHICLE_COLOR_OTHER = 99;</code>
     */
    public static final int VEHICLE_COLOR_OTHER_VALUE = 99;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GAT1400VehicleColor valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static GAT1400VehicleColor forNumber(int value) {
      switch (value) {
        case 1: return VEHICLE_BLACK;
        case 2: return VEHICLE_WHITE;
        case 3: return VEHICLE_GRAY;
        case 4: return VEHICLE_RED;
        case 5: return VEHICLE_BLUE;
        case 6: return VEHICLE_YELLOW;
        case 7: return VEHICLE_ORANGE;
        case 8: return VEHICLE_BROWN;
        case 9: return VEHICLE_GREEN;
        case 12: return VEHICLE_PINK;
        case 10: return VEHICLE_PURPLE;
        case 11: return VEHICLE_CYAN;
        case 13: return VEHICLE_LUCENCY;
        case 61: return VEHICLE_SILVER;
        case 62: return VEHICLE_GLODEN;
        case 98: return VEHICLE_COLOR_NOT;
        case 99: return VEHICLE_COLOR_OTHER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GAT1400VehicleColor>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GAT1400VehicleColor> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GAT1400VehicleColor>() {
            public GAT1400VehicleColor findValueByNumber(int number) {
              return GAT1400VehicleColor.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.getDescriptor().getEnumTypes().get(6);
    }

    private static final GAT1400VehicleColor[] VALUES = values();

    public static GAT1400VehicleColor valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GAT1400VehicleColor(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:if_proto_common.GAT1400VehicleColor)
  }

  /**
   * Protobuf enum {@code if_proto_common.ITS800PlateColor}
   */
  public enum ITS800PlateColor
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_UNKNOWN = 0;</code>
     */
    ITS_PLATE_COLOR_UNKNOWN(0),
    /**
     * <pre>
     * 蓝底白字
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_BLUE = 1;</code>
     */
    ITS_PLATE_COLOR_BLUE(1),
    /**
     * <pre>
     * 黄底黑字
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_YELLOW = 2;</code>
     */
    ITS_PLATE_COLOR_YELLOW(2),
    /**
     * <pre>
     * 白底黑字
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_WHITH = 3;</code>
     */
    ITS_PLATE_COLOR_WHITH(3),
    /**
     * <pre>
     * 黑底白字
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_BLACK = 4;</code>
     */
    ITS_PLATE_COLOR_BLACK(4),
    /**
     * <pre>
     * 绿底白字 | 绿底黑字
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_GREEN = 5;</code>
     */
    ITS_PLATE_COLOR_GREEN(5),
    /**
     * <pre>
     * 渐变绿底黑字
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_GRADIENT_GREEN = 6;</code>
     */
    ITS_PLATE_COLOR_GRADIENT_GREEN(6),
    /**
     * <pre>
     * 黄绿双拼底黑字
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_YELLOW_GREEN = 7;</code>
     */
    ITS_PLATE_COLOR_YELLOW_GREEN(7),
    /**
     * <pre>
     * 红色
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_RED = 8;</code>
     */
    ITS_PLATE_COLOR_RED(8),
    /**
     * <pre>
     * 灰色
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_GRAY = 9;</code>
     */
    ITS_PLATE_COLOR_GRAY(9),
    /**
     * <pre>
     * 橘色
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_ORANGE = 14;</code>
     */
    ITS_PLATE_COLOR_ORANGE(14),
    /**
     * <pre>
     * 紫色
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_PURPLE = 15;</code>
     */
    ITS_PLATE_COLOR_PURPLE(15),
    /**
     * <pre>
     * 棕色
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_BROWN = 16;</code>
     */
    ITS_PLATE_COLOR_BROWN(16),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_UNKNOWN = 0;</code>
     */
    public static final int ITS_PLATE_COLOR_UNKNOWN_VALUE = 0;
    /**
     * <pre>
     * 蓝底白字
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_BLUE = 1;</code>
     */
    public static final int ITS_PLATE_COLOR_BLUE_VALUE = 1;
    /**
     * <pre>
     * 黄底黑字
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_YELLOW = 2;</code>
     */
    public static final int ITS_PLATE_COLOR_YELLOW_VALUE = 2;
    /**
     * <pre>
     * 白底黑字
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_WHITH = 3;</code>
     */
    public static final int ITS_PLATE_COLOR_WHITH_VALUE = 3;
    /**
     * <pre>
     * 黑底白字
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_BLACK = 4;</code>
     */
    public static final int ITS_PLATE_COLOR_BLACK_VALUE = 4;
    /**
     * <pre>
     * 绿底白字 | 绿底黑字
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_GREEN = 5;</code>
     */
    public static final int ITS_PLATE_COLOR_GREEN_VALUE = 5;
    /**
     * <pre>
     * 渐变绿底黑字
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_GRADIENT_GREEN = 6;</code>
     */
    public static final int ITS_PLATE_COLOR_GRADIENT_GREEN_VALUE = 6;
    /**
     * <pre>
     * 黄绿双拼底黑字
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_YELLOW_GREEN = 7;</code>
     */
    public static final int ITS_PLATE_COLOR_YELLOW_GREEN_VALUE = 7;
    /**
     * <pre>
     * 红色
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_RED = 8;</code>
     */
    public static final int ITS_PLATE_COLOR_RED_VALUE = 8;
    /**
     * <pre>
     * 灰色
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_GRAY = 9;</code>
     */
    public static final int ITS_PLATE_COLOR_GRAY_VALUE = 9;
    /**
     * <pre>
     * 橘色
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_ORANGE = 14;</code>
     */
    public static final int ITS_PLATE_COLOR_ORANGE_VALUE = 14;
    /**
     * <pre>
     * 紫色
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_PURPLE = 15;</code>
     */
    public static final int ITS_PLATE_COLOR_PURPLE_VALUE = 15;
    /**
     * <pre>
     * 棕色
     * </pre>
     *
     * <code>ITS_PLATE_COLOR_BROWN = 16;</code>
     */
    public static final int ITS_PLATE_COLOR_BROWN_VALUE = 16;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ITS800PlateColor valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ITS800PlateColor forNumber(int value) {
      switch (value) {
        case 0: return ITS_PLATE_COLOR_UNKNOWN;
        case 1: return ITS_PLATE_COLOR_BLUE;
        case 2: return ITS_PLATE_COLOR_YELLOW;
        case 3: return ITS_PLATE_COLOR_WHITH;
        case 4: return ITS_PLATE_COLOR_BLACK;
        case 5: return ITS_PLATE_COLOR_GREEN;
        case 6: return ITS_PLATE_COLOR_GRADIENT_GREEN;
        case 7: return ITS_PLATE_COLOR_YELLOW_GREEN;
        case 8: return ITS_PLATE_COLOR_RED;
        case 9: return ITS_PLATE_COLOR_GRAY;
        case 14: return ITS_PLATE_COLOR_ORANGE;
        case 15: return ITS_PLATE_COLOR_PURPLE;
        case 16: return ITS_PLATE_COLOR_BROWN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ITS800PlateColor>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ITS800PlateColor> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ITS800PlateColor>() {
            public ITS800PlateColor findValueByNumber(int number) {
              return ITS800PlateColor.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.getDescriptor().getEnumTypes().get(7);
    }

    private static final ITS800PlateColor[] VALUES = values();

    public static ITS800PlateColor valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ITS800PlateColor(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:if_proto_common.ITS800PlateColor)
  }

  /**
   * Protobuf enum {@code if_proto_common.GAT1400PlateColor}
   */
  public enum GAT1400PlateColor
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *灰色
     * </pre>
     *
     * <code>PLATE_COLOR_GRAY = 3;</code>
     */
    PLATE_COLOR_GRAY(3),
    /**
     * <pre>
     *红色
     * </pre>
     *
     * <code>PLATE_COLOR_RED = 4;</code>
     */
    PLATE_COLOR_RED(4),
    /**
     * <pre>
     *橙色
     * </pre>
     *
     * <code>PLATE_COLOR_ORANGE = 7;</code>
     */
    PLATE_COLOR_ORANGE(7),
    /**
     * <pre>
     *棕色
     * </pre>
     *
     * <code>PLATE_COLOR_BROWN = 8;</code>
     */
    PLATE_COLOR_BROWN(8),
    /**
     * <pre>
     *紫色
     * </pre>
     *
     * <code>PLATE_COLOR_PURPLE = 10;</code>
     */
    PLATE_COLOR_PURPLE(10),
    /**
     * <pre>
     *蓝底白字
     * </pre>
     *
     * <code>PLATE_COLOR_BLUE = 61;</code>
     */
    PLATE_COLOR_BLUE(61),
    /**
     * <pre>
     *黄底黑字
     * </pre>
     *
     * <code>PLATE_COLOR_YELLOW = 62;</code>
     */
    PLATE_COLOR_YELLOW(62),
    /**
     * <pre>
     *白底黑字
     * </pre>
     *
     * <code>PLATE_COLOR_WHITH = 63;</code>
     */
    PLATE_COLOR_WHITH(63),
    /**
     * <pre>
     *黑底白字
     * </pre>
     *
     * <code>PLATE_COLOR_BLACK = 64;</code>
     */
    PLATE_COLOR_BLACK(64),
    /**
     * <pre>
     *绿底白字 | 绿底黑字
     * </pre>
     *
     * <code>PLATE_COLOR_GREEN = 65;</code>
     */
    PLATE_COLOR_GREEN(65),
    /**
     * <pre>
     *渐变绿底黑字
     * </pre>
     *
     * <code>PLATE_COLOR_GRADIENT_GREEN = 66;</code>
     */
    PLATE_COLOR_GRADIENT_GREEN(66),
    /**
     * <pre>
     *黄绿双拼底黑字
     * </pre>
     *
     * <code>PLATE_COLOR_YELLOW_GREEN = 67;</code>
     */
    PLATE_COLOR_YELLOW_GREEN(67),
    /**
     * <pre>
     *未知
     * </pre>
     *
     * <code>PLATE_COLOR_UNKNOWN = 98;</code>
     */
    PLATE_COLOR_UNKNOWN(98),
    /**
     * <pre>
     *其他
     * </pre>
     *
     * <code>PLATE_COLOR_OTHER = 99;</code>
     */
    PLATE_COLOR_OTHER(99),
    ;

    /**
     * <pre>
     *灰色
     * </pre>
     *
     * <code>PLATE_COLOR_GRAY = 3;</code>
     */
    public static final int PLATE_COLOR_GRAY_VALUE = 3;
    /**
     * <pre>
     *红色
     * </pre>
     *
     * <code>PLATE_COLOR_RED = 4;</code>
     */
    public static final int PLATE_COLOR_RED_VALUE = 4;
    /**
     * <pre>
     *橙色
     * </pre>
     *
     * <code>PLATE_COLOR_ORANGE = 7;</code>
     */
    public static final int PLATE_COLOR_ORANGE_VALUE = 7;
    /**
     * <pre>
     *棕色
     * </pre>
     *
     * <code>PLATE_COLOR_BROWN = 8;</code>
     */
    public static final int PLATE_COLOR_BROWN_VALUE = 8;
    /**
     * <pre>
     *紫色
     * </pre>
     *
     * <code>PLATE_COLOR_PURPLE = 10;</code>
     */
    public static final int PLATE_COLOR_PURPLE_VALUE = 10;
    /**
     * <pre>
     *蓝底白字
     * </pre>
     *
     * <code>PLATE_COLOR_BLUE = 61;</code>
     */
    public static final int PLATE_COLOR_BLUE_VALUE = 61;
    /**
     * <pre>
     *黄底黑字
     * </pre>
     *
     * <code>PLATE_COLOR_YELLOW = 62;</code>
     */
    public static final int PLATE_COLOR_YELLOW_VALUE = 62;
    /**
     * <pre>
     *白底黑字
     * </pre>
     *
     * <code>PLATE_COLOR_WHITH = 63;</code>
     */
    public static final int PLATE_COLOR_WHITH_VALUE = 63;
    /**
     * <pre>
     *黑底白字
     * </pre>
     *
     * <code>PLATE_COLOR_BLACK = 64;</code>
     */
    public static final int PLATE_COLOR_BLACK_VALUE = 64;
    /**
     * <pre>
     *绿底白字 | 绿底黑字
     * </pre>
     *
     * <code>PLATE_COLOR_GREEN = 65;</code>
     */
    public static final int PLATE_COLOR_GREEN_VALUE = 65;
    /**
     * <pre>
     *渐变绿底黑字
     * </pre>
     *
     * <code>PLATE_COLOR_GRADIENT_GREEN = 66;</code>
     */
    public static final int PLATE_COLOR_GRADIENT_GREEN_VALUE = 66;
    /**
     * <pre>
     *黄绿双拼底黑字
     * </pre>
     *
     * <code>PLATE_COLOR_YELLOW_GREEN = 67;</code>
     */
    public static final int PLATE_COLOR_YELLOW_GREEN_VALUE = 67;
    /**
     * <pre>
     *未知
     * </pre>
     *
     * <code>PLATE_COLOR_UNKNOWN = 98;</code>
     */
    public static final int PLATE_COLOR_UNKNOWN_VALUE = 98;
    /**
     * <pre>
     *其他
     * </pre>
     *
     * <code>PLATE_COLOR_OTHER = 99;</code>
     */
    public static final int PLATE_COLOR_OTHER_VALUE = 99;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GAT1400PlateColor valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static GAT1400PlateColor forNumber(int value) {
      switch (value) {
        case 3: return PLATE_COLOR_GRAY;
        case 4: return PLATE_COLOR_RED;
        case 7: return PLATE_COLOR_ORANGE;
        case 8: return PLATE_COLOR_BROWN;
        case 10: return PLATE_COLOR_PURPLE;
        case 61: return PLATE_COLOR_BLUE;
        case 62: return PLATE_COLOR_YELLOW;
        case 63: return PLATE_COLOR_WHITH;
        case 64: return PLATE_COLOR_BLACK;
        case 65: return PLATE_COLOR_GREEN;
        case 66: return PLATE_COLOR_GRADIENT_GREEN;
        case 67: return PLATE_COLOR_YELLOW_GREEN;
        case 98: return PLATE_COLOR_UNKNOWN;
        case 99: return PLATE_COLOR_OTHER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GAT1400PlateColor>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GAT1400PlateColor> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GAT1400PlateColor>() {
            public GAT1400PlateColor findValueByNumber(int number) {
              return GAT1400PlateColor.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.getDescriptor().getEnumTypes().get(8);
    }

    private static final GAT1400PlateColor[] VALUES = values();

    public static GAT1400PlateColor valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GAT1400PlateColor(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:if_proto_common.GAT1400PlateColor)
  }

  /**
   * Protobuf enum {@code if_proto_common.ITS800PlateClass}
   */
  public enum ITS800PlateClass
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知类型
     * </pre>
     *
     * <code>ITS_PLATE_UNKNOWN = 0;</code>
     */
    ITS_PLATE_UNKNOWN(0),
    /**
     * <pre>
     * 单层蓝牌
     * </pre>
     *
     * <code>ITS_PLATE_ONE_BLUE = 1;</code>
     */
    ITS_PLATE_ONE_BLUE(1),
    /**
     * <pre>
     * 单层黑牌
     * </pre>
     *
     * <code>ITS_PLATE_ONE_BLACK = 2;</code>
     */
    ITS_PLATE_ONE_BLACK(2),
    /**
     * <pre>
     * 单层黄牌
     * </pre>
     *
     * <code>ITS_PLATE_ONE_YELLOW = 3;</code>
     */
    ITS_PLATE_ONE_YELLOW(3),
    /**
     * <pre>
     * 双层黄牌
     * </pre>
     *
     * <code>ITS_PLATE_DOUBLE_YELLOW = 4;</code>
     */
    ITS_PLATE_DOUBLE_YELLOW(4),
    /**
     * <pre>
     * 白色警牌
     * </pre>
     *
     * <code>ITS_PLATE_WHITE_POLICE = 5;</code>
     */
    ITS_PLATE_WHITE_POLICE(5),
    /**
     * <pre>
     * 白色*警
     * </pre>
     *
     * <code>ITS_PLATE_WHITE_WJ = 6;</code>
     */
    ITS_PLATE_WHITE_WJ(6),
    /**
     * <pre>
     * 个性化车牌
     * </pre>
     *
     * <code>ITS_PLATE_INDIVI = 7;</code>
     */
    ITS_PLATE_INDIVI(7),
    /**
     * <pre>
     * 单层军牌
     * </pre>
     *
     * <code>ITS_PLATE_ONE_ARMY = 8;</code>
     */
    ITS_PLATE_ONE_ARMY(8),
    /**
     * <pre>
     * 双层军牌
     * </pre>
     *
     * <code>ITS_PLATE_DOUBLE_ARMY = 9;</code>
     */
    ITS_PLATE_DOUBLE_ARMY(9),
    /**
     * <pre>
     * 领使馆牌
     * </pre>
     *
     * <code>ITS_PLATE_EMBASSY = 10;</code>
     */
    ITS_PLATE_EMBASSY(10),
    /**
     * <pre>
     * 粤港牌，黑底车牌
     * </pre>
     *
     * <code>ITS_PLATE_HK = 11;</code>
     */
    ITS_PLATE_HK(11),
    /**
     * <pre>
     * 农用车牌、拖拉机
     * </pre>
     *
     * <code>ITS_PLATE_AGRICULTURE = 12;</code>
     */
    ITS_PLATE_AGRICULTURE(12),
    /**
     * <pre>
     * 澳门牌
     * </pre>
     *
     * <code>ITS_PLATE_MACAU = 13;</code>
     */
    ITS_PLATE_MACAU(13),
    /**
     * <pre>
     * 厂内牌
     * </pre>
     *
     * <code>ITS_PLATE_CHANGNEI = 14;</code>
     */
    ITS_PLATE_CHANGNEI(14),
    /**
     * <pre>
     * 双层白色*警
     * </pre>
     *
     * <code>ITS_PLATE_DOUBLE_WHITE_WJ = 15;</code>
     */
    ITS_PLATE_DOUBLE_WHITE_WJ(15),
    /**
     * <pre>
     * 其他类型
     * </pre>
     *
     * <code>ITS_PLATE_OTHER = 16;</code>
     */
    ITS_PLATE_OTHER(16),
    /**
     * <pre>
     * 新能源牌
     * </pre>
     *
     * <code>ITS_PLATE_NEW_ENERGY = 17;</code>
     */
    ITS_PLATE_NEW_ENERGY(17),
    /**
     * <pre>
     * 教练汽车车牌
     * </pre>
     *
     * <code>ITS_PLATE_TEACH = 18;</code>
     */
    ITS_PLATE_TEACH(18),
    /**
     * <pre>
     * 挂车车牌
     * </pre>
     *
     * <code>ITS_PLATE_TRAILER = 19;</code>
     */
    ITS_PLATE_TRAILER(19),
    /**
     * <pre>
     * 民航车牌
     * </pre>
     *
     * <code>ITS_PLATE_PLANE = 20;</code>
     */
    ITS_PLATE_PLANE(20),
    /**
     * <pre>
     * 香港当地港牌
     * </pre>
     *
     * <code>ITS_PLATE_HK2 = 120;</code>
     */
    ITS_PLATE_HK2(120),
    ;

    /**
     * <pre>
     * 未知类型
     * </pre>
     *
     * <code>ITS_PLATE_UNKNOWN = 0;</code>
     */
    public static final int ITS_PLATE_UNKNOWN_VALUE = 0;
    /**
     * <pre>
     * 单层蓝牌
     * </pre>
     *
     * <code>ITS_PLATE_ONE_BLUE = 1;</code>
     */
    public static final int ITS_PLATE_ONE_BLUE_VALUE = 1;
    /**
     * <pre>
     * 单层黑牌
     * </pre>
     *
     * <code>ITS_PLATE_ONE_BLACK = 2;</code>
     */
    public static final int ITS_PLATE_ONE_BLACK_VALUE = 2;
    /**
     * <pre>
     * 单层黄牌
     * </pre>
     *
     * <code>ITS_PLATE_ONE_YELLOW = 3;</code>
     */
    public static final int ITS_PLATE_ONE_YELLOW_VALUE = 3;
    /**
     * <pre>
     * 双层黄牌
     * </pre>
     *
     * <code>ITS_PLATE_DOUBLE_YELLOW = 4;</code>
     */
    public static final int ITS_PLATE_DOUBLE_YELLOW_VALUE = 4;
    /**
     * <pre>
     * 白色警牌
     * </pre>
     *
     * <code>ITS_PLATE_WHITE_POLICE = 5;</code>
     */
    public static final int ITS_PLATE_WHITE_POLICE_VALUE = 5;
    /**
     * <pre>
     * 白色*警
     * </pre>
     *
     * <code>ITS_PLATE_WHITE_WJ = 6;</code>
     */
    public static final int ITS_PLATE_WHITE_WJ_VALUE = 6;
    /**
     * <pre>
     * 个性化车牌
     * </pre>
     *
     * <code>ITS_PLATE_INDIVI = 7;</code>
     */
    public static final int ITS_PLATE_INDIVI_VALUE = 7;
    /**
     * <pre>
     * 单层军牌
     * </pre>
     *
     * <code>ITS_PLATE_ONE_ARMY = 8;</code>
     */
    public static final int ITS_PLATE_ONE_ARMY_VALUE = 8;
    /**
     * <pre>
     * 双层军牌
     * </pre>
     *
     * <code>ITS_PLATE_DOUBLE_ARMY = 9;</code>
     */
    public static final int ITS_PLATE_DOUBLE_ARMY_VALUE = 9;
    /**
     * <pre>
     * 领使馆牌
     * </pre>
     *
     * <code>ITS_PLATE_EMBASSY = 10;</code>
     */
    public static final int ITS_PLATE_EMBASSY_VALUE = 10;
    /**
     * <pre>
     * 粤港牌，黑底车牌
     * </pre>
     *
     * <code>ITS_PLATE_HK = 11;</code>
     */
    public static final int ITS_PLATE_HK_VALUE = 11;
    /**
     * <pre>
     * 农用车牌、拖拉机
     * </pre>
     *
     * <code>ITS_PLATE_AGRICULTURE = 12;</code>
     */
    public static final int ITS_PLATE_AGRICULTURE_VALUE = 12;
    /**
     * <pre>
     * 澳门牌
     * </pre>
     *
     * <code>ITS_PLATE_MACAU = 13;</code>
     */
    public static final int ITS_PLATE_MACAU_VALUE = 13;
    /**
     * <pre>
     * 厂内牌
     * </pre>
     *
     * <code>ITS_PLATE_CHANGNEI = 14;</code>
     */
    public static final int ITS_PLATE_CHANGNEI_VALUE = 14;
    /**
     * <pre>
     * 双层白色*警
     * </pre>
     *
     * <code>ITS_PLATE_DOUBLE_WHITE_WJ = 15;</code>
     */
    public static final int ITS_PLATE_DOUBLE_WHITE_WJ_VALUE = 15;
    /**
     * <pre>
     * 其他类型
     * </pre>
     *
     * <code>ITS_PLATE_OTHER = 16;</code>
     */
    public static final int ITS_PLATE_OTHER_VALUE = 16;
    /**
     * <pre>
     * 新能源牌
     * </pre>
     *
     * <code>ITS_PLATE_NEW_ENERGY = 17;</code>
     */
    public static final int ITS_PLATE_NEW_ENERGY_VALUE = 17;
    /**
     * <pre>
     * 教练汽车车牌
     * </pre>
     *
     * <code>ITS_PLATE_TEACH = 18;</code>
     */
    public static final int ITS_PLATE_TEACH_VALUE = 18;
    /**
     * <pre>
     * 挂车车牌
     * </pre>
     *
     * <code>ITS_PLATE_TRAILER = 19;</code>
     */
    public static final int ITS_PLATE_TRAILER_VALUE = 19;
    /**
     * <pre>
     * 民航车牌
     * </pre>
     *
     * <code>ITS_PLATE_PLANE = 20;</code>
     */
    public static final int ITS_PLATE_PLANE_VALUE = 20;
    /**
     * <pre>
     * 香港当地港牌
     * </pre>
     *
     * <code>ITS_PLATE_HK2 = 120;</code>
     */
    public static final int ITS_PLATE_HK2_VALUE = 120;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ITS800PlateClass valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ITS800PlateClass forNumber(int value) {
      switch (value) {
        case 0: return ITS_PLATE_UNKNOWN;
        case 1: return ITS_PLATE_ONE_BLUE;
        case 2: return ITS_PLATE_ONE_BLACK;
        case 3: return ITS_PLATE_ONE_YELLOW;
        case 4: return ITS_PLATE_DOUBLE_YELLOW;
        case 5: return ITS_PLATE_WHITE_POLICE;
        case 6: return ITS_PLATE_WHITE_WJ;
        case 7: return ITS_PLATE_INDIVI;
        case 8: return ITS_PLATE_ONE_ARMY;
        case 9: return ITS_PLATE_DOUBLE_ARMY;
        case 10: return ITS_PLATE_EMBASSY;
        case 11: return ITS_PLATE_HK;
        case 12: return ITS_PLATE_AGRICULTURE;
        case 13: return ITS_PLATE_MACAU;
        case 14: return ITS_PLATE_CHANGNEI;
        case 15: return ITS_PLATE_DOUBLE_WHITE_WJ;
        case 16: return ITS_PLATE_OTHER;
        case 17: return ITS_PLATE_NEW_ENERGY;
        case 18: return ITS_PLATE_TEACH;
        case 19: return ITS_PLATE_TRAILER;
        case 20: return ITS_PLATE_PLANE;
        case 120: return ITS_PLATE_HK2;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ITS800PlateClass>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ITS800PlateClass> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ITS800PlateClass>() {
            public ITS800PlateClass findValueByNumber(int number) {
              return ITS800PlateClass.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.getDescriptor().getEnumTypes().get(9);
    }

    private static final ITS800PlateClass[] VALUES = values();

    public static ITS800PlateClass valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ITS800PlateClass(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:if_proto_common.ITS800PlateClass)
  }

  /**
   * Protobuf enum {@code if_proto_common.GAT1400PlateClass}
   */
  public enum GAT1400PlateClass
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *大型汽车号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_YELLOW = 1;</code>
     */
    VEHICLE_PLATE_YELLOW(1),
    /**
     * <pre>
     *领馆汽车号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_EMBASSY = 4;</code>
     */
    VEHICLE_PLATE_EMBASSY(4),
    /**
     * <pre>
     *拖拉机号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_AGRICULTURE = 14;</code>
     */
    VEHICLE_PLATE_AGRICULTURE(14),
    /**
     * <pre>
     *挂车号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_TRAILER = 15;</code>
     */
    VEHICLE_PLATE_TRAILER(15),
    /**
     * <pre>
     *教练汽车号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_TEACH = 16;</code>
     */
    VEHICLE_PLATE_TEACH(16),
    /**
     * <pre>
     *警用汽车号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_WHITE_POLICE = 23;</code>
     */
    VEHICLE_PLATE_WHITE_POLICE(23),
    /**
     * <pre>
     *香港入出境号牌/港牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_HK = 26;</code>
     */
    VEHICLE_PLATE_HK(26),
    /**
     * <pre>
     *澳门入出境号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_MACAU = 27;</code>
     */
    VEHICLE_PLATE_MACAU(27),
    /**
     * <pre>
     *武警号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_WHITE_WJ = 31;</code>
     */
    VEHICLE_PLATE_WHITE_WJ(31),
    /**
     * <pre>
     *军队号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_DOUBLE_ARMY = 32;</code>
     */
    VEHICLE_PLATE_DOUBLE_ARMY(32),
    /**
     * <pre>
     *新能源牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_NEW_ENERGY = 40;</code>
     */
    VEHICLE_PLATE_NEW_ENERGY(40),
    /**
     * <pre>
     *单层蓝牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_ONE_BLUE = 61;</code>
     */
    VEHICLE_PLATE_ONE_BLUE(61),
    /**
     * <pre>
     *单层黑牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_ONE_BLACK = 62;</code>
     */
    VEHICLE_PLATE_ONE_BLACK(62),
    /**
     * <pre>
     *个性化车牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_INDIVI = 63;</code>
     */
    VEHICLE_PLATE_INDIVI(63),
    /**
     * <pre>
     *厂内牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_CHANGNEI = 64;</code>
     */
    VEHICLE_PLATE_CHANGNEI(64),
    /**
     * <pre>
     *民航车牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_PLANE = 65;</code>
     */
    VEHICLE_PLATE_PLANE(65),
    /**
     * <pre>
     *未知
     * </pre>
     *
     * <code>VEHICLE_PLATE_UNKNOWN = 98;</code>
     */
    VEHICLE_PLATE_UNKNOWN(98),
    /**
     * <pre>
     *其他号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_OTHER = 99;</code>
     */
    VEHICLE_PLATE_OTHER(99),
    ;

    /**
     * <pre>
     *大型汽车号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_YELLOW = 1;</code>
     */
    public static final int VEHICLE_PLATE_YELLOW_VALUE = 1;
    /**
     * <pre>
     *领馆汽车号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_EMBASSY = 4;</code>
     */
    public static final int VEHICLE_PLATE_EMBASSY_VALUE = 4;
    /**
     * <pre>
     *拖拉机号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_AGRICULTURE = 14;</code>
     */
    public static final int VEHICLE_PLATE_AGRICULTURE_VALUE = 14;
    /**
     * <pre>
     *挂车号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_TRAILER = 15;</code>
     */
    public static final int VEHICLE_PLATE_TRAILER_VALUE = 15;
    /**
     * <pre>
     *教练汽车号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_TEACH = 16;</code>
     */
    public static final int VEHICLE_PLATE_TEACH_VALUE = 16;
    /**
     * <pre>
     *警用汽车号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_WHITE_POLICE = 23;</code>
     */
    public static final int VEHICLE_PLATE_WHITE_POLICE_VALUE = 23;
    /**
     * <pre>
     *香港入出境号牌/港牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_HK = 26;</code>
     */
    public static final int VEHICLE_PLATE_HK_VALUE = 26;
    /**
     * <pre>
     *澳门入出境号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_MACAU = 27;</code>
     */
    public static final int VEHICLE_PLATE_MACAU_VALUE = 27;
    /**
     * <pre>
     *武警号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_WHITE_WJ = 31;</code>
     */
    public static final int VEHICLE_PLATE_WHITE_WJ_VALUE = 31;
    /**
     * <pre>
     *军队号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_DOUBLE_ARMY = 32;</code>
     */
    public static final int VEHICLE_PLATE_DOUBLE_ARMY_VALUE = 32;
    /**
     * <pre>
     *新能源牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_NEW_ENERGY = 40;</code>
     */
    public static final int VEHICLE_PLATE_NEW_ENERGY_VALUE = 40;
    /**
     * <pre>
     *单层蓝牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_ONE_BLUE = 61;</code>
     */
    public static final int VEHICLE_PLATE_ONE_BLUE_VALUE = 61;
    /**
     * <pre>
     *单层黑牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_ONE_BLACK = 62;</code>
     */
    public static final int VEHICLE_PLATE_ONE_BLACK_VALUE = 62;
    /**
     * <pre>
     *个性化车牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_INDIVI = 63;</code>
     */
    public static final int VEHICLE_PLATE_INDIVI_VALUE = 63;
    /**
     * <pre>
     *厂内牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_CHANGNEI = 64;</code>
     */
    public static final int VEHICLE_PLATE_CHANGNEI_VALUE = 64;
    /**
     * <pre>
     *民航车牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_PLANE = 65;</code>
     */
    public static final int VEHICLE_PLATE_PLANE_VALUE = 65;
    /**
     * <pre>
     *未知
     * </pre>
     *
     * <code>VEHICLE_PLATE_UNKNOWN = 98;</code>
     */
    public static final int VEHICLE_PLATE_UNKNOWN_VALUE = 98;
    /**
     * <pre>
     *其他号牌
     * </pre>
     *
     * <code>VEHICLE_PLATE_OTHER = 99;</code>
     */
    public static final int VEHICLE_PLATE_OTHER_VALUE = 99;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GAT1400PlateClass valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static GAT1400PlateClass forNumber(int value) {
      switch (value) {
        case 1: return VEHICLE_PLATE_YELLOW;
        case 4: return VEHICLE_PLATE_EMBASSY;
        case 14: return VEHICLE_PLATE_AGRICULTURE;
        case 15: return VEHICLE_PLATE_TRAILER;
        case 16: return VEHICLE_PLATE_TEACH;
        case 23: return VEHICLE_PLATE_WHITE_POLICE;
        case 26: return VEHICLE_PLATE_HK;
        case 27: return VEHICLE_PLATE_MACAU;
        case 31: return VEHICLE_PLATE_WHITE_WJ;
        case 32: return VEHICLE_PLATE_DOUBLE_ARMY;
        case 40: return VEHICLE_PLATE_NEW_ENERGY;
        case 61: return VEHICLE_PLATE_ONE_BLUE;
        case 62: return VEHICLE_PLATE_ONE_BLACK;
        case 63: return VEHICLE_PLATE_INDIVI;
        case 64: return VEHICLE_PLATE_CHANGNEI;
        case 65: return VEHICLE_PLATE_PLANE;
        case 98: return VEHICLE_PLATE_UNKNOWN;
        case 99: return VEHICLE_PLATE_OTHER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GAT1400PlateClass>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GAT1400PlateClass> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GAT1400PlateClass>() {
            public GAT1400PlateClass findValueByNumber(int number) {
              return GAT1400PlateClass.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.getDescriptor().getEnumTypes().get(10);
    }

    private static final GAT1400PlateClass[] VALUES = values();

    public static GAT1400PlateClass valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GAT1400PlateClass(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:if_proto_common.GAT1400PlateClass)
  }

  /**
   * Protobuf enum {@code if_proto_common.ROAD_SURFACE_TYPE_E}
   */
  public enum ROAD_SURFACE_TYPE_E
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NORMAL = 0;</code>
     */
    NORMAL(0),
    /**
     * <code>WET = 1;</code>
     */
    WET(1),
    /**
     * <code>ICE = 2;</code>
     */
    ICE(2),
    /**
     * <code>FOG = 3;</code>
     */
    FOG(3),
    ;

    /**
     * <code>NORMAL = 0;</code>
     */
    public static final int NORMAL_VALUE = 0;
    /**
     * <code>WET = 1;</code>
     */
    public static final int WET_VALUE = 1;
    /**
     * <code>ICE = 2;</code>
     */
    public static final int ICE_VALUE = 2;
    /**
     * <code>FOG = 3;</code>
     */
    public static final int FOG_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ROAD_SURFACE_TYPE_E valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ROAD_SURFACE_TYPE_E forNumber(int value) {
      switch (value) {
        case 0: return NORMAL;
        case 1: return WET;
        case 2: return ICE;
        case 3: return FOG;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ROAD_SURFACE_TYPE_E>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ROAD_SURFACE_TYPE_E> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ROAD_SURFACE_TYPE_E>() {
            public ROAD_SURFACE_TYPE_E findValueByNumber(int number) {
              return ROAD_SURFACE_TYPE_E.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.getDescriptor().getEnumTypes().get(11);
    }

    private static final ROAD_SURFACE_TYPE_E[] VALUES = values();

    public static ROAD_SURFACE_TYPE_E valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ROAD_SURFACE_TYPE_E(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:if_proto_common.ROAD_SURFACE_TYPE_E)
  }

  public interface Point2DOrBuilder extends
      // @@protoc_insertion_point(interface_extends:if_proto_common.Point2D)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional double dbx = 1;</code>
     * @return Whether the dbx field is set.
     */
    boolean hasDbx();
    /**
     * <code>optional double dbx = 1;</code>
     * @return The dbx.
     */
    double getDbx();

    /**
     * <code>optional double dby = 2;</code>
     * @return Whether the dby field is set.
     */
    boolean hasDby();
    /**
     * <code>optional double dby = 2;</code>
     * @return The dby.
     */
    double getDby();
  }
  /**
   * Protobuf type {@code if_proto_common.Point2D}
   */
  public static final class Point2D extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:if_proto_common.Point2D)
      Point2DOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Point2D.newBuilder() to construct.
    private Point2D(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Point2D() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Point2D();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Point2D(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {
              bitField0_ |= 0x00000001;
              dbx_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              dby_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Point2D_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Point2D_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              if_proto_common.BxtObstacleV2.Point2D.class, if_proto_common.BxtObstacleV2.Point2D.Builder.class);
    }

    private int bitField0_;
    public static final int DBX_FIELD_NUMBER = 1;
    private double dbx_;
    /**
     * <code>optional double dbx = 1;</code>
     * @return Whether the dbx field is set.
     */
    @java.lang.Override
    public boolean hasDbx() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional double dbx = 1;</code>
     * @return The dbx.
     */
    @java.lang.Override
    public double getDbx() {
      return dbx_;
    }

    public static final int DBY_FIELD_NUMBER = 2;
    private double dby_;
    /**
     * <code>optional double dby = 2;</code>
     * @return Whether the dby field is set.
     */
    @java.lang.Override
    public boolean hasDby() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional double dby = 2;</code>
     * @return The dby.
     */
    @java.lang.Override
    public double getDby() {
      return dby_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeDouble(1, dbx_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeDouble(2, dby_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, dbx_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, dby_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof if_proto_common.BxtObstacleV2.Point2D)) {
        return super.equals(obj);
      }
      if_proto_common.BxtObstacleV2.Point2D other = (if_proto_common.BxtObstacleV2.Point2D) obj;

      if (hasDbx() != other.hasDbx()) return false;
      if (hasDbx()) {
        if (java.lang.Double.doubleToLongBits(getDbx())
            != java.lang.Double.doubleToLongBits(
                other.getDbx())) return false;
      }
      if (hasDby() != other.hasDby()) return false;
      if (hasDby()) {
        if (java.lang.Double.doubleToLongBits(getDby())
            != java.lang.Double.doubleToLongBits(
                other.getDby())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDbx()) {
        hash = (37 * hash) + DBX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDbx()));
      }
      if (hasDby()) {
        hash = (37 * hash) + DBY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDby()));
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static if_proto_common.BxtObstacleV2.Point2D parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.Point2D parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Point2D parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.Point2D parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Point2D parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.Point2D parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Point2D parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.Point2D parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Point2D parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.Point2D parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Point2D parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.Point2D parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(if_proto_common.BxtObstacleV2.Point2D prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code if_proto_common.Point2D}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:if_proto_common.Point2D)
        if_proto_common.BxtObstacleV2.Point2DOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Point2D_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Point2D_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                if_proto_common.BxtObstacleV2.Point2D.class, if_proto_common.BxtObstacleV2.Point2D.Builder.class);
      }

      // Construct using if_proto_common.BxtObstacleV2.Point2D.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        dbx_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        dby_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Point2D_descriptor;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.Point2D getDefaultInstanceForType() {
        return if_proto_common.BxtObstacleV2.Point2D.getDefaultInstance();
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.Point2D build() {
        if_proto_common.BxtObstacleV2.Point2D result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.Point2D buildPartial() {
        if_proto_common.BxtObstacleV2.Point2D result = new if_proto_common.BxtObstacleV2.Point2D(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.dbx_ = dbx_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.dby_ = dby_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof if_proto_common.BxtObstacleV2.Point2D) {
          return mergeFrom((if_proto_common.BxtObstacleV2.Point2D)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(if_proto_common.BxtObstacleV2.Point2D other) {
        if (other == if_proto_common.BxtObstacleV2.Point2D.getDefaultInstance()) return this;
        if (other.hasDbx()) {
          setDbx(other.getDbx());
        }
        if (other.hasDby()) {
          setDby(other.getDby());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if_proto_common.BxtObstacleV2.Point2D parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (if_proto_common.BxtObstacleV2.Point2D) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private double dbx_ ;
      /**
       * <code>optional double dbx = 1;</code>
       * @return Whether the dbx field is set.
       */
      @java.lang.Override
      public boolean hasDbx() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional double dbx = 1;</code>
       * @return The dbx.
       */
      @java.lang.Override
      public double getDbx() {
        return dbx_;
      }
      /**
       * <code>optional double dbx = 1;</code>
       * @param value The dbx to set.
       * @return This builder for chaining.
       */
      public Builder setDbx(double value) {
        bitField0_ |= 0x00000001;
        dbx_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double dbx = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDbx() {
        bitField0_ = (bitField0_ & ~0x00000001);
        dbx_ = 0D;
        onChanged();
        return this;
      }

      private double dby_ ;
      /**
       * <code>optional double dby = 2;</code>
       * @return Whether the dby field is set.
       */
      @java.lang.Override
      public boolean hasDby() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional double dby = 2;</code>
       * @return The dby.
       */
      @java.lang.Override
      public double getDby() {
        return dby_;
      }
      /**
       * <code>optional double dby = 2;</code>
       * @param value The dby to set.
       * @return This builder for chaining.
       */
      public Builder setDby(double value) {
        bitField0_ |= 0x00000002;
        dby_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double dby = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDby() {
        bitField0_ = (bitField0_ & ~0x00000002);
        dby_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:if_proto_common.Point2D)
    }

    // @@protoc_insertion_point(class_scope:if_proto_common.Point2D)
    private static final if_proto_common.BxtObstacleV2.Point2D DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new if_proto_common.BxtObstacleV2.Point2D();
    }

    public static if_proto_common.BxtObstacleV2.Point2D getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Point2D>
        PARSER = new com.google.protobuf.AbstractParser<Point2D>() {
      @java.lang.Override
      public Point2D parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Point2D(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Point2D> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Point2D> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public if_proto_common.BxtObstacleV2.Point2D getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PixelPointCoordinateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:if_proto_common.PixelPointCoordinate)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .if_proto_common.CameraCalibType ulCameraType = 1;</code>
     * @return Whether the ulCameraType field is set.
     */
    boolean hasUlCameraType();
    /**
     * <code>optional .if_proto_common.CameraCalibType ulCameraType = 1;</code>
     * @return The ulCameraType.
     */
    if_proto_common.BxtObstacleV2.CameraCalibType getUlCameraType();

    /**
     * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
     */
    java.util.List<if_proto_common.BxtObstacleV2.Point2D> 
        getAstPixelPointList();
    /**
     * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
     */
    if_proto_common.BxtObstacleV2.Point2D getAstPixelPoint(int index);
    /**
     * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
     */
    int getAstPixelPointCount();
    /**
     * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
     */
    java.util.List<? extends if_proto_common.BxtObstacleV2.Point2DOrBuilder> 
        getAstPixelPointOrBuilderList();
    /**
     * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
     */
    if_proto_common.BxtObstacleV2.Point2DOrBuilder getAstPixelPointOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code if_proto_common.PixelPointCoordinate}
   */
  public static final class PixelPointCoordinate extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:if_proto_common.PixelPointCoordinate)
      PixelPointCoordinateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PixelPointCoordinate.newBuilder() to construct.
    private PixelPointCoordinate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PixelPointCoordinate() {
      ulCameraType_ = 0;
      astPixelPoint_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PixelPointCoordinate();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PixelPointCoordinate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              if_proto_common.BxtObstacleV2.CameraCalibType value = if_proto_common.BxtObstacleV2.CameraCalibType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                ulCameraType_ = rawValue;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                astPixelPoint_ = new java.util.ArrayList<if_proto_common.BxtObstacleV2.Point2D>();
                mutable_bitField0_ |= 0x00000002;
              }
              astPixelPoint_.add(
                  input.readMessage(if_proto_common.BxtObstacleV2.Point2D.PARSER, extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          astPixelPoint_ = java.util.Collections.unmodifiableList(astPixelPoint_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_PixelPointCoordinate_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_PixelPointCoordinate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              if_proto_common.BxtObstacleV2.PixelPointCoordinate.class, if_proto_common.BxtObstacleV2.PixelPointCoordinate.Builder.class);
    }

    private int bitField0_;
    public static final int ULCAMERATYPE_FIELD_NUMBER = 1;
    private int ulCameraType_;
    /**
     * <code>optional .if_proto_common.CameraCalibType ulCameraType = 1;</code>
     * @return Whether the ulCameraType field is set.
     */
    @java.lang.Override public boolean hasUlCameraType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .if_proto_common.CameraCalibType ulCameraType = 1;</code>
     * @return The ulCameraType.
     */
    @java.lang.Override public if_proto_common.BxtObstacleV2.CameraCalibType getUlCameraType() {
      @SuppressWarnings("deprecation")
      if_proto_common.BxtObstacleV2.CameraCalibType result = if_proto_common.BxtObstacleV2.CameraCalibType.valueOf(ulCameraType_);
      return result == null ? if_proto_common.BxtObstacleV2.CameraCalibType.CAMERA_CALIBRATION_HEAD_RIGHT : result;
    }

    public static final int ASTPIXELPOINT_FIELD_NUMBER = 2;
    private java.util.List<if_proto_common.BxtObstacleV2.Point2D> astPixelPoint_;
    /**
     * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
     */
    @java.lang.Override
    public java.util.List<if_proto_common.BxtObstacleV2.Point2D> getAstPixelPointList() {
      return astPixelPoint_;
    }
    /**
     * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends if_proto_common.BxtObstacleV2.Point2DOrBuilder> 
        getAstPixelPointOrBuilderList() {
      return astPixelPoint_;
    }
    /**
     * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
     */
    @java.lang.Override
    public int getAstPixelPointCount() {
      return astPixelPoint_.size();
    }
    /**
     * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtObstacleV2.Point2D getAstPixelPoint(int index) {
      return astPixelPoint_.get(index);
    }
    /**
     * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtObstacleV2.Point2DOrBuilder getAstPixelPointOrBuilder(
        int index) {
      return astPixelPoint_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeEnum(1, ulCameraType_);
      }
      for (int i = 0; i < astPixelPoint_.size(); i++) {
        output.writeMessage(2, astPixelPoint_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, ulCameraType_);
      }
      for (int i = 0; i < astPixelPoint_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, astPixelPoint_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof if_proto_common.BxtObstacleV2.PixelPointCoordinate)) {
        return super.equals(obj);
      }
      if_proto_common.BxtObstacleV2.PixelPointCoordinate other = (if_proto_common.BxtObstacleV2.PixelPointCoordinate) obj;

      if (hasUlCameraType() != other.hasUlCameraType()) return false;
      if (hasUlCameraType()) {
        if (ulCameraType_ != other.ulCameraType_) return false;
      }
      if (!getAstPixelPointList()
          .equals(other.getAstPixelPointList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasUlCameraType()) {
        hash = (37 * hash) + ULCAMERATYPE_FIELD_NUMBER;
        hash = (53 * hash) + ulCameraType_;
      }
      if (getAstPixelPointCount() > 0) {
        hash = (37 * hash) + ASTPIXELPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getAstPixelPointList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static if_proto_common.BxtObstacleV2.PixelPointCoordinate parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.PixelPointCoordinate parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.PixelPointCoordinate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.PixelPointCoordinate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.PixelPointCoordinate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.PixelPointCoordinate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.PixelPointCoordinate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.PixelPointCoordinate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.PixelPointCoordinate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.PixelPointCoordinate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.PixelPointCoordinate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.PixelPointCoordinate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(if_proto_common.BxtObstacleV2.PixelPointCoordinate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code if_proto_common.PixelPointCoordinate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:if_proto_common.PixelPointCoordinate)
        if_proto_common.BxtObstacleV2.PixelPointCoordinateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_PixelPointCoordinate_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_PixelPointCoordinate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                if_proto_common.BxtObstacleV2.PixelPointCoordinate.class, if_proto_common.BxtObstacleV2.PixelPointCoordinate.Builder.class);
      }

      // Construct using if_proto_common.BxtObstacleV2.PixelPointCoordinate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getAstPixelPointFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        ulCameraType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (astPixelPointBuilder_ == null) {
          astPixelPoint_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          astPixelPointBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_PixelPointCoordinate_descriptor;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.PixelPointCoordinate getDefaultInstanceForType() {
        return if_proto_common.BxtObstacleV2.PixelPointCoordinate.getDefaultInstance();
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.PixelPointCoordinate build() {
        if_proto_common.BxtObstacleV2.PixelPointCoordinate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.PixelPointCoordinate buildPartial() {
        if_proto_common.BxtObstacleV2.PixelPointCoordinate result = new if_proto_common.BxtObstacleV2.PixelPointCoordinate(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.ulCameraType_ = ulCameraType_;
        if (astPixelPointBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            astPixelPoint_ = java.util.Collections.unmodifiableList(astPixelPoint_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.astPixelPoint_ = astPixelPoint_;
        } else {
          result.astPixelPoint_ = astPixelPointBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof if_proto_common.BxtObstacleV2.PixelPointCoordinate) {
          return mergeFrom((if_proto_common.BxtObstacleV2.PixelPointCoordinate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(if_proto_common.BxtObstacleV2.PixelPointCoordinate other) {
        if (other == if_proto_common.BxtObstacleV2.PixelPointCoordinate.getDefaultInstance()) return this;
        if (other.hasUlCameraType()) {
          setUlCameraType(other.getUlCameraType());
        }
        if (astPixelPointBuilder_ == null) {
          if (!other.astPixelPoint_.isEmpty()) {
            if (astPixelPoint_.isEmpty()) {
              astPixelPoint_ = other.astPixelPoint_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureAstPixelPointIsMutable();
              astPixelPoint_.addAll(other.astPixelPoint_);
            }
            onChanged();
          }
        } else {
          if (!other.astPixelPoint_.isEmpty()) {
            if (astPixelPointBuilder_.isEmpty()) {
              astPixelPointBuilder_.dispose();
              astPixelPointBuilder_ = null;
              astPixelPoint_ = other.astPixelPoint_;
              bitField0_ = (bitField0_ & ~0x00000002);
              astPixelPointBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getAstPixelPointFieldBuilder() : null;
            } else {
              astPixelPointBuilder_.addAllMessages(other.astPixelPoint_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if_proto_common.BxtObstacleV2.PixelPointCoordinate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (if_proto_common.BxtObstacleV2.PixelPointCoordinate) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int ulCameraType_ = 0;
      /**
       * <code>optional .if_proto_common.CameraCalibType ulCameraType = 1;</code>
       * @return Whether the ulCameraType field is set.
       */
      @java.lang.Override public boolean hasUlCameraType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .if_proto_common.CameraCalibType ulCameraType = 1;</code>
       * @return The ulCameraType.
       */
      @java.lang.Override
      public if_proto_common.BxtObstacleV2.CameraCalibType getUlCameraType() {
        @SuppressWarnings("deprecation")
        if_proto_common.BxtObstacleV2.CameraCalibType result = if_proto_common.BxtObstacleV2.CameraCalibType.valueOf(ulCameraType_);
        return result == null ? if_proto_common.BxtObstacleV2.CameraCalibType.CAMERA_CALIBRATION_HEAD_RIGHT : result;
      }
      /**
       * <code>optional .if_proto_common.CameraCalibType ulCameraType = 1;</code>
       * @param value The ulCameraType to set.
       * @return This builder for chaining.
       */
      public Builder setUlCameraType(if_proto_common.BxtObstacleV2.CameraCalibType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        ulCameraType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .if_proto_common.CameraCalibType ulCameraType = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUlCameraType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        ulCameraType_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<if_proto_common.BxtObstacleV2.Point2D> astPixelPoint_ =
        java.util.Collections.emptyList();
      private void ensureAstPixelPointIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          astPixelPoint_ = new java.util.ArrayList<if_proto_common.BxtObstacleV2.Point2D>(astPixelPoint_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          if_proto_common.BxtObstacleV2.Point2D, if_proto_common.BxtObstacleV2.Point2D.Builder, if_proto_common.BxtObstacleV2.Point2DOrBuilder> astPixelPointBuilder_;

      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public java.util.List<if_proto_common.BxtObstacleV2.Point2D> getAstPixelPointList() {
        if (astPixelPointBuilder_ == null) {
          return java.util.Collections.unmodifiableList(astPixelPoint_);
        } else {
          return astPixelPointBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public int getAstPixelPointCount() {
        if (astPixelPointBuilder_ == null) {
          return astPixelPoint_.size();
        } else {
          return astPixelPointBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public if_proto_common.BxtObstacleV2.Point2D getAstPixelPoint(int index) {
        if (astPixelPointBuilder_ == null) {
          return astPixelPoint_.get(index);
        } else {
          return astPixelPointBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public Builder setAstPixelPoint(
          int index, if_proto_common.BxtObstacleV2.Point2D value) {
        if (astPixelPointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAstPixelPointIsMutable();
          astPixelPoint_.set(index, value);
          onChanged();
        } else {
          astPixelPointBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public Builder setAstPixelPoint(
          int index, if_proto_common.BxtObstacleV2.Point2D.Builder builderForValue) {
        if (astPixelPointBuilder_ == null) {
          ensureAstPixelPointIsMutable();
          astPixelPoint_.set(index, builderForValue.build());
          onChanged();
        } else {
          astPixelPointBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public Builder addAstPixelPoint(if_proto_common.BxtObstacleV2.Point2D value) {
        if (astPixelPointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAstPixelPointIsMutable();
          astPixelPoint_.add(value);
          onChanged();
        } else {
          astPixelPointBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public Builder addAstPixelPoint(
          int index, if_proto_common.BxtObstacleV2.Point2D value) {
        if (astPixelPointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAstPixelPointIsMutable();
          astPixelPoint_.add(index, value);
          onChanged();
        } else {
          astPixelPointBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public Builder addAstPixelPoint(
          if_proto_common.BxtObstacleV2.Point2D.Builder builderForValue) {
        if (astPixelPointBuilder_ == null) {
          ensureAstPixelPointIsMutable();
          astPixelPoint_.add(builderForValue.build());
          onChanged();
        } else {
          astPixelPointBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public Builder addAstPixelPoint(
          int index, if_proto_common.BxtObstacleV2.Point2D.Builder builderForValue) {
        if (astPixelPointBuilder_ == null) {
          ensureAstPixelPointIsMutable();
          astPixelPoint_.add(index, builderForValue.build());
          onChanged();
        } else {
          astPixelPointBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public Builder addAllAstPixelPoint(
          java.lang.Iterable<? extends if_proto_common.BxtObstacleV2.Point2D> values) {
        if (astPixelPointBuilder_ == null) {
          ensureAstPixelPointIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, astPixelPoint_);
          onChanged();
        } else {
          astPixelPointBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public Builder clearAstPixelPoint() {
        if (astPixelPointBuilder_ == null) {
          astPixelPoint_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          astPixelPointBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public Builder removeAstPixelPoint(int index) {
        if (astPixelPointBuilder_ == null) {
          ensureAstPixelPointIsMutable();
          astPixelPoint_.remove(index);
          onChanged();
        } else {
          astPixelPointBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public if_proto_common.BxtObstacleV2.Point2D.Builder getAstPixelPointBuilder(
          int index) {
        return getAstPixelPointFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public if_proto_common.BxtObstacleV2.Point2DOrBuilder getAstPixelPointOrBuilder(
          int index) {
        if (astPixelPointBuilder_ == null) {
          return astPixelPoint_.get(index);  } else {
          return astPixelPointBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public java.util.List<? extends if_proto_common.BxtObstacleV2.Point2DOrBuilder> 
           getAstPixelPointOrBuilderList() {
        if (astPixelPointBuilder_ != null) {
          return astPixelPointBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(astPixelPoint_);
        }
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public if_proto_common.BxtObstacleV2.Point2D.Builder addAstPixelPointBuilder() {
        return getAstPixelPointFieldBuilder().addBuilder(
            if_proto_common.BxtObstacleV2.Point2D.getDefaultInstance());
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public if_proto_common.BxtObstacleV2.Point2D.Builder addAstPixelPointBuilder(
          int index) {
        return getAstPixelPointFieldBuilder().addBuilder(
            index, if_proto_common.BxtObstacleV2.Point2D.getDefaultInstance());
      }
      /**
       * <code>repeated .if_proto_common.Point2D astPixelPoint = 2;</code>
       */
      public java.util.List<if_proto_common.BxtObstacleV2.Point2D.Builder> 
           getAstPixelPointBuilderList() {
        return getAstPixelPointFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          if_proto_common.BxtObstacleV2.Point2D, if_proto_common.BxtObstacleV2.Point2D.Builder, if_proto_common.BxtObstacleV2.Point2DOrBuilder> 
          getAstPixelPointFieldBuilder() {
        if (astPixelPointBuilder_ == null) {
          astPixelPointBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              if_proto_common.BxtObstacleV2.Point2D, if_proto_common.BxtObstacleV2.Point2D.Builder, if_proto_common.BxtObstacleV2.Point2DOrBuilder>(
                  astPixelPoint_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          astPixelPoint_ = null;
        }
        return astPixelPointBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:if_proto_common.PixelPointCoordinate)
    }

    // @@protoc_insertion_point(class_scope:if_proto_common.PixelPointCoordinate)
    private static final if_proto_common.BxtObstacleV2.PixelPointCoordinate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new if_proto_common.BxtObstacleV2.PixelPointCoordinate();
    }

    public static if_proto_common.BxtObstacleV2.PixelPointCoordinate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<PixelPointCoordinate>
        PARSER = new com.google.protobuf.AbstractParser<PixelPointCoordinate>() {
      @java.lang.Override
      public PixelPointCoordinate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PixelPointCoordinate(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PixelPointCoordinate> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PixelPointCoordinate> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public if_proto_common.BxtObstacleV2.PixelPointCoordinate getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ObstacleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:if_proto_common.Obstacle)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * ======= Detection =======
     * obstacle ID.
     * </pre>
     *
     * <code>optional int32 id = 1;</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <pre>
     * ======= Detection =======
     * obstacle ID.
     * </pre>
     *
     * <code>optional int32 id = 1;</code>
     * @return The id.
     */
    int getId();

    /**
     * <pre>
     * GPS time in seconds.
     * </pre>
     *
     * <code>optional double drsu_timestamp = 2;</code>
     * @return Whether the drsuTimestamp field is set.
     */
    boolean hasDrsuTimestamp();
    /**
     * <pre>
     * GPS time in seconds.
     * </pre>
     *
     * <code>optional double drsu_timestamp = 2;</code>
     * @return The drsuTimestamp.
     */
    double getDrsuTimestamp();

    /**
     * <pre>
     * utm center of the object (cx, cy, z_min)
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d center = 3;</code>
     * @return Whether the center field is set.
     */
    boolean hasCenter();
    /**
     * <pre>
     * utm center of the object (cx, cy, z_min)
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d center = 3;</code>
     * @return The center.
     */
    if_proto_common.BxtCommonMathVector3D.Vector3d getCenter();
    /**
     * <pre>
     * utm center of the object (cx, cy, z_min)
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d center = 3;</code>
     */
    if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getCenterOrBuilder();

    /**
     * <pre>
     * ego center of the object
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
     * @return Whether the egoCenter field is set.
     */
    boolean hasEgoCenter();
    /**
     * <pre>
     * ego center of the object
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
     * @return The egoCenter.
     */
    if_proto_common.BxtCommonMathVector3D.Vector3d getEgoCenter();
    /**
     * <pre>
     * ego center of the object
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
     */
    if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getEgoCenterOrBuilder();

    /**
     * <pre>
     * main direction
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d direction = 5;</code>
     * @return Whether the direction field is set.
     */
    boolean hasDirection();
    /**
     * <pre>
     * main direction
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d direction = 5;</code>
     * @return The direction.
     */
    if_proto_common.BxtCommonMathVector3D.Vector3d getDirection();
    /**
     * <pre>
     * main direction
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d direction = 5;</code>
     */
    if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getDirectionOrBuilder();

    /**
     * <pre>
     * the yaw angle, theta = 0.0 &lt;=&gt; direction = (1, 0, 0)
     * </pre>
     *
     * <code>optional double theta = 6;</code>
     * @return Whether the theta field is set.
     */
    boolean hasTheta();
    /**
     * <pre>
     * the yaw angle, theta = 0.0 &lt;=&gt; direction = (1, 0, 0)
     * </pre>
     *
     * <code>optional double theta = 6;</code>
     * @return The theta.
     */
    double getTheta();

    /**
     * <pre>
     * Size of obstacle bounding box.
     * </pre>
     *
     * <code>optional double length = 7;</code>
     * @return Whether the length field is set.
     */
    boolean hasLength();
    /**
     * <pre>
     * Size of obstacle bounding box.
     * </pre>
     *
     * <code>optional double length = 7;</code>
     * @return The length.
     */
    double getLength();

    /**
     * <pre>
     * obstacle width.
     * </pre>
     *
     * <code>optional double width = 8;</code>
     * @return Whether the width field is set.
     */
    boolean hasWidth();
    /**
     * <pre>
     * obstacle width.
     * </pre>
     *
     * <code>optional double width = 8;</code>
     * @return The width.
     */
    double getWidth();

    /**
     * <pre>
     * obstacle height.
     * </pre>
     *
     * <code>optional double height = 9;</code>
     * @return Whether the height field is set.
     */
    boolean hasHeight();
    /**
     * <pre>
     * obstacle height.
     * </pre>
     *
     * <code>optional double height = 9;</code>
     * @return The height.
     */
    double getHeight();

    /**
     * <code>optional double det_confidence = 10;</code>
     * @return Whether the detConfidence field is set.
     */
    boolean hasDetConfidence();
    /**
     * <code>optional double det_confidence = 10;</code>
     * @return The detConfidence.
     */
    double getDetConfidence();

    /**
     * <pre>
     * ======= Classification =======
     * </pre>
     *
     * <code>optional .if_proto_common.ObjectType obj_type = 20;</code>
     * @return Whether the objType field is set.
     */
    boolean hasObjType();
    /**
     * <pre>
     * ======= Classification =======
     * </pre>
     *
     * <code>optional .if_proto_common.ObjectType obj_type = 20;</code>
     * @return The objType.
     */
    if_proto_common.BxtObstacleV2.ObjectType getObjType();

    /**
     * <pre>
     * Probability of each type, used for track type.
     * </pre>
     *
     * <code>optional double type_prob = 21;</code>
     * @return Whether the typeProb field is set.
     */
    boolean hasTypeProb();
    /**
     * <pre>
     * Probability of each type, used for track type.
     * </pre>
     *
     * <code>optional double type_prob = 21;</code>
     * @return The typeProb.
     */
    double getTypeProb();

    /**
     * <pre>
     * ======= tracking =======
     * </pre>
     *
     * <code>optional int32 track_id = 30;</code>
     * @return Whether the trackId field is set.
     */
    boolean hasTrackId();
    /**
     * <pre>
     * ======= tracking =======
     * </pre>
     *
     * <code>optional int32 track_id = 30;</code>
     * @return The trackId.
     */
    int getTrackId();

    /**
     * <pre>
     * obstacle position uncertainty
     * </pre>
     *
     * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
     * @return Whether the positionUncertainty field is set.
     */
    boolean hasPositionUncertainty();
    /**
     * <pre>
     * obstacle position uncertainty
     * </pre>
     *
     * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
     * @return The positionUncertainty.
     */
    if_proto_common.BxtCommonMathMatrixXd.MatrixXd getPositionUncertainty();
    /**
     * <pre>
     * obstacle position uncertainty
     * </pre>
     *
     * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
     */
    if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder getPositionUncertaintyOrBuilder();

    /**
     * <pre>
     * obstacle velocity.
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
     * @return Whether the velocity field is set.
     */
    boolean hasVelocity();
    /**
     * <pre>
     * obstacle velocity.
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
     * @return The velocity.
     */
    if_proto_common.BxtCommonMathVector3D.Vector3d getVelocity();
    /**
     * <pre>
     * obstacle velocity.
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
     */
    if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getVelocityOrBuilder();

    /**
     * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
     * @return Whether the velocityUncertainty field is set.
     */
    boolean hasVelocityUncertainty();
    /**
     * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
     * @return The velocityUncertainty.
     */
    if_proto_common.BxtCommonMathMatrixXd.MatrixXd getVelocityUncertainty();
    /**
     * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
     */
    if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder getVelocityUncertaintyOrBuilder();

    /**
     * <code>optional double angular_velocity = 32;</code>
     * @return Whether the angularVelocity field is set.
     */
    boolean hasAngularVelocity();
    /**
     * <code>optional double angular_velocity = 32;</code>
     * @return The angularVelocity.
     */
    double getAngularVelocity();

    /**
     * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
     * @return Whether the acceleration field is set.
     */
    boolean hasAcceleration();
    /**
     * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
     * @return The acceleration.
     */
    if_proto_common.BxtCommonMathVector3D.Vector3d getAcceleration();
    /**
     * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
     */
    if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getAccelerationOrBuilder();

    /**
     * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
     * @return Whether the accelerationUncertainty field is set.
     */
    boolean hasAccelerationUncertainty();
    /**
     * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
     * @return The accelerationUncertainty.
     */
    if_proto_common.BxtCommonMathMatrixXd.MatrixXd getAccelerationUncertainty();
    /**
     * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
     */
    if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder getAccelerationUncertaintyOrBuilder();

    /**
     * <pre>
     * age of the tracked object
     * </pre>
     *
     * <code>optional double detection_time = 34;</code>
     * @return Whether the detectionTime field is set.
     */
    boolean hasDetectionTime();
    /**
     * <pre>
     * age of the tracked object
     * </pre>
     *
     * <code>optional double detection_time = 34;</code>
     * @return The detectionTime.
     */
    double getDetectionTime();

    /**
     * <code>optional double tracking_time = 35;</code>
     * @return Whether the trackingTime field is set.
     */
    boolean hasTrackingTime();
    /**
     * <code>optional double tracking_time = 35;</code>
     * @return The trackingTime.
     */
    double getTrackingTime();

    /**
     * <code>optional double latest_tracked_time = 36;</code>
     * @return Whether the latestTrackedTime field is set.
     */
    boolean hasLatestTrackedTime();
    /**
     * <code>optional double latest_tracked_time = 36;</code>
     * @return The latestTrackedTime.
     */
    double getLatestTrackedTime();

    /**
     * <pre>
     * ======= Others ========
     * </pre>
     *
     * <code>optional .bxt.common.sensor.SensorSource sensor_source = 37 [default = UnknownSource];</code>
     * @return Whether the sensorSource field is set.
     */
    boolean hasSensorSource();
    /**
     * <pre>
     * ======= Others ========
     * </pre>
     *
     * <code>optional .bxt.common.sensor.SensorSource sensor_source = 37 [default = UnknownSource];</code>
     * @return The sensorSource.
     */
    bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource getSensorSource();

    /**
     * <code>optional bool is_valid = 40 [default = true];</code>
     * @return Whether the isValid field is set.
     */
    boolean hasIsValid();
    /**
     * <code>optional bool is_valid = 40 [default = true];</code>
     * @return The isValid.
     */
    boolean getIsValid();

    /**
     * <code>optional bool is_on_hdmap = 41 [default = false];</code>
     * @return Whether the isOnHdmap field is set.
     */
    boolean hasIsOnHdmap();
    /**
     * <code>optional bool is_on_hdmap = 41 [default = false];</code>
     * @return The isOnHdmap.
     */
    boolean getIsOnHdmap();

    /**
     * <code>optional bool is_stationary = 42 [default = false];</code>
     * @return Whether the isStationary field is set.
     */
    boolean hasIsStationary();
    /**
     * <code>optional bool is_stationary = 42 [default = false];</code>
     * @return The isStationary.
     */
    boolean getIsStationary();

    /**
     * <pre>
     *100 means road entrance, others positive means logical lane id, 
     * </pre>
     *
     * <code>repeated int32 aucLane = 44;</code>
     * @return A list containing the aucLane.
     */
    java.util.List<java.lang.Integer> getAucLaneList();
    /**
     * <pre>
     *100 means road entrance, others positive means logical lane id, 
     * </pre>
     *
     * <code>repeated int32 aucLane = 44;</code>
     * @return The count of aucLane.
     */
    int getAucLaneCount();
    /**
     * <pre>
     *100 means road entrance, others positive means logical lane id, 
     * </pre>
     *
     * <code>repeated int32 aucLane = 44;</code>
     * @param index The index of the element to return.
     * @return The aucLane at the given index.
     */
    int getAucLane(int index);

    /**
     * <pre>
     *-1 means road entrance, others positive means real lane id, 
     * </pre>
     *
     * <code>repeated int32 aucHdLane = 45;</code>
     * @return A list containing the aucHdLane.
     */
    java.util.List<java.lang.Integer> getAucHdLaneList();
    /**
     * <pre>
     *-1 means road entrance, others positive means real lane id, 
     * </pre>
     *
     * <code>repeated int32 aucHdLane = 45;</code>
     * @return The count of aucHdLane.
     */
    int getAucHdLaneCount();
    /**
     * <pre>
     *-1 means road entrance, others positive means real lane id, 
     * </pre>
     *
     * <code>repeated int32 aucHdLane = 45;</code>
     * @param index The index of the element to return.
     * @return The aucHdLane at the given index.
     */
    int getAucHdLane(int index);

    /**
     * <pre>
     *-1 means section, others positive means real connection id
     * </pre>
     *
     * <code>repeated int32 aucHdConnection = 46;</code>
     * @return A list containing the aucHdConnection.
     */
    java.util.List<java.lang.Integer> getAucHdConnectionList();
    /**
     * <pre>
     *-1 means section, others positive means real connection id
     * </pre>
     *
     * <code>repeated int32 aucHdConnection = 46;</code>
     * @return The count of aucHdConnection.
     */
    int getAucHdConnectionCount();
    /**
     * <pre>
     *-1 means section, others positive means real connection id
     * </pre>
     *
     * <code>repeated int32 aucHdConnection = 46;</code>
     * @param index The index of the element to return.
     * @return The aucHdConnection at the given index.
     */
    int getAucHdConnection(int index);

    /**
     * <pre>
     *-1 means section, real connection id
     * </pre>
     *
     * <code>repeated int32 aulCrosswalk = 47;</code>
     * @return A list containing the aulCrosswalk.
     */
    java.util.List<java.lang.Integer> getAulCrosswalkList();
    /**
     * <pre>
     *-1 means section, real connection id
     * </pre>
     *
     * <code>repeated int32 aulCrosswalk = 47;</code>
     * @return The count of aulCrosswalk.
     */
    int getAulCrosswalkCount();
    /**
     * <pre>
     *-1 means section, real connection id
     * </pre>
     *
     * <code>repeated int32 aulCrosswalk = 47;</code>
     * @param index The index of the element to return.
     * @return The aulCrosswalk at the given index.
     */
    int getAulCrosswalk(int index);

    /**
     * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
     */
    java.util.List<if_proto_common.BxtObstacleV2.PixelPointCoordinate> 
        getAstPixelPointCoordinateList();
    /**
     * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
     */
    if_proto_common.BxtObstacleV2.PixelPointCoordinate getAstPixelPointCoordinate(int index);
    /**
     * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
     */
    int getAstPixelPointCoordinateCount();
    /**
     * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
     */
    java.util.List<? extends if_proto_common.BxtObstacleV2.PixelPointCoordinateOrBuilder> 
        getAstPixelPointCoordinateOrBuilderList();
    /**
     * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
     */
    if_proto_common.BxtObstacleV2.PixelPointCoordinateOrBuilder getAstPixelPointCoordinateOrBuilder(
        int index);

    /**
     * <pre>
     *fusion from mid camera
     * </pre>
     *
     * <code>optional double camera_mid_timestamp = 49;</code>
     * @return Whether the cameraMidTimestamp field is set.
     */
    boolean hasCameraMidTimestamp();
    /**
     * <pre>
     *fusion from mid camera
     * </pre>
     *
     * <code>optional double camera_mid_timestamp = 49;</code>
     * @return The cameraMidTimestamp.
     */
    double getCameraMidTimestamp();

    /**
     * <pre>
     *fusion from long camera
     * </pre>
     *
     * <code>optional double camera_long_timestamp = 50;</code>
     * @return Whether the cameraLongTimestamp field is set.
     */
    boolean hasCameraLongTimestamp();
    /**
     * <pre>
     *fusion from long camera
     * </pre>
     *
     * <code>optional double camera_long_timestamp = 50;</code>
     * @return The cameraLongTimestamp.
     */
    double getCameraLongTimestamp();

    /**
     * <pre>
     *fusion from radar 
     * </pre>
     *
     * <code>optional double radar_timestamp = 51;</code>
     * @return Whether the radarTimestamp field is set.
     */
    boolean hasRadarTimestamp();
    /**
     * <pre>
     *fusion from radar 
     * </pre>
     *
     * <code>optional double radar_timestamp = 51;</code>
     * @return The radarTimestamp.
     */
    double getRadarTimestamp();

    /**
     * <pre>
     * 车辆类型
     * </pre>
     *
     * <code>optional string VehicleClass = 60;</code>
     * @return Whether the vehicleClass field is set.
     */
    boolean hasVehicleClass();
    /**
     * <pre>
     * 车辆类型
     * </pre>
     *
     * <code>optional string VehicleClass = 60;</code>
     * @return The vehicleClass.
     */
    java.lang.String getVehicleClass();
    /**
     * <pre>
     * 车辆类型
     * </pre>
     *
     * <code>optional string VehicleClass = 60;</code>
     * @return The bytes for vehicleClass.
     */
    com.google.protobuf.ByteString
        getVehicleClassBytes();

    /**
     * <pre>
     * 车辆颜色, atlas &amp; its
     * </pre>
     *
     * <code>optional string VehicleColor = 61;</code>
     * @return Whether the vehicleColor field is set.
     */
    boolean hasVehicleColor();
    /**
     * <pre>
     * 车辆颜色, atlas &amp; its
     * </pre>
     *
     * <code>optional string VehicleColor = 61;</code>
     * @return The vehicleColor.
     */
    java.lang.String getVehicleColor();
    /**
     * <pre>
     * 车辆颜色, atlas &amp; its
     * </pre>
     *
     * <code>optional string VehicleColor = 61;</code>
     * @return The bytes for vehicleColor.
     */
    com.google.protobuf.ByteString
        getVehicleColorBytes();

    /**
     * <pre>
     * 车辆品牌
     * </pre>
     *
     * <code>optional string VehicleBrand = 62;</code>
     * @return Whether the vehicleBrand field is set.
     */
    boolean hasVehicleBrand();
    /**
     * <pre>
     * 车辆品牌
     * </pre>
     *
     * <code>optional string VehicleBrand = 62;</code>
     * @return The vehicleBrand.
     */
    java.lang.String getVehicleBrand();
    /**
     * <pre>
     * 车辆品牌
     * </pre>
     *
     * <code>optional string VehicleBrand = 62;</code>
     * @return The bytes for vehicleBrand.
     */
    com.google.protobuf.ByteString
        getVehicleBrandBytes();

    /**
     * <pre>
     * 车辆型号
     * </pre>
     *
     * <code>optional string VehicleModel = 63;</code>
     * @return Whether the vehicleModel field is set.
     */
    boolean hasVehicleModel();
    /**
     * <pre>
     * 车辆型号
     * </pre>
     *
     * <code>optional string VehicleModel = 63;</code>
     * @return The vehicleModel.
     */
    java.lang.String getVehicleModel();
    /**
     * <pre>
     * 车辆型号
     * </pre>
     *
     * <code>optional string VehicleModel = 63;</code>
     * @return The bytes for vehicleModel.
     */
    com.google.protobuf.ByteString
        getVehicleModelBytes();

    /**
     * <pre>
     * 车辆年款,多个可能值用英文逗号分隔。例如“2014,2015,2016”
     * </pre>
     *
     * <code>optional string VehicleStyles = 64;</code>
     * @return Whether the vehicleStyles field is set.
     */
    boolean hasVehicleStyles();
    /**
     * <pre>
     * 车辆年款,多个可能值用英文逗号分隔。例如“2014,2015,2016”
     * </pre>
     *
     * <code>optional string VehicleStyles = 64;</code>
     * @return The vehicleStyles.
     */
    java.lang.String getVehicleStyles();
    /**
     * <pre>
     * 车辆年款,多个可能值用英文逗号分隔。例如“2014,2015,2016”
     * </pre>
     *
     * <code>optional string VehicleStyles = 64;</code>
     * @return The bytes for vehicleStyles.
     */
    com.google.protobuf.ByteString
        getVehicleStylesBytes();

    /**
     * <pre>
     * 车牌类型 atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateClass = 65;</code>
     * @return Whether the plateClass field is set.
     */
    boolean hasPlateClass();
    /**
     * <pre>
     * 车牌类型 atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateClass = 65;</code>
     * @return The plateClass.
     */
    java.lang.String getPlateClass();
    /**
     * <pre>
     * 车牌类型 atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateClass = 65;</code>
     * @return The bytes for plateClass.
     */
    com.google.protobuf.ByteString
        getPlateClassBytes();

    /**
     * <pre>
     * 车牌颜色,2位字符串 atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateColor = 66;</code>
     * @return Whether the plateColor field is set.
     */
    boolean hasPlateColor();
    /**
     * <pre>
     * 车牌颜色,2位字符串 atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateColor = 66;</code>
     * @return The plateColor.
     */
    java.lang.String getPlateColor();
    /**
     * <pre>
     * 车牌颜色,2位字符串 atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateColor = 66;</code>
     * @return The bytes for plateColor.
     */
    com.google.protobuf.ByteString
        getPlateColorBytes();

    /**
     * <pre>
     * 车牌号码，atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateNo = 67;</code>
     * @return Whether the plateNo field is set.
     */
    boolean hasPlateNo();
    /**
     * <pre>
     * 车牌号码，atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateNo = 67;</code>
     * @return The plateNo.
     */
    java.lang.String getPlateNo();
    /**
     * <pre>
     * 车牌号码，atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateNo = 67;</code>
     * @return The bytes for plateNo.
     */
    com.google.protobuf.ByteString
        getPlateNoBytes();

    /**
     * <pre>
     * 是否拍车头、车尾
     * </pre>
     *
     * <code>optional int32 CarDirection = 70;</code>
     * @return Whether the carDirection field is set.
     */
    boolean hasCarDirection();
    /**
     * <pre>
     * 是否拍车头、车尾
     * </pre>
     *
     * <code>optional int32 CarDirection = 70;</code>
     * @return The carDirection.
     */
    int getCarDirection();

    /**
     * <pre>
     * 特殊车型
     * </pre>
     *
     * <code>optional int32 SpecialVehicleType = 71;</code>
     * @return Whether the specialVehicleType field is set.
     */
    boolean hasSpecialVehicleType();
    /**
     * <pre>
     * 特殊车型
     * </pre>
     *
     * <code>optional int32 SpecialVehicleType = 71;</code>
     * @return The specialVehicleType.
     */
    int getSpecialVehicleType();

    /**
     * <pre>
     *目标来自camera的ip; atals使用
     * </pre>
     *
     * <code>optional uint32 dataSourceIP = 72;</code>
     * @return Whether the dataSourceIP field is set.
     */
    boolean hasDataSourceIP();
    /**
     * <pre>
     *目标来自camera的ip; atals使用
     * </pre>
     *
     * <code>optional uint32 dataSourceIP = 72;</code>
     * @return The dataSourceIP.
     */
    int getDataSourceIP();

    /**
     * <pre>
     *车辆航向角。为车头方向与正北方向的顺时针夹角,分辨率为0.0125°。
     * </pre>
     *
     * <code>optional int32 heading = 73;</code>
     * @return Whether the heading field is set.
     */
    boolean hasHeading();
    /**
     * <pre>
     *车辆航向角。为车头方向与正北方向的顺时针夹角,分辨率为0.0125°。
     * </pre>
     *
     * <code>optional int32 heading = 73;</code>
     * @return The heading.
     */
    int getHeading();

    /**
     * <pre>
     *当前车速，定义车速大小，分辨率为0.01m/s
     * </pre>
     *
     * <code>optional int32 speed = 74;</code>
     * @return Whether the speed field is set.
     */
    boolean hasSpeed();
    /**
     * <pre>
     *当前车速，定义车速大小，分辨率为0.01m/s
     * </pre>
     *
     * <code>optional int32 speed = 74;</code>
     * @return The speed.
     */
    int getSpeed();

    /**
     * <pre>
     *gps 坐标
     * </pre>
     *
     * <code>optional .if_proto_common.PointGPS gps = 75;</code>
     * @return Whether the gps field is set.
     */
    boolean hasGps();
    /**
     * <pre>
     *gps 坐标
     * </pre>
     *
     * <code>optional .if_proto_common.PointGPS gps = 75;</code>
     * @return The gps.
     */
    if_proto_common.BxtCommonMathPoint.PointGPS getGps();
    /**
     * <pre>
     *gps 坐标
     * </pre>
     *
     * <code>optional .if_proto_common.PointGPS gps = 75;</code>
     */
    if_proto_common.BxtCommonMathPoint.PointGPSOrBuilder getGpsOrBuilder();

    /**
     * <pre>
     * ======= 10.1版本新增 ========
     * </pre>
     *
     * <code>optional uint32 speedConfidence = 76;</code>
     * @return Whether the speedConfidence field is set.
     */
    boolean hasSpeedConfidence();
    /**
     * <pre>
     * ======= 10.1版本新增 ========
     * </pre>
     *
     * <code>optional uint32 speedConfidence = 76;</code>
     * @return The speedConfidence.
     */
    int getSpeedConfidence();

    /**
     * <pre>
     *速度置信度 0~100 
     * </pre>
     *
     * <code>optional uint32 posConfidence = 77;</code>
     * @return Whether the posConfidence field is set.
     */
    boolean hasPosConfidence();
    /**
     * <pre>
     *速度置信度 0~100 
     * </pre>
     *
     * <code>optional uint32 posConfidence = 77;</code>
     * @return The posConfidence.
     */
    int getPosConfidence();

    /**
     * <pre>
     *目标对应的相机IP, 仅路段使用, 路口不需要也无法提供 
     * </pre>
     *
     * <code>optional string targetCameraIP = 78;</code>
     * @return Whether the targetCameraIP field is set.
     */
    boolean hasTargetCameraIP();
    /**
     * <pre>
     *目标对应的相机IP, 仅路段使用, 路口不需要也无法提供 
     * </pre>
     *
     * <code>optional string targetCameraIP = 78;</code>
     * @return The targetCameraIP.
     */
    java.lang.String getTargetCameraIP();
    /**
     * <pre>
     *目标对应的相机IP, 仅路段使用, 路口不需要也无法提供 
     * </pre>
     *
     * <code>optional string targetCameraIP = 78;</code>
     * @return The bytes for targetCameraIP.
     */
    com.google.protobuf.ByteString
        getTargetCameraIPBytes();

    /**
     * <pre>
     *目标对应到相机的纵向距离, 单位m, 仅路段使用,路口不需要也无法提供 
     * </pre>
     *
     * <code>optional uint32 targetCameraDis = 79;</code>
     * @return Whether the targetCameraDis field is set.
     */
    boolean hasTargetCameraDis();
    /**
     * <pre>
     *目标对应到相机的纵向距离, 单位m, 仅路段使用,路口不需要也无法提供 
     * </pre>
     *
     * <code>optional uint32 targetCameraDis = 79;</code>
     * @return The targetCameraDis.
     */
    int getTargetCameraDis();

    /**
     * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
     * @return Whether the cameraSupplement field is set.
     */
    boolean hasCameraSupplement();
    /**
     * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
     * @return The cameraSupplement.
     */
    if_proto_common.BxtObstacleV2.CameraSupplement getCameraSupplement();
    /**
     * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
     */
    if_proto_common.BxtObstacleV2.CameraSupplementOrBuilder getCameraSupplementOrBuilder();

    /**
     * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
     * @return Whether the lidarSupplement field is set.
     */
    boolean hasLidarSupplement();
    /**
     * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
     * @return The lidarSupplement.
     */
    if_proto_common.BxtObstacleV2.LidarSupplement getLidarSupplement();
    /**
     * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
     */
    if_proto_common.BxtObstacleV2.LidarSupplementOrBuilder getLidarSupplementOrBuilder();

    /**
     * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
     * @return Whether the radarSupplement field is set.
     */
    boolean hasRadarSupplement();
    /**
     * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
     * @return The radarSupplement.
     */
    if_proto_common.BxtObstacleV2.RadarSupplement getRadarSupplement();
    /**
     * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
     */
    if_proto_common.BxtObstacleV2.RadarSupplementOrBuilder getRadarSupplementOrBuilder();
  }
  /**
   * <pre>
   * Next id is 41
   * </pre>
   *
   * Protobuf type {@code if_proto_common.Obstacle}
   */
  public static final class Obstacle extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:if_proto_common.Obstacle)
      ObstacleOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Obstacle.newBuilder() to construct.
    private Obstacle(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Obstacle() {
      objType_ = 0;
      sensorSource_ = 0;
      isValid_ = true;
      aucLane_ = emptyIntList();
      aucHdLane_ = emptyIntList();
      aucHdConnection_ = emptyIntList();
      aulCrosswalk_ = emptyIntList();
      astPixelPointCoordinate_ = java.util.Collections.emptyList();
      vehicleClass_ = "";
      vehicleColor_ = "";
      vehicleBrand_ = "";
      vehicleModel_ = "";
      vehicleStyles_ = "";
      plateClass_ = "";
      plateColor_ = "";
      plateNo_ = "";
      targetCameraIP_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Obstacle();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Obstacle(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              drsuTimestamp_ = input.readDouble();
              break;
            }
            case 26: {
              if_proto_common.BxtCommonMathVector3D.Vector3d.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) != 0)) {
                subBuilder = center_.toBuilder();
              }
              center_ = input.readMessage(if_proto_common.BxtCommonMathVector3D.Vector3d.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(center_);
                center_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              if_proto_common.BxtCommonMathVector3D.Vector3d.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) != 0)) {
                subBuilder = egoCenter_.toBuilder();
              }
              egoCenter_ = input.readMessage(if_proto_common.BxtCommonMathVector3D.Vector3d.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(egoCenter_);
                egoCenter_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              if_proto_common.BxtCommonMathVector3D.Vector3d.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) != 0)) {
                subBuilder = direction_.toBuilder();
              }
              direction_ = input.readMessage(if_proto_common.BxtCommonMathVector3D.Vector3d.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(direction_);
                direction_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              theta_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              length_ = input.readDouble();
              break;
            }
            case 65: {
              bitField0_ |= 0x00000080;
              width_ = input.readDouble();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000100;
              height_ = input.readDouble();
              break;
            }
            case 81: {
              bitField0_ |= 0x00000200;
              detConfidence_ = input.readDouble();
              break;
            }
            case 160: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              if_proto_common.BxtObstacleV2.ObjectType value = if_proto_common.BxtObstacleV2.ObjectType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(20, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                objType_ = rawValue;
              }
              break;
            }
            case 169: {
              bitField0_ |= 0x00000800;
              typeProb_ = input.readDouble();
              break;
            }
            case 240: {
              bitField0_ |= 0x00001000;
              trackId_ = input.readInt32();
              break;
            }
            case 250: {
              if_proto_common.BxtCommonMathVector3D.Vector3d.Builder subBuilder = null;
              if (((bitField0_ & 0x00004000) != 0)) {
                subBuilder = velocity_.toBuilder();
              }
              velocity_ = input.readMessage(if_proto_common.BxtCommonMathVector3D.Vector3d.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(velocity_);
                velocity_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00004000;
              break;
            }
            case 257: {
              bitField0_ |= 0x00010000;
              angularVelocity_ = input.readDouble();
              break;
            }
            case 266: {
              if_proto_common.BxtCommonMathVector3D.Vector3d.Builder subBuilder = null;
              if (((bitField0_ & 0x00020000) != 0)) {
                subBuilder = acceleration_.toBuilder();
              }
              acceleration_ = input.readMessage(if_proto_common.BxtCommonMathVector3D.Vector3d.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(acceleration_);
                acceleration_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00020000;
              break;
            }
            case 273: {
              bitField0_ |= 0x00080000;
              detectionTime_ = input.readDouble();
              break;
            }
            case 281: {
              bitField0_ |= 0x00100000;
              trackingTime_ = input.readDouble();
              break;
            }
            case 289: {
              bitField0_ |= 0x00200000;
              latestTrackedTime_ = input.readDouble();
              break;
            }
            case 296: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource value = bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(37, rawValue);
              } else {
                bitField0_ |= 0x00400000;
                sensorSource_ = rawValue;
              }
              break;
            }
            case 306: {
              if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder subBuilder = null;
              if (((bitField0_ & 0x00008000) != 0)) {
                subBuilder = velocityUncertainty_.toBuilder();
              }
              velocityUncertainty_ = input.readMessage(if_proto_common.BxtCommonMathMatrixXd.MatrixXd.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(velocityUncertainty_);
                velocityUncertainty_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00008000;
              break;
            }
            case 314: {
              if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder subBuilder = null;
              if (((bitField0_ & 0x00040000) != 0)) {
                subBuilder = accelerationUncertainty_.toBuilder();
              }
              accelerationUncertainty_ = input.readMessage(if_proto_common.BxtCommonMathMatrixXd.MatrixXd.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(accelerationUncertainty_);
                accelerationUncertainty_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00040000;
              break;
            }
            case 320: {
              bitField0_ |= 0x00800000;
              isValid_ = input.readBool();
              break;
            }
            case 328: {
              bitField0_ |= 0x01000000;
              isOnHdmap_ = input.readBool();
              break;
            }
            case 336: {
              bitField0_ |= 0x02000000;
              isStationary_ = input.readBool();
              break;
            }
            case 346: {
              if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder subBuilder = null;
              if (((bitField0_ & 0x00002000) != 0)) {
                subBuilder = positionUncertainty_.toBuilder();
              }
              positionUncertainty_ = input.readMessage(if_proto_common.BxtCommonMathMatrixXd.MatrixXd.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(positionUncertainty_);
                positionUncertainty_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00002000;
              break;
            }
            case 352: {
              if (!((mutable_bitField0_ & 0x04000000) != 0)) {
                aucLane_ = newIntList();
                mutable_bitField0_ |= 0x04000000;
              }
              aucLane_.addInt(input.readInt32());
              break;
            }
            case 354: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x04000000) != 0) && input.getBytesUntilLimit() > 0) {
                aucLane_ = newIntList();
                mutable_bitField0_ |= 0x04000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                aucLane_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 360: {
              if (!((mutable_bitField0_ & 0x08000000) != 0)) {
                aucHdLane_ = newIntList();
                mutable_bitField0_ |= 0x08000000;
              }
              aucHdLane_.addInt(input.readInt32());
              break;
            }
            case 362: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x08000000) != 0) && input.getBytesUntilLimit() > 0) {
                aucHdLane_ = newIntList();
                mutable_bitField0_ |= 0x08000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                aucHdLane_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 368: {
              if (!((mutable_bitField0_ & 0x10000000) != 0)) {
                aucHdConnection_ = newIntList();
                mutable_bitField0_ |= 0x10000000;
              }
              aucHdConnection_.addInt(input.readInt32());
              break;
            }
            case 370: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x10000000) != 0) && input.getBytesUntilLimit() > 0) {
                aucHdConnection_ = newIntList();
                mutable_bitField0_ |= 0x10000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                aucHdConnection_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 376: {
              if (!((mutable_bitField0_ & 0x20000000) != 0)) {
                aulCrosswalk_ = newIntList();
                mutable_bitField0_ |= 0x20000000;
              }
              aulCrosswalk_.addInt(input.readInt32());
              break;
            }
            case 378: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x20000000) != 0) && input.getBytesUntilLimit() > 0) {
                aulCrosswalk_ = newIntList();
                mutable_bitField0_ |= 0x20000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                aulCrosswalk_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 386: {
              if (!((mutable_bitField0_ & 0x40000000) != 0)) {
                astPixelPointCoordinate_ = new java.util.ArrayList<if_proto_common.BxtObstacleV2.PixelPointCoordinate>();
                mutable_bitField0_ |= 0x40000000;
              }
              astPixelPointCoordinate_.add(
                  input.readMessage(if_proto_common.BxtObstacleV2.PixelPointCoordinate.PARSER, extensionRegistry));
              break;
            }
            case 393: {
              bitField0_ |= 0x04000000;
              cameraMidTimestamp_ = input.readDouble();
              break;
            }
            case 401: {
              bitField0_ |= 0x08000000;
              cameraLongTimestamp_ = input.readDouble();
              break;
            }
            case 409: {
              bitField0_ |= 0x10000000;
              radarTimestamp_ = input.readDouble();
              break;
            }
            case 482: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x20000000;
              vehicleClass_ = bs;
              break;
            }
            case 490: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x40000000;
              vehicleColor_ = bs;
              break;
            }
            case 498: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x80000000;
              vehicleBrand_ = bs;
              break;
            }
            case 506: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField1_ |= 0x00000001;
              vehicleModel_ = bs;
              break;
            }
            case 514: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField1_ |= 0x00000002;
              vehicleStyles_ = bs;
              break;
            }
            case 522: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField1_ |= 0x00000004;
              plateClass_ = bs;
              break;
            }
            case 530: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField1_ |= 0x00000008;
              plateColor_ = bs;
              break;
            }
            case 538: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField1_ |= 0x00000010;
              plateNo_ = bs;
              break;
            }
            case 560: {
              bitField1_ |= 0x00000020;
              carDirection_ = input.readInt32();
              break;
            }
            case 568: {
              bitField1_ |= 0x00000040;
              specialVehicleType_ = input.readInt32();
              break;
            }
            case 576: {
              bitField1_ |= 0x00000080;
              dataSourceIP_ = input.readUInt32();
              break;
            }
            case 584: {
              bitField1_ |= 0x00000100;
              heading_ = input.readInt32();
              break;
            }
            case 592: {
              bitField1_ |= 0x00000200;
              speed_ = input.readInt32();
              break;
            }
            case 602: {
              if_proto_common.BxtCommonMathPoint.PointGPS.Builder subBuilder = null;
              if (((bitField1_ & 0x00000400) != 0)) {
                subBuilder = gps_.toBuilder();
              }
              gps_ = input.readMessage(if_proto_common.BxtCommonMathPoint.PointGPS.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(gps_);
                gps_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000400;
              break;
            }
            case 608: {
              bitField1_ |= 0x00000800;
              speedConfidence_ = input.readUInt32();
              break;
            }
            case 616: {
              bitField1_ |= 0x00001000;
              posConfidence_ = input.readUInt32();
              break;
            }
            case 626: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField1_ |= 0x00002000;
              targetCameraIP_ = bs;
              break;
            }
            case 632: {
              bitField1_ |= 0x00004000;
              targetCameraDis_ = input.readUInt32();
              break;
            }
            case 802: {
              if_proto_common.BxtObstacleV2.CameraSupplement.Builder subBuilder = null;
              if (((bitField1_ & 0x00008000) != 0)) {
                subBuilder = cameraSupplement_.toBuilder();
              }
              cameraSupplement_ = input.readMessage(if_proto_common.BxtObstacleV2.CameraSupplement.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(cameraSupplement_);
                cameraSupplement_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00008000;
              break;
            }
            case 810: {
              if_proto_common.BxtObstacleV2.LidarSupplement.Builder subBuilder = null;
              if (((bitField1_ & 0x00010000) != 0)) {
                subBuilder = lidarSupplement_.toBuilder();
              }
              lidarSupplement_ = input.readMessage(if_proto_common.BxtObstacleV2.LidarSupplement.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lidarSupplement_);
                lidarSupplement_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00010000;
              break;
            }
            case 818: {
              if_proto_common.BxtObstacleV2.RadarSupplement.Builder subBuilder = null;
              if (((bitField1_ & 0x00020000) != 0)) {
                subBuilder = radarSupplement_.toBuilder();
              }
              radarSupplement_ = input.readMessage(if_proto_common.BxtObstacleV2.RadarSupplement.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(radarSupplement_);
                radarSupplement_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00020000;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x04000000) != 0)) {
          aucLane_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x08000000) != 0)) {
          aucHdLane_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x10000000) != 0)) {
          aucHdConnection_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x20000000) != 0)) {
          aulCrosswalk_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x40000000) != 0)) {
          astPixelPointCoordinate_ = java.util.Collections.unmodifiableList(astPixelPointCoordinate_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Obstacle_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Obstacle_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              if_proto_common.BxtObstacleV2.Obstacle.class, if_proto_common.BxtObstacleV2.Obstacle.Builder.class);
    }

    private int bitField0_;
    private int bitField1_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <pre>
     * ======= Detection =======
     * obstacle ID.
     * </pre>
     *
     * <code>optional int32 id = 1;</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * ======= Detection =======
     * obstacle ID.
     * </pre>
     *
     * <code>optional int32 id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public int getId() {
      return id_;
    }

    public static final int DRSU_TIMESTAMP_FIELD_NUMBER = 2;
    private double drsuTimestamp_;
    /**
     * <pre>
     * GPS time in seconds.
     * </pre>
     *
     * <code>optional double drsu_timestamp = 2;</code>
     * @return Whether the drsuTimestamp field is set.
     */
    @java.lang.Override
    public boolean hasDrsuTimestamp() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * GPS time in seconds.
     * </pre>
     *
     * <code>optional double drsu_timestamp = 2;</code>
     * @return The drsuTimestamp.
     */
    @java.lang.Override
    public double getDrsuTimestamp() {
      return drsuTimestamp_;
    }

    public static final int CENTER_FIELD_NUMBER = 3;
    private if_proto_common.BxtCommonMathVector3D.Vector3d center_;
    /**
     * <pre>
     * utm center of the object (cx, cy, z_min)
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d center = 3;</code>
     * @return Whether the center field is set.
     */
    @java.lang.Override
    public boolean hasCenter() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * utm center of the object (cx, cy, z_min)
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d center = 3;</code>
     * @return The center.
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathVector3D.Vector3d getCenter() {
      return center_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : center_;
    }
    /**
     * <pre>
     * utm center of the object (cx, cy, z_min)
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d center = 3;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getCenterOrBuilder() {
      return center_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : center_;
    }

    public static final int EGO_CENTER_FIELD_NUMBER = 4;
    private if_proto_common.BxtCommonMathVector3D.Vector3d egoCenter_;
    /**
     * <pre>
     * ego center of the object
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
     * @return Whether the egoCenter field is set.
     */
    @java.lang.Override
    public boolean hasEgoCenter() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * ego center of the object
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
     * @return The egoCenter.
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathVector3D.Vector3d getEgoCenter() {
      return egoCenter_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : egoCenter_;
    }
    /**
     * <pre>
     * ego center of the object
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getEgoCenterOrBuilder() {
      return egoCenter_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : egoCenter_;
    }

    public static final int DIRECTION_FIELD_NUMBER = 5;
    private if_proto_common.BxtCommonMathVector3D.Vector3d direction_;
    /**
     * <pre>
     * main direction
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d direction = 5;</code>
     * @return Whether the direction field is set.
     */
    @java.lang.Override
    public boolean hasDirection() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * main direction
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d direction = 5;</code>
     * @return The direction.
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathVector3D.Vector3d getDirection() {
      return direction_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : direction_;
    }
    /**
     * <pre>
     * main direction
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d direction = 5;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getDirectionOrBuilder() {
      return direction_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : direction_;
    }

    public static final int THETA_FIELD_NUMBER = 6;
    private double theta_;
    /**
     * <pre>
     * the yaw angle, theta = 0.0 &lt;=&gt; direction = (1, 0, 0)
     * </pre>
     *
     * <code>optional double theta = 6;</code>
     * @return Whether the theta field is set.
     */
    @java.lang.Override
    public boolean hasTheta() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * the yaw angle, theta = 0.0 &lt;=&gt; direction = (1, 0, 0)
     * </pre>
     *
     * <code>optional double theta = 6;</code>
     * @return The theta.
     */
    @java.lang.Override
    public double getTheta() {
      return theta_;
    }

    public static final int LENGTH_FIELD_NUMBER = 7;
    private double length_;
    /**
     * <pre>
     * Size of obstacle bounding box.
     * </pre>
     *
     * <code>optional double length = 7;</code>
     * @return Whether the length field is set.
     */
    @java.lang.Override
    public boolean hasLength() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Size of obstacle bounding box.
     * </pre>
     *
     * <code>optional double length = 7;</code>
     * @return The length.
     */
    @java.lang.Override
    public double getLength() {
      return length_;
    }

    public static final int WIDTH_FIELD_NUMBER = 8;
    private double width_;
    /**
     * <pre>
     * obstacle width.
     * </pre>
     *
     * <code>optional double width = 8;</code>
     * @return Whether the width field is set.
     */
    @java.lang.Override
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * obstacle width.
     * </pre>
     *
     * <code>optional double width = 8;</code>
     * @return The width.
     */
    @java.lang.Override
    public double getWidth() {
      return width_;
    }

    public static final int HEIGHT_FIELD_NUMBER = 9;
    private double height_;
    /**
     * <pre>
     * obstacle height.
     * </pre>
     *
     * <code>optional double height = 9;</code>
     * @return Whether the height field is set.
     */
    @java.lang.Override
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * obstacle height.
     * </pre>
     *
     * <code>optional double height = 9;</code>
     * @return The height.
     */
    @java.lang.Override
    public double getHeight() {
      return height_;
    }

    public static final int DET_CONFIDENCE_FIELD_NUMBER = 10;
    private double detConfidence_;
    /**
     * <code>optional double det_confidence = 10;</code>
     * @return Whether the detConfidence field is set.
     */
    @java.lang.Override
    public boolean hasDetConfidence() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional double det_confidence = 10;</code>
     * @return The detConfidence.
     */
    @java.lang.Override
    public double getDetConfidence() {
      return detConfidence_;
    }

    public static final int OBJ_TYPE_FIELD_NUMBER = 20;
    private int objType_;
    /**
     * <pre>
     * ======= Classification =======
     * </pre>
     *
     * <code>optional .if_proto_common.ObjectType obj_type = 20;</code>
     * @return Whether the objType field is set.
     */
    @java.lang.Override public boolean hasObjType() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * ======= Classification =======
     * </pre>
     *
     * <code>optional .if_proto_common.ObjectType obj_type = 20;</code>
     * @return The objType.
     */
    @java.lang.Override public if_proto_common.BxtObstacleV2.ObjectType getObjType() {
      @SuppressWarnings("deprecation")
      if_proto_common.BxtObstacleV2.ObjectType result = if_proto_common.BxtObstacleV2.ObjectType.valueOf(objType_);
      return result == null ? if_proto_common.BxtObstacleV2.ObjectType.UNKNOWN : result;
    }

    public static final int TYPE_PROB_FIELD_NUMBER = 21;
    private double typeProb_;
    /**
     * <pre>
     * Probability of each type, used for track type.
     * </pre>
     *
     * <code>optional double type_prob = 21;</code>
     * @return Whether the typeProb field is set.
     */
    @java.lang.Override
    public boolean hasTypeProb() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * Probability of each type, used for track type.
     * </pre>
     *
     * <code>optional double type_prob = 21;</code>
     * @return The typeProb.
     */
    @java.lang.Override
    public double getTypeProb() {
      return typeProb_;
    }

    public static final int TRACK_ID_FIELD_NUMBER = 30;
    private int trackId_;
    /**
     * <pre>
     * ======= tracking =======
     * </pre>
     *
     * <code>optional int32 track_id = 30;</code>
     * @return Whether the trackId field is set.
     */
    @java.lang.Override
    public boolean hasTrackId() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     * ======= tracking =======
     * </pre>
     *
     * <code>optional int32 track_id = 30;</code>
     * @return The trackId.
     */
    @java.lang.Override
    public int getTrackId() {
      return trackId_;
    }

    public static final int POSITION_UNCERTAINTY_FIELD_NUMBER = 43;
    private if_proto_common.BxtCommonMathMatrixXd.MatrixXd positionUncertainty_;
    /**
     * <pre>
     * obstacle position uncertainty
     * </pre>
     *
     * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
     * @return Whether the positionUncertainty field is set.
     */
    @java.lang.Override
    public boolean hasPositionUncertainty() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     * obstacle position uncertainty
     * </pre>
     *
     * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
     * @return The positionUncertainty.
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathMatrixXd.MatrixXd getPositionUncertainty() {
      return positionUncertainty_ == null ? if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance() : positionUncertainty_;
    }
    /**
     * <pre>
     * obstacle position uncertainty
     * </pre>
     *
     * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder getPositionUncertaintyOrBuilder() {
      return positionUncertainty_ == null ? if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance() : positionUncertainty_;
    }

    public static final int VELOCITY_FIELD_NUMBER = 31;
    private if_proto_common.BxtCommonMathVector3D.Vector3d velocity_;
    /**
     * <pre>
     * obstacle velocity.
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
     * @return Whether the velocity field is set.
     */
    @java.lang.Override
    public boolean hasVelocity() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <pre>
     * obstacle velocity.
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
     * @return The velocity.
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathVector3D.Vector3d getVelocity() {
      return velocity_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : velocity_;
    }
    /**
     * <pre>
     * obstacle velocity.
     * </pre>
     *
     * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getVelocityOrBuilder() {
      return velocity_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : velocity_;
    }

    public static final int VELOCITY_UNCERTAINTY_FIELD_NUMBER = 38;
    private if_proto_common.BxtCommonMathMatrixXd.MatrixXd velocityUncertainty_;
    /**
     * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
     * @return Whether the velocityUncertainty field is set.
     */
    @java.lang.Override
    public boolean hasVelocityUncertainty() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
     * @return The velocityUncertainty.
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathMatrixXd.MatrixXd getVelocityUncertainty() {
      return velocityUncertainty_ == null ? if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance() : velocityUncertainty_;
    }
    /**
     * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder getVelocityUncertaintyOrBuilder() {
      return velocityUncertainty_ == null ? if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance() : velocityUncertainty_;
    }

    public static final int ANGULAR_VELOCITY_FIELD_NUMBER = 32;
    private double angularVelocity_;
    /**
     * <code>optional double angular_velocity = 32;</code>
     * @return Whether the angularVelocity field is set.
     */
    @java.lang.Override
    public boolean hasAngularVelocity() {
      return ((bitField0_ & 0x00010000) != 0);
    }
    /**
     * <code>optional double angular_velocity = 32;</code>
     * @return The angularVelocity.
     */
    @java.lang.Override
    public double getAngularVelocity() {
      return angularVelocity_;
    }

    public static final int ACCELERATION_FIELD_NUMBER = 33;
    private if_proto_common.BxtCommonMathVector3D.Vector3d acceleration_;
    /**
     * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
     * @return Whether the acceleration field is set.
     */
    @java.lang.Override
    public boolean hasAcceleration() {
      return ((bitField0_ & 0x00020000) != 0);
    }
    /**
     * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
     * @return The acceleration.
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathVector3D.Vector3d getAcceleration() {
      return acceleration_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : acceleration_;
    }
    /**
     * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getAccelerationOrBuilder() {
      return acceleration_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : acceleration_;
    }

    public static final int ACCELERATION_UNCERTAINTY_FIELD_NUMBER = 39;
    private if_proto_common.BxtCommonMathMatrixXd.MatrixXd accelerationUncertainty_;
    /**
     * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
     * @return Whether the accelerationUncertainty field is set.
     */
    @java.lang.Override
    public boolean hasAccelerationUncertainty() {
      return ((bitField0_ & 0x00040000) != 0);
    }
    /**
     * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
     * @return The accelerationUncertainty.
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathMatrixXd.MatrixXd getAccelerationUncertainty() {
      return accelerationUncertainty_ == null ? if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance() : accelerationUncertainty_;
    }
    /**
     * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder getAccelerationUncertaintyOrBuilder() {
      return accelerationUncertainty_ == null ? if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance() : accelerationUncertainty_;
    }

    public static final int DETECTION_TIME_FIELD_NUMBER = 34;
    private double detectionTime_;
    /**
     * <pre>
     * age of the tracked object
     * </pre>
     *
     * <code>optional double detection_time = 34;</code>
     * @return Whether the detectionTime field is set.
     */
    @java.lang.Override
    public boolean hasDetectionTime() {
      return ((bitField0_ & 0x00080000) != 0);
    }
    /**
     * <pre>
     * age of the tracked object
     * </pre>
     *
     * <code>optional double detection_time = 34;</code>
     * @return The detectionTime.
     */
    @java.lang.Override
    public double getDetectionTime() {
      return detectionTime_;
    }

    public static final int TRACKING_TIME_FIELD_NUMBER = 35;
    private double trackingTime_;
    /**
     * <code>optional double tracking_time = 35;</code>
     * @return Whether the trackingTime field is set.
     */
    @java.lang.Override
    public boolean hasTrackingTime() {
      return ((bitField0_ & 0x00100000) != 0);
    }
    /**
     * <code>optional double tracking_time = 35;</code>
     * @return The trackingTime.
     */
    @java.lang.Override
    public double getTrackingTime() {
      return trackingTime_;
    }

    public static final int LATEST_TRACKED_TIME_FIELD_NUMBER = 36;
    private double latestTrackedTime_;
    /**
     * <code>optional double latest_tracked_time = 36;</code>
     * @return Whether the latestTrackedTime field is set.
     */
    @java.lang.Override
    public boolean hasLatestTrackedTime() {
      return ((bitField0_ & 0x00200000) != 0);
    }
    /**
     * <code>optional double latest_tracked_time = 36;</code>
     * @return The latestTrackedTime.
     */
    @java.lang.Override
    public double getLatestTrackedTime() {
      return latestTrackedTime_;
    }

    public static final int SENSOR_SOURCE_FIELD_NUMBER = 37;
    private int sensorSource_;
    /**
     * <pre>
     * ======= Others ========
     * </pre>
     *
     * <code>optional .bxt.common.sensor.SensorSource sensor_source = 37 [default = UnknownSource];</code>
     * @return Whether the sensorSource field is set.
     */
    @java.lang.Override public boolean hasSensorSource() {
      return ((bitField0_ & 0x00400000) != 0);
    }
    /**
     * <pre>
     * ======= Others ========
     * </pre>
     *
     * <code>optional .bxt.common.sensor.SensorSource sensor_source = 37 [default = UnknownSource];</code>
     * @return The sensorSource.
     */
    @java.lang.Override public bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource getSensorSource() {
      @SuppressWarnings("deprecation")
      bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource result = bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource.valueOf(sensorSource_);
      return result == null ? bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource.UnknownSource : result;
    }

    public static final int IS_VALID_FIELD_NUMBER = 40;
    private boolean isValid_;
    /**
     * <code>optional bool is_valid = 40 [default = true];</code>
     * @return Whether the isValid field is set.
     */
    @java.lang.Override
    public boolean hasIsValid() {
      return ((bitField0_ & 0x00800000) != 0);
    }
    /**
     * <code>optional bool is_valid = 40 [default = true];</code>
     * @return The isValid.
     */
    @java.lang.Override
    public boolean getIsValid() {
      return isValid_;
    }

    public static final int IS_ON_HDMAP_FIELD_NUMBER = 41;
    private boolean isOnHdmap_;
    /**
     * <code>optional bool is_on_hdmap = 41 [default = false];</code>
     * @return Whether the isOnHdmap field is set.
     */
    @java.lang.Override
    public boolean hasIsOnHdmap() {
      return ((bitField0_ & 0x01000000) != 0);
    }
    /**
     * <code>optional bool is_on_hdmap = 41 [default = false];</code>
     * @return The isOnHdmap.
     */
    @java.lang.Override
    public boolean getIsOnHdmap() {
      return isOnHdmap_;
    }

    public static final int IS_STATIONARY_FIELD_NUMBER = 42;
    private boolean isStationary_;
    /**
     * <code>optional bool is_stationary = 42 [default = false];</code>
     * @return Whether the isStationary field is set.
     */
    @java.lang.Override
    public boolean hasIsStationary() {
      return ((bitField0_ & 0x02000000) != 0);
    }
    /**
     * <code>optional bool is_stationary = 42 [default = false];</code>
     * @return The isStationary.
     */
    @java.lang.Override
    public boolean getIsStationary() {
      return isStationary_;
    }

    public static final int AUCLANE_FIELD_NUMBER = 44;
    private com.google.protobuf.Internal.IntList aucLane_;
    /**
     * <pre>
     *100 means road entrance, others positive means logical lane id, 
     * </pre>
     *
     * <code>repeated int32 aucLane = 44;</code>
     * @return A list containing the aucLane.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getAucLaneList() {
      return aucLane_;
    }
    /**
     * <pre>
     *100 means road entrance, others positive means logical lane id, 
     * </pre>
     *
     * <code>repeated int32 aucLane = 44;</code>
     * @return The count of aucLane.
     */
    public int getAucLaneCount() {
      return aucLane_.size();
    }
    /**
     * <pre>
     *100 means road entrance, others positive means logical lane id, 
     * </pre>
     *
     * <code>repeated int32 aucLane = 44;</code>
     * @param index The index of the element to return.
     * @return The aucLane at the given index.
     */
    public int getAucLane(int index) {
      return aucLane_.getInt(index);
    }

    public static final int AUCHDLANE_FIELD_NUMBER = 45;
    private com.google.protobuf.Internal.IntList aucHdLane_;
    /**
     * <pre>
     *-1 means road entrance, others positive means real lane id, 
     * </pre>
     *
     * <code>repeated int32 aucHdLane = 45;</code>
     * @return A list containing the aucHdLane.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getAucHdLaneList() {
      return aucHdLane_;
    }
    /**
     * <pre>
     *-1 means road entrance, others positive means real lane id, 
     * </pre>
     *
     * <code>repeated int32 aucHdLane = 45;</code>
     * @return The count of aucHdLane.
     */
    public int getAucHdLaneCount() {
      return aucHdLane_.size();
    }
    /**
     * <pre>
     *-1 means road entrance, others positive means real lane id, 
     * </pre>
     *
     * <code>repeated int32 aucHdLane = 45;</code>
     * @param index The index of the element to return.
     * @return The aucHdLane at the given index.
     */
    public int getAucHdLane(int index) {
      return aucHdLane_.getInt(index);
    }

    public static final int AUCHDCONNECTION_FIELD_NUMBER = 46;
    private com.google.protobuf.Internal.IntList aucHdConnection_;
    /**
     * <pre>
     *-1 means section, others positive means real connection id
     * </pre>
     *
     * <code>repeated int32 aucHdConnection = 46;</code>
     * @return A list containing the aucHdConnection.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getAucHdConnectionList() {
      return aucHdConnection_;
    }
    /**
     * <pre>
     *-1 means section, others positive means real connection id
     * </pre>
     *
     * <code>repeated int32 aucHdConnection = 46;</code>
     * @return The count of aucHdConnection.
     */
    public int getAucHdConnectionCount() {
      return aucHdConnection_.size();
    }
    /**
     * <pre>
     *-1 means section, others positive means real connection id
     * </pre>
     *
     * <code>repeated int32 aucHdConnection = 46;</code>
     * @param index The index of the element to return.
     * @return The aucHdConnection at the given index.
     */
    public int getAucHdConnection(int index) {
      return aucHdConnection_.getInt(index);
    }

    public static final int AULCROSSWALK_FIELD_NUMBER = 47;
    private com.google.protobuf.Internal.IntList aulCrosswalk_;
    /**
     * <pre>
     *-1 means section, real connection id
     * </pre>
     *
     * <code>repeated int32 aulCrosswalk = 47;</code>
     * @return A list containing the aulCrosswalk.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getAulCrosswalkList() {
      return aulCrosswalk_;
    }
    /**
     * <pre>
     *-1 means section, real connection id
     * </pre>
     *
     * <code>repeated int32 aulCrosswalk = 47;</code>
     * @return The count of aulCrosswalk.
     */
    public int getAulCrosswalkCount() {
      return aulCrosswalk_.size();
    }
    /**
     * <pre>
     *-1 means section, real connection id
     * </pre>
     *
     * <code>repeated int32 aulCrosswalk = 47;</code>
     * @param index The index of the element to return.
     * @return The aulCrosswalk at the given index.
     */
    public int getAulCrosswalk(int index) {
      return aulCrosswalk_.getInt(index);
    }

    public static final int ASTPIXELPOINTCOORDINATE_FIELD_NUMBER = 48;
    private java.util.List<if_proto_common.BxtObstacleV2.PixelPointCoordinate> astPixelPointCoordinate_;
    /**
     * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
     */
    @java.lang.Override
    public java.util.List<if_proto_common.BxtObstacleV2.PixelPointCoordinate> getAstPixelPointCoordinateList() {
      return astPixelPointCoordinate_;
    }
    /**
     * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
     */
    @java.lang.Override
    public java.util.List<? extends if_proto_common.BxtObstacleV2.PixelPointCoordinateOrBuilder> 
        getAstPixelPointCoordinateOrBuilderList() {
      return astPixelPointCoordinate_;
    }
    /**
     * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
     */
    @java.lang.Override
    public int getAstPixelPointCoordinateCount() {
      return astPixelPointCoordinate_.size();
    }
    /**
     * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtObstacleV2.PixelPointCoordinate getAstPixelPointCoordinate(int index) {
      return astPixelPointCoordinate_.get(index);
    }
    /**
     * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtObstacleV2.PixelPointCoordinateOrBuilder getAstPixelPointCoordinateOrBuilder(
        int index) {
      return astPixelPointCoordinate_.get(index);
    }

    public static final int CAMERA_MID_TIMESTAMP_FIELD_NUMBER = 49;
    private double cameraMidTimestamp_;
    /**
     * <pre>
     *fusion from mid camera
     * </pre>
     *
     * <code>optional double camera_mid_timestamp = 49;</code>
     * @return Whether the cameraMidTimestamp field is set.
     */
    @java.lang.Override
    public boolean hasCameraMidTimestamp() {
      return ((bitField0_ & 0x04000000) != 0);
    }
    /**
     * <pre>
     *fusion from mid camera
     * </pre>
     *
     * <code>optional double camera_mid_timestamp = 49;</code>
     * @return The cameraMidTimestamp.
     */
    @java.lang.Override
    public double getCameraMidTimestamp() {
      return cameraMidTimestamp_;
    }

    public static final int CAMERA_LONG_TIMESTAMP_FIELD_NUMBER = 50;
    private double cameraLongTimestamp_;
    /**
     * <pre>
     *fusion from long camera
     * </pre>
     *
     * <code>optional double camera_long_timestamp = 50;</code>
     * @return Whether the cameraLongTimestamp field is set.
     */
    @java.lang.Override
    public boolean hasCameraLongTimestamp() {
      return ((bitField0_ & 0x08000000) != 0);
    }
    /**
     * <pre>
     *fusion from long camera
     * </pre>
     *
     * <code>optional double camera_long_timestamp = 50;</code>
     * @return The cameraLongTimestamp.
     */
    @java.lang.Override
    public double getCameraLongTimestamp() {
      return cameraLongTimestamp_;
    }

    public static final int RADAR_TIMESTAMP_FIELD_NUMBER = 51;
    private double radarTimestamp_;
    /**
     * <pre>
     *fusion from radar 
     * </pre>
     *
     * <code>optional double radar_timestamp = 51;</code>
     * @return Whether the radarTimestamp field is set.
     */
    @java.lang.Override
    public boolean hasRadarTimestamp() {
      return ((bitField0_ & 0x10000000) != 0);
    }
    /**
     * <pre>
     *fusion from radar 
     * </pre>
     *
     * <code>optional double radar_timestamp = 51;</code>
     * @return The radarTimestamp.
     */
    @java.lang.Override
    public double getRadarTimestamp() {
      return radarTimestamp_;
    }

    public static final int VEHICLECLASS_FIELD_NUMBER = 60;
    private volatile java.lang.Object vehicleClass_;
    /**
     * <pre>
     * 车辆类型
     * </pre>
     *
     * <code>optional string VehicleClass = 60;</code>
     * @return Whether the vehicleClass field is set.
     */
    @java.lang.Override
    public boolean hasVehicleClass() {
      return ((bitField0_ & 0x20000000) != 0);
    }
    /**
     * <pre>
     * 车辆类型
     * </pre>
     *
     * <code>optional string VehicleClass = 60;</code>
     * @return The vehicleClass.
     */
    @java.lang.Override
    public java.lang.String getVehicleClass() {
      java.lang.Object ref = vehicleClass_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vehicleClass_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * 车辆类型
     * </pre>
     *
     * <code>optional string VehicleClass = 60;</code>
     * @return The bytes for vehicleClass.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVehicleClassBytes() {
      java.lang.Object ref = vehicleClass_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vehicleClass_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VEHICLECOLOR_FIELD_NUMBER = 61;
    private volatile java.lang.Object vehicleColor_;
    /**
     * <pre>
     * 车辆颜色, atlas &amp; its
     * </pre>
     *
     * <code>optional string VehicleColor = 61;</code>
     * @return Whether the vehicleColor field is set.
     */
    @java.lang.Override
    public boolean hasVehicleColor() {
      return ((bitField0_ & 0x40000000) != 0);
    }
    /**
     * <pre>
     * 车辆颜色, atlas &amp; its
     * </pre>
     *
     * <code>optional string VehicleColor = 61;</code>
     * @return The vehicleColor.
     */
    @java.lang.Override
    public java.lang.String getVehicleColor() {
      java.lang.Object ref = vehicleColor_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vehicleColor_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * 车辆颜色, atlas &amp; its
     * </pre>
     *
     * <code>optional string VehicleColor = 61;</code>
     * @return The bytes for vehicleColor.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVehicleColorBytes() {
      java.lang.Object ref = vehicleColor_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vehicleColor_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VEHICLEBRAND_FIELD_NUMBER = 62;
    private volatile java.lang.Object vehicleBrand_;
    /**
     * <pre>
     * 车辆品牌
     * </pre>
     *
     * <code>optional string VehicleBrand = 62;</code>
     * @return Whether the vehicleBrand field is set.
     */
    @java.lang.Override
    public boolean hasVehicleBrand() {
      return ((bitField0_ & 0x80000000) != 0);
    }
    /**
     * <pre>
     * 车辆品牌
     * </pre>
     *
     * <code>optional string VehicleBrand = 62;</code>
     * @return The vehicleBrand.
     */
    @java.lang.Override
    public java.lang.String getVehicleBrand() {
      java.lang.Object ref = vehicleBrand_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vehicleBrand_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * 车辆品牌
     * </pre>
     *
     * <code>optional string VehicleBrand = 62;</code>
     * @return The bytes for vehicleBrand.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVehicleBrandBytes() {
      java.lang.Object ref = vehicleBrand_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vehicleBrand_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VEHICLEMODEL_FIELD_NUMBER = 63;
    private volatile java.lang.Object vehicleModel_;
    /**
     * <pre>
     * 车辆型号
     * </pre>
     *
     * <code>optional string VehicleModel = 63;</code>
     * @return Whether the vehicleModel field is set.
     */
    @java.lang.Override
    public boolean hasVehicleModel() {
      return ((bitField1_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * 车辆型号
     * </pre>
     *
     * <code>optional string VehicleModel = 63;</code>
     * @return The vehicleModel.
     */
    @java.lang.Override
    public java.lang.String getVehicleModel() {
      java.lang.Object ref = vehicleModel_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vehicleModel_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * 车辆型号
     * </pre>
     *
     * <code>optional string VehicleModel = 63;</code>
     * @return The bytes for vehicleModel.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVehicleModelBytes() {
      java.lang.Object ref = vehicleModel_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vehicleModel_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VEHICLESTYLES_FIELD_NUMBER = 64;
    private volatile java.lang.Object vehicleStyles_;
    /**
     * <pre>
     * 车辆年款,多个可能值用英文逗号分隔。例如“2014,2015,2016”
     * </pre>
     *
     * <code>optional string VehicleStyles = 64;</code>
     * @return Whether the vehicleStyles field is set.
     */
    @java.lang.Override
    public boolean hasVehicleStyles() {
      return ((bitField1_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * 车辆年款,多个可能值用英文逗号分隔。例如“2014,2015,2016”
     * </pre>
     *
     * <code>optional string VehicleStyles = 64;</code>
     * @return The vehicleStyles.
     */
    @java.lang.Override
    public java.lang.String getVehicleStyles() {
      java.lang.Object ref = vehicleStyles_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vehicleStyles_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * 车辆年款,多个可能值用英文逗号分隔。例如“2014,2015,2016”
     * </pre>
     *
     * <code>optional string VehicleStyles = 64;</code>
     * @return The bytes for vehicleStyles.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVehicleStylesBytes() {
      java.lang.Object ref = vehicleStyles_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vehicleStyles_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PLATECLASS_FIELD_NUMBER = 65;
    private volatile java.lang.Object plateClass_;
    /**
     * <pre>
     * 车牌类型 atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateClass = 65;</code>
     * @return Whether the plateClass field is set.
     */
    @java.lang.Override
    public boolean hasPlateClass() {
      return ((bitField1_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * 车牌类型 atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateClass = 65;</code>
     * @return The plateClass.
     */
    @java.lang.Override
    public java.lang.String getPlateClass() {
      java.lang.Object ref = plateClass_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          plateClass_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * 车牌类型 atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateClass = 65;</code>
     * @return The bytes for plateClass.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPlateClassBytes() {
      java.lang.Object ref = plateClass_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        plateClass_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PLATECOLOR_FIELD_NUMBER = 66;
    private volatile java.lang.Object plateColor_;
    /**
     * <pre>
     * 车牌颜色,2位字符串 atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateColor = 66;</code>
     * @return Whether the plateColor field is set.
     */
    @java.lang.Override
    public boolean hasPlateColor() {
      return ((bitField1_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * 车牌颜色,2位字符串 atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateColor = 66;</code>
     * @return The plateColor.
     */
    @java.lang.Override
    public java.lang.String getPlateColor() {
      java.lang.Object ref = plateColor_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          plateColor_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * 车牌颜色,2位字符串 atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateColor = 66;</code>
     * @return The bytes for plateColor.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPlateColorBytes() {
      java.lang.Object ref = plateColor_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        plateColor_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PLATENO_FIELD_NUMBER = 67;
    private volatile java.lang.Object plateNo_;
    /**
     * <pre>
     * 车牌号码，atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateNo = 67;</code>
     * @return Whether the plateNo field is set.
     */
    @java.lang.Override
    public boolean hasPlateNo() {
      return ((bitField1_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * 车牌号码，atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateNo = 67;</code>
     * @return The plateNo.
     */
    @java.lang.Override
    public java.lang.String getPlateNo() {
      java.lang.Object ref = plateNo_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          plateNo_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * 车牌号码，atlas &amp; its
     * </pre>
     *
     * <code>optional string PlateNo = 67;</code>
     * @return The bytes for plateNo.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPlateNoBytes() {
      java.lang.Object ref = plateNo_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        plateNo_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CARDIRECTION_FIELD_NUMBER = 70;
    private int carDirection_;
    /**
     * <pre>
     * 是否拍车头、车尾
     * </pre>
     *
     * <code>optional int32 CarDirection = 70;</code>
     * @return Whether the carDirection field is set.
     */
    @java.lang.Override
    public boolean hasCarDirection() {
      return ((bitField1_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * 是否拍车头、车尾
     * </pre>
     *
     * <code>optional int32 CarDirection = 70;</code>
     * @return The carDirection.
     */
    @java.lang.Override
    public int getCarDirection() {
      return carDirection_;
    }

    public static final int SPECIALVEHICLETYPE_FIELD_NUMBER = 71;
    private int specialVehicleType_;
    /**
     * <pre>
     * 特殊车型
     * </pre>
     *
     * <code>optional int32 SpecialVehicleType = 71;</code>
     * @return Whether the specialVehicleType field is set.
     */
    @java.lang.Override
    public boolean hasSpecialVehicleType() {
      return ((bitField1_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * 特殊车型
     * </pre>
     *
     * <code>optional int32 SpecialVehicleType = 71;</code>
     * @return The specialVehicleType.
     */
    @java.lang.Override
    public int getSpecialVehicleType() {
      return specialVehicleType_;
    }

    public static final int DATASOURCEIP_FIELD_NUMBER = 72;
    private int dataSourceIP_;
    /**
     * <pre>
     *目标来自camera的ip; atals使用
     * </pre>
     *
     * <code>optional uint32 dataSourceIP = 72;</code>
     * @return Whether the dataSourceIP field is set.
     */
    @java.lang.Override
    public boolean hasDataSourceIP() {
      return ((bitField1_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     *目标来自camera的ip; atals使用
     * </pre>
     *
     * <code>optional uint32 dataSourceIP = 72;</code>
     * @return The dataSourceIP.
     */
    @java.lang.Override
    public int getDataSourceIP() {
      return dataSourceIP_;
    }

    public static final int HEADING_FIELD_NUMBER = 73;
    private int heading_;
    /**
     * <pre>
     *车辆航向角。为车头方向与正北方向的顺时针夹角,分辨率为0.0125°。
     * </pre>
     *
     * <code>optional int32 heading = 73;</code>
     * @return Whether the heading field is set.
     */
    @java.lang.Override
    public boolean hasHeading() {
      return ((bitField1_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     *车辆航向角。为车头方向与正北方向的顺时针夹角,分辨率为0.0125°。
     * </pre>
     *
     * <code>optional int32 heading = 73;</code>
     * @return The heading.
     */
    @java.lang.Override
    public int getHeading() {
      return heading_;
    }

    public static final int SPEED_FIELD_NUMBER = 74;
    private int speed_;
    /**
     * <pre>
     *当前车速，定义车速大小，分辨率为0.01m/s
     * </pre>
     *
     * <code>optional int32 speed = 74;</code>
     * @return Whether the speed field is set.
     */
    @java.lang.Override
    public boolean hasSpeed() {
      return ((bitField1_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     *当前车速，定义车速大小，分辨率为0.01m/s
     * </pre>
     *
     * <code>optional int32 speed = 74;</code>
     * @return The speed.
     */
    @java.lang.Override
    public int getSpeed() {
      return speed_;
    }

    public static final int GPS_FIELD_NUMBER = 75;
    private if_proto_common.BxtCommonMathPoint.PointGPS gps_;
    /**
     * <pre>
     *gps 坐标
     * </pre>
     *
     * <code>optional .if_proto_common.PointGPS gps = 75;</code>
     * @return Whether the gps field is set.
     */
    @java.lang.Override
    public boolean hasGps() {
      return ((bitField1_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     *gps 坐标
     * </pre>
     *
     * <code>optional .if_proto_common.PointGPS gps = 75;</code>
     * @return The gps.
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathPoint.PointGPS getGps() {
      return gps_ == null ? if_proto_common.BxtCommonMathPoint.PointGPS.getDefaultInstance() : gps_;
    }
    /**
     * <pre>
     *gps 坐标
     * </pre>
     *
     * <code>optional .if_proto_common.PointGPS gps = 75;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathPoint.PointGPSOrBuilder getGpsOrBuilder() {
      return gps_ == null ? if_proto_common.BxtCommonMathPoint.PointGPS.getDefaultInstance() : gps_;
    }

    public static final int SPEEDCONFIDENCE_FIELD_NUMBER = 76;
    private int speedConfidence_;
    /**
     * <pre>
     * ======= 10.1版本新增 ========
     * </pre>
     *
     * <code>optional uint32 speedConfidence = 76;</code>
     * @return Whether the speedConfidence field is set.
     */
    @java.lang.Override
    public boolean hasSpeedConfidence() {
      return ((bitField1_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * ======= 10.1版本新增 ========
     * </pre>
     *
     * <code>optional uint32 speedConfidence = 76;</code>
     * @return The speedConfidence.
     */
    @java.lang.Override
    public int getSpeedConfidence() {
      return speedConfidence_;
    }

    public static final int POSCONFIDENCE_FIELD_NUMBER = 77;
    private int posConfidence_;
    /**
     * <pre>
     *速度置信度 0~100 
     * </pre>
     *
     * <code>optional uint32 posConfidence = 77;</code>
     * @return Whether the posConfidence field is set.
     */
    @java.lang.Override
    public boolean hasPosConfidence() {
      return ((bitField1_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     *速度置信度 0~100 
     * </pre>
     *
     * <code>optional uint32 posConfidence = 77;</code>
     * @return The posConfidence.
     */
    @java.lang.Override
    public int getPosConfidence() {
      return posConfidence_;
    }

    public static final int TARGETCAMERAIP_FIELD_NUMBER = 78;
    private volatile java.lang.Object targetCameraIP_;
    /**
     * <pre>
     *目标对应的相机IP, 仅路段使用, 路口不需要也无法提供 
     * </pre>
     *
     * <code>optional string targetCameraIP = 78;</code>
     * @return Whether the targetCameraIP field is set.
     */
    @java.lang.Override
    public boolean hasTargetCameraIP() {
      return ((bitField1_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     *目标对应的相机IP, 仅路段使用, 路口不需要也无法提供 
     * </pre>
     *
     * <code>optional string targetCameraIP = 78;</code>
     * @return The targetCameraIP.
     */
    @java.lang.Override
    public java.lang.String getTargetCameraIP() {
      java.lang.Object ref = targetCameraIP_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          targetCameraIP_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *目标对应的相机IP, 仅路段使用, 路口不需要也无法提供 
     * </pre>
     *
     * <code>optional string targetCameraIP = 78;</code>
     * @return The bytes for targetCameraIP.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTargetCameraIPBytes() {
      java.lang.Object ref = targetCameraIP_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        targetCameraIP_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TARGETCAMERADIS_FIELD_NUMBER = 79;
    private int targetCameraDis_;
    /**
     * <pre>
     *目标对应到相机的纵向距离, 单位m, 仅路段使用,路口不需要也无法提供 
     * </pre>
     *
     * <code>optional uint32 targetCameraDis = 79;</code>
     * @return Whether the targetCameraDis field is set.
     */
    @java.lang.Override
    public boolean hasTargetCameraDis() {
      return ((bitField1_ & 0x00004000) != 0);
    }
    /**
     * <pre>
     *目标对应到相机的纵向距离, 单位m, 仅路段使用,路口不需要也无法提供 
     * </pre>
     *
     * <code>optional uint32 targetCameraDis = 79;</code>
     * @return The targetCameraDis.
     */
    @java.lang.Override
    public int getTargetCameraDis() {
      return targetCameraDis_;
    }

    public static final int CAMERA_SUPPLEMENT_FIELD_NUMBER = 100;
    private if_proto_common.BxtObstacleV2.CameraSupplement cameraSupplement_;
    /**
     * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
     * @return Whether the cameraSupplement field is set.
     */
    @java.lang.Override
    public boolean hasCameraSupplement() {
      return ((bitField1_ & 0x00008000) != 0);
    }
    /**
     * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
     * @return The cameraSupplement.
     */
    @java.lang.Override
    public if_proto_common.BxtObstacleV2.CameraSupplement getCameraSupplement() {
      return cameraSupplement_ == null ? if_proto_common.BxtObstacleV2.CameraSupplement.getDefaultInstance() : cameraSupplement_;
    }
    /**
     * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtObstacleV2.CameraSupplementOrBuilder getCameraSupplementOrBuilder() {
      return cameraSupplement_ == null ? if_proto_common.BxtObstacleV2.CameraSupplement.getDefaultInstance() : cameraSupplement_;
    }

    public static final int LIDAR_SUPPLEMENT_FIELD_NUMBER = 101;
    private if_proto_common.BxtObstacleV2.LidarSupplement lidarSupplement_;
    /**
     * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
     * @return Whether the lidarSupplement field is set.
     */
    @java.lang.Override
    public boolean hasLidarSupplement() {
      return ((bitField1_ & 0x00010000) != 0);
    }
    /**
     * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
     * @return The lidarSupplement.
     */
    @java.lang.Override
    public if_proto_common.BxtObstacleV2.LidarSupplement getLidarSupplement() {
      return lidarSupplement_ == null ? if_proto_common.BxtObstacleV2.LidarSupplement.getDefaultInstance() : lidarSupplement_;
    }
    /**
     * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtObstacleV2.LidarSupplementOrBuilder getLidarSupplementOrBuilder() {
      return lidarSupplement_ == null ? if_proto_common.BxtObstacleV2.LidarSupplement.getDefaultInstance() : lidarSupplement_;
    }

    public static final int RADAR_SUPPLEMENT_FIELD_NUMBER = 102;
    private if_proto_common.BxtObstacleV2.RadarSupplement radarSupplement_;
    /**
     * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
     * @return Whether the radarSupplement field is set.
     */
    @java.lang.Override
    public boolean hasRadarSupplement() {
      return ((bitField1_ & 0x00020000) != 0);
    }
    /**
     * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
     * @return The radarSupplement.
     */
    @java.lang.Override
    public if_proto_common.BxtObstacleV2.RadarSupplement getRadarSupplement() {
      return radarSupplement_ == null ? if_proto_common.BxtObstacleV2.RadarSupplement.getDefaultInstance() : radarSupplement_;
    }
    /**
     * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtObstacleV2.RadarSupplementOrBuilder getRadarSupplementOrBuilder() {
      return radarSupplement_ == null ? if_proto_common.BxtObstacleV2.RadarSupplement.getDefaultInstance() : radarSupplement_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeDouble(2, drsuTimestamp_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getCenter());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(4, getEgoCenter());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(5, getDirection());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeDouble(6, theta_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeDouble(7, length_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeDouble(8, width_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeDouble(9, height_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeDouble(10, detConfidence_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeEnum(20, objType_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeDouble(21, typeProb_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeInt32(30, trackId_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        output.writeMessage(31, getVelocity());
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        output.writeDouble(32, angularVelocity_);
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        output.writeMessage(33, getAcceleration());
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        output.writeDouble(34, detectionTime_);
      }
      if (((bitField0_ & 0x00100000) != 0)) {
        output.writeDouble(35, trackingTime_);
      }
      if (((bitField0_ & 0x00200000) != 0)) {
        output.writeDouble(36, latestTrackedTime_);
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        output.writeEnum(37, sensorSource_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        output.writeMessage(38, getVelocityUncertainty());
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        output.writeMessage(39, getAccelerationUncertainty());
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        output.writeBool(40, isValid_);
      }
      if (((bitField0_ & 0x01000000) != 0)) {
        output.writeBool(41, isOnHdmap_);
      }
      if (((bitField0_ & 0x02000000) != 0)) {
        output.writeBool(42, isStationary_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        output.writeMessage(43, getPositionUncertainty());
      }
      for (int i = 0; i < aucLane_.size(); i++) {
        output.writeInt32(44, aucLane_.getInt(i));
      }
      for (int i = 0; i < aucHdLane_.size(); i++) {
        output.writeInt32(45, aucHdLane_.getInt(i));
      }
      for (int i = 0; i < aucHdConnection_.size(); i++) {
        output.writeInt32(46, aucHdConnection_.getInt(i));
      }
      for (int i = 0; i < aulCrosswalk_.size(); i++) {
        output.writeInt32(47, aulCrosswalk_.getInt(i));
      }
      for (int i = 0; i < astPixelPointCoordinate_.size(); i++) {
        output.writeMessage(48, astPixelPointCoordinate_.get(i));
      }
      if (((bitField0_ & 0x04000000) != 0)) {
        output.writeDouble(49, cameraMidTimestamp_);
      }
      if (((bitField0_ & 0x08000000) != 0)) {
        output.writeDouble(50, cameraLongTimestamp_);
      }
      if (((bitField0_ & 0x10000000) != 0)) {
        output.writeDouble(51, radarTimestamp_);
      }
      if (((bitField0_ & 0x20000000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 60, vehicleClass_);
      }
      if (((bitField0_ & 0x40000000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 61, vehicleColor_);
      }
      if (((bitField0_ & 0x80000000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 62, vehicleBrand_);
      }
      if (((bitField1_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 63, vehicleModel_);
      }
      if (((bitField1_ & 0x00000002) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 64, vehicleStyles_);
      }
      if (((bitField1_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 65, plateClass_);
      }
      if (((bitField1_ & 0x00000008) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 66, plateColor_);
      }
      if (((bitField1_ & 0x00000010) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 67, plateNo_);
      }
      if (((bitField1_ & 0x00000020) != 0)) {
        output.writeInt32(70, carDirection_);
      }
      if (((bitField1_ & 0x00000040) != 0)) {
        output.writeInt32(71, specialVehicleType_);
      }
      if (((bitField1_ & 0x00000080) != 0)) {
        output.writeUInt32(72, dataSourceIP_);
      }
      if (((bitField1_ & 0x00000100) != 0)) {
        output.writeInt32(73, heading_);
      }
      if (((bitField1_ & 0x00000200) != 0)) {
        output.writeInt32(74, speed_);
      }
      if (((bitField1_ & 0x00000400) != 0)) {
        output.writeMessage(75, getGps());
      }
      if (((bitField1_ & 0x00000800) != 0)) {
        output.writeUInt32(76, speedConfidence_);
      }
      if (((bitField1_ & 0x00001000) != 0)) {
        output.writeUInt32(77, posConfidence_);
      }
      if (((bitField1_ & 0x00002000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 78, targetCameraIP_);
      }
      if (((bitField1_ & 0x00004000) != 0)) {
        output.writeUInt32(79, targetCameraDis_);
      }
      if (((bitField1_ & 0x00008000) != 0)) {
        output.writeMessage(100, getCameraSupplement());
      }
      if (((bitField1_ & 0x00010000) != 0)) {
        output.writeMessage(101, getLidarSupplement());
      }
      if (((bitField1_ & 0x00020000) != 0)) {
        output.writeMessage(102, getRadarSupplement());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, drsuTimestamp_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getCenter());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getEgoCenter());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getDirection());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, theta_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, length_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, width_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, height_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, detConfidence_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(20, objType_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(21, typeProb_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(30, trackId_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(31, getVelocity());
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(32, angularVelocity_);
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(33, getAcceleration());
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(34, detectionTime_);
      }
      if (((bitField0_ & 0x00100000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(35, trackingTime_);
      }
      if (((bitField0_ & 0x00200000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(36, latestTrackedTime_);
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(37, sensorSource_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(38, getVelocityUncertainty());
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(39, getAccelerationUncertainty());
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(40, isValid_);
      }
      if (((bitField0_ & 0x01000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(41, isOnHdmap_);
      }
      if (((bitField0_ & 0x02000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(42, isStationary_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(43, getPositionUncertainty());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < aucLane_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(aucLane_.getInt(i));
        }
        size += dataSize;
        size += 2 * getAucLaneList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < aucHdLane_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(aucHdLane_.getInt(i));
        }
        size += dataSize;
        size += 2 * getAucHdLaneList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < aucHdConnection_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(aucHdConnection_.getInt(i));
        }
        size += dataSize;
        size += 2 * getAucHdConnectionList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < aulCrosswalk_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(aulCrosswalk_.getInt(i));
        }
        size += dataSize;
        size += 2 * getAulCrosswalkList().size();
      }
      for (int i = 0; i < astPixelPointCoordinate_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(48, astPixelPointCoordinate_.get(i));
      }
      if (((bitField0_ & 0x04000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(49, cameraMidTimestamp_);
      }
      if (((bitField0_ & 0x08000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(50, cameraLongTimestamp_);
      }
      if (((bitField0_ & 0x10000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(51, radarTimestamp_);
      }
      if (((bitField0_ & 0x20000000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(60, vehicleClass_);
      }
      if (((bitField0_ & 0x40000000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(61, vehicleColor_);
      }
      if (((bitField0_ & 0x80000000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(62, vehicleBrand_);
      }
      if (((bitField1_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(63, vehicleModel_);
      }
      if (((bitField1_ & 0x00000002) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(64, vehicleStyles_);
      }
      if (((bitField1_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(65, plateClass_);
      }
      if (((bitField1_ & 0x00000008) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(66, plateColor_);
      }
      if (((bitField1_ & 0x00000010) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(67, plateNo_);
      }
      if (((bitField1_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(70, carDirection_);
      }
      if (((bitField1_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(71, specialVehicleType_);
      }
      if (((bitField1_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(72, dataSourceIP_);
      }
      if (((bitField1_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(73, heading_);
      }
      if (((bitField1_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(74, speed_);
      }
      if (((bitField1_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(75, getGps());
      }
      if (((bitField1_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(76, speedConfidence_);
      }
      if (((bitField1_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(77, posConfidence_);
      }
      if (((bitField1_ & 0x00002000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(78, targetCameraIP_);
      }
      if (((bitField1_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(79, targetCameraDis_);
      }
      if (((bitField1_ & 0x00008000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(100, getCameraSupplement());
      }
      if (((bitField1_ & 0x00010000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(101, getLidarSupplement());
      }
      if (((bitField1_ & 0x00020000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(102, getRadarSupplement());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof if_proto_common.BxtObstacleV2.Obstacle)) {
        return super.equals(obj);
      }
      if_proto_common.BxtObstacleV2.Obstacle other = (if_proto_common.BxtObstacleV2.Obstacle) obj;

      if (hasId() != other.hasId()) return false;
      if (hasId()) {
        if (getId()
            != other.getId()) return false;
      }
      if (hasDrsuTimestamp() != other.hasDrsuTimestamp()) return false;
      if (hasDrsuTimestamp()) {
        if (java.lang.Double.doubleToLongBits(getDrsuTimestamp())
            != java.lang.Double.doubleToLongBits(
                other.getDrsuTimestamp())) return false;
      }
      if (hasCenter() != other.hasCenter()) return false;
      if (hasCenter()) {
        if (!getCenter()
            .equals(other.getCenter())) return false;
      }
      if (hasEgoCenter() != other.hasEgoCenter()) return false;
      if (hasEgoCenter()) {
        if (!getEgoCenter()
            .equals(other.getEgoCenter())) return false;
      }
      if (hasDirection() != other.hasDirection()) return false;
      if (hasDirection()) {
        if (!getDirection()
            .equals(other.getDirection())) return false;
      }
      if (hasTheta() != other.hasTheta()) return false;
      if (hasTheta()) {
        if (java.lang.Double.doubleToLongBits(getTheta())
            != java.lang.Double.doubleToLongBits(
                other.getTheta())) return false;
      }
      if (hasLength() != other.hasLength()) return false;
      if (hasLength()) {
        if (java.lang.Double.doubleToLongBits(getLength())
            != java.lang.Double.doubleToLongBits(
                other.getLength())) return false;
      }
      if (hasWidth() != other.hasWidth()) return false;
      if (hasWidth()) {
        if (java.lang.Double.doubleToLongBits(getWidth())
            != java.lang.Double.doubleToLongBits(
                other.getWidth())) return false;
      }
      if (hasHeight() != other.hasHeight()) return false;
      if (hasHeight()) {
        if (java.lang.Double.doubleToLongBits(getHeight())
            != java.lang.Double.doubleToLongBits(
                other.getHeight())) return false;
      }
      if (hasDetConfidence() != other.hasDetConfidence()) return false;
      if (hasDetConfidence()) {
        if (java.lang.Double.doubleToLongBits(getDetConfidence())
            != java.lang.Double.doubleToLongBits(
                other.getDetConfidence())) return false;
      }
      if (hasObjType() != other.hasObjType()) return false;
      if (hasObjType()) {
        if (objType_ != other.objType_) return false;
      }
      if (hasTypeProb() != other.hasTypeProb()) return false;
      if (hasTypeProb()) {
        if (java.lang.Double.doubleToLongBits(getTypeProb())
            != java.lang.Double.doubleToLongBits(
                other.getTypeProb())) return false;
      }
      if (hasTrackId() != other.hasTrackId()) return false;
      if (hasTrackId()) {
        if (getTrackId()
            != other.getTrackId()) return false;
      }
      if (hasPositionUncertainty() != other.hasPositionUncertainty()) return false;
      if (hasPositionUncertainty()) {
        if (!getPositionUncertainty()
            .equals(other.getPositionUncertainty())) return false;
      }
      if (hasVelocity() != other.hasVelocity()) return false;
      if (hasVelocity()) {
        if (!getVelocity()
            .equals(other.getVelocity())) return false;
      }
      if (hasVelocityUncertainty() != other.hasVelocityUncertainty()) return false;
      if (hasVelocityUncertainty()) {
        if (!getVelocityUncertainty()
            .equals(other.getVelocityUncertainty())) return false;
      }
      if (hasAngularVelocity() != other.hasAngularVelocity()) return false;
      if (hasAngularVelocity()) {
        if (java.lang.Double.doubleToLongBits(getAngularVelocity())
            != java.lang.Double.doubleToLongBits(
                other.getAngularVelocity())) return false;
      }
      if (hasAcceleration() != other.hasAcceleration()) return false;
      if (hasAcceleration()) {
        if (!getAcceleration()
            .equals(other.getAcceleration())) return false;
      }
      if (hasAccelerationUncertainty() != other.hasAccelerationUncertainty()) return false;
      if (hasAccelerationUncertainty()) {
        if (!getAccelerationUncertainty()
            .equals(other.getAccelerationUncertainty())) return false;
      }
      if (hasDetectionTime() != other.hasDetectionTime()) return false;
      if (hasDetectionTime()) {
        if (java.lang.Double.doubleToLongBits(getDetectionTime())
            != java.lang.Double.doubleToLongBits(
                other.getDetectionTime())) return false;
      }
      if (hasTrackingTime() != other.hasTrackingTime()) return false;
      if (hasTrackingTime()) {
        if (java.lang.Double.doubleToLongBits(getTrackingTime())
            != java.lang.Double.doubleToLongBits(
                other.getTrackingTime())) return false;
      }
      if (hasLatestTrackedTime() != other.hasLatestTrackedTime()) return false;
      if (hasLatestTrackedTime()) {
        if (java.lang.Double.doubleToLongBits(getLatestTrackedTime())
            != java.lang.Double.doubleToLongBits(
                other.getLatestTrackedTime())) return false;
      }
      if (hasSensorSource() != other.hasSensorSource()) return false;
      if (hasSensorSource()) {
        if (sensorSource_ != other.sensorSource_) return false;
      }
      if (hasIsValid() != other.hasIsValid()) return false;
      if (hasIsValid()) {
        if (getIsValid()
            != other.getIsValid()) return false;
      }
      if (hasIsOnHdmap() != other.hasIsOnHdmap()) return false;
      if (hasIsOnHdmap()) {
        if (getIsOnHdmap()
            != other.getIsOnHdmap()) return false;
      }
      if (hasIsStationary() != other.hasIsStationary()) return false;
      if (hasIsStationary()) {
        if (getIsStationary()
            != other.getIsStationary()) return false;
      }
      if (!getAucLaneList()
          .equals(other.getAucLaneList())) return false;
      if (!getAucHdLaneList()
          .equals(other.getAucHdLaneList())) return false;
      if (!getAucHdConnectionList()
          .equals(other.getAucHdConnectionList())) return false;
      if (!getAulCrosswalkList()
          .equals(other.getAulCrosswalkList())) return false;
      if (!getAstPixelPointCoordinateList()
          .equals(other.getAstPixelPointCoordinateList())) return false;
      if (hasCameraMidTimestamp() != other.hasCameraMidTimestamp()) return false;
      if (hasCameraMidTimestamp()) {
        if (java.lang.Double.doubleToLongBits(getCameraMidTimestamp())
            != java.lang.Double.doubleToLongBits(
                other.getCameraMidTimestamp())) return false;
      }
      if (hasCameraLongTimestamp() != other.hasCameraLongTimestamp()) return false;
      if (hasCameraLongTimestamp()) {
        if (java.lang.Double.doubleToLongBits(getCameraLongTimestamp())
            != java.lang.Double.doubleToLongBits(
                other.getCameraLongTimestamp())) return false;
      }
      if (hasRadarTimestamp() != other.hasRadarTimestamp()) return false;
      if (hasRadarTimestamp()) {
        if (java.lang.Double.doubleToLongBits(getRadarTimestamp())
            != java.lang.Double.doubleToLongBits(
                other.getRadarTimestamp())) return false;
      }
      if (hasVehicleClass() != other.hasVehicleClass()) return false;
      if (hasVehicleClass()) {
        if (!getVehicleClass()
            .equals(other.getVehicleClass())) return false;
      }
      if (hasVehicleColor() != other.hasVehicleColor()) return false;
      if (hasVehicleColor()) {
        if (!getVehicleColor()
            .equals(other.getVehicleColor())) return false;
      }
      if (hasVehicleBrand() != other.hasVehicleBrand()) return false;
      if (hasVehicleBrand()) {
        if (!getVehicleBrand()
            .equals(other.getVehicleBrand())) return false;
      }
      if (hasVehicleModel() != other.hasVehicleModel()) return false;
      if (hasVehicleModel()) {
        if (!getVehicleModel()
            .equals(other.getVehicleModel())) return false;
      }
      if (hasVehicleStyles() != other.hasVehicleStyles()) return false;
      if (hasVehicleStyles()) {
        if (!getVehicleStyles()
            .equals(other.getVehicleStyles())) return false;
      }
      if (hasPlateClass() != other.hasPlateClass()) return false;
      if (hasPlateClass()) {
        if (!getPlateClass()
            .equals(other.getPlateClass())) return false;
      }
      if (hasPlateColor() != other.hasPlateColor()) return false;
      if (hasPlateColor()) {
        if (!getPlateColor()
            .equals(other.getPlateColor())) return false;
      }
      if (hasPlateNo() != other.hasPlateNo()) return false;
      if (hasPlateNo()) {
        if (!getPlateNo()
            .equals(other.getPlateNo())) return false;
      }
      if (hasCarDirection() != other.hasCarDirection()) return false;
      if (hasCarDirection()) {
        if (getCarDirection()
            != other.getCarDirection()) return false;
      }
      if (hasSpecialVehicleType() != other.hasSpecialVehicleType()) return false;
      if (hasSpecialVehicleType()) {
        if (getSpecialVehicleType()
            != other.getSpecialVehicleType()) return false;
      }
      if (hasDataSourceIP() != other.hasDataSourceIP()) return false;
      if (hasDataSourceIP()) {
        if (getDataSourceIP()
            != other.getDataSourceIP()) return false;
      }
      if (hasHeading() != other.hasHeading()) return false;
      if (hasHeading()) {
        if (getHeading()
            != other.getHeading()) return false;
      }
      if (hasSpeed() != other.hasSpeed()) return false;
      if (hasSpeed()) {
        if (getSpeed()
            != other.getSpeed()) return false;
      }
      if (hasGps() != other.hasGps()) return false;
      if (hasGps()) {
        if (!getGps()
            .equals(other.getGps())) return false;
      }
      if (hasSpeedConfidence() != other.hasSpeedConfidence()) return false;
      if (hasSpeedConfidence()) {
        if (getSpeedConfidence()
            != other.getSpeedConfidence()) return false;
      }
      if (hasPosConfidence() != other.hasPosConfidence()) return false;
      if (hasPosConfidence()) {
        if (getPosConfidence()
            != other.getPosConfidence()) return false;
      }
      if (hasTargetCameraIP() != other.hasTargetCameraIP()) return false;
      if (hasTargetCameraIP()) {
        if (!getTargetCameraIP()
            .equals(other.getTargetCameraIP())) return false;
      }
      if (hasTargetCameraDis() != other.hasTargetCameraDis()) return false;
      if (hasTargetCameraDis()) {
        if (getTargetCameraDis()
            != other.getTargetCameraDis()) return false;
      }
      if (hasCameraSupplement() != other.hasCameraSupplement()) return false;
      if (hasCameraSupplement()) {
        if (!getCameraSupplement()
            .equals(other.getCameraSupplement())) return false;
      }
      if (hasLidarSupplement() != other.hasLidarSupplement()) return false;
      if (hasLidarSupplement()) {
        if (!getLidarSupplement()
            .equals(other.getLidarSupplement())) return false;
      }
      if (hasRadarSupplement() != other.hasRadarSupplement()) return false;
      if (hasRadarSupplement()) {
        if (!getRadarSupplement()
            .equals(other.getRadarSupplement())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId();
      }
      if (hasDrsuTimestamp()) {
        hash = (37 * hash) + DRSU_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDrsuTimestamp()));
      }
      if (hasCenter()) {
        hash = (37 * hash) + CENTER_FIELD_NUMBER;
        hash = (53 * hash) + getCenter().hashCode();
      }
      if (hasEgoCenter()) {
        hash = (37 * hash) + EGO_CENTER_FIELD_NUMBER;
        hash = (53 * hash) + getEgoCenter().hashCode();
      }
      if (hasDirection()) {
        hash = (37 * hash) + DIRECTION_FIELD_NUMBER;
        hash = (53 * hash) + getDirection().hashCode();
      }
      if (hasTheta()) {
        hash = (37 * hash) + THETA_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getTheta()));
      }
      if (hasLength()) {
        hash = (37 * hash) + LENGTH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getLength()));
      }
      if (hasWidth()) {
        hash = (37 * hash) + WIDTH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getWidth()));
      }
      if (hasHeight()) {
        hash = (37 * hash) + HEIGHT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getHeight()));
      }
      if (hasDetConfidence()) {
        hash = (37 * hash) + DET_CONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDetConfidence()));
      }
      if (hasObjType()) {
        hash = (37 * hash) + OBJ_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + objType_;
      }
      if (hasTypeProb()) {
        hash = (37 * hash) + TYPE_PROB_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getTypeProb()));
      }
      if (hasTrackId()) {
        hash = (37 * hash) + TRACK_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTrackId();
      }
      if (hasPositionUncertainty()) {
        hash = (37 * hash) + POSITION_UNCERTAINTY_FIELD_NUMBER;
        hash = (53 * hash) + getPositionUncertainty().hashCode();
      }
      if (hasVelocity()) {
        hash = (37 * hash) + VELOCITY_FIELD_NUMBER;
        hash = (53 * hash) + getVelocity().hashCode();
      }
      if (hasVelocityUncertainty()) {
        hash = (37 * hash) + VELOCITY_UNCERTAINTY_FIELD_NUMBER;
        hash = (53 * hash) + getVelocityUncertainty().hashCode();
      }
      if (hasAngularVelocity()) {
        hash = (37 * hash) + ANGULAR_VELOCITY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getAngularVelocity()));
      }
      if (hasAcceleration()) {
        hash = (37 * hash) + ACCELERATION_FIELD_NUMBER;
        hash = (53 * hash) + getAcceleration().hashCode();
      }
      if (hasAccelerationUncertainty()) {
        hash = (37 * hash) + ACCELERATION_UNCERTAINTY_FIELD_NUMBER;
        hash = (53 * hash) + getAccelerationUncertainty().hashCode();
      }
      if (hasDetectionTime()) {
        hash = (37 * hash) + DETECTION_TIME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDetectionTime()));
      }
      if (hasTrackingTime()) {
        hash = (37 * hash) + TRACKING_TIME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getTrackingTime()));
      }
      if (hasLatestTrackedTime()) {
        hash = (37 * hash) + LATEST_TRACKED_TIME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getLatestTrackedTime()));
      }
      if (hasSensorSource()) {
        hash = (37 * hash) + SENSOR_SOURCE_FIELD_NUMBER;
        hash = (53 * hash) + sensorSource_;
      }
      if (hasIsValid()) {
        hash = (37 * hash) + IS_VALID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsValid());
      }
      if (hasIsOnHdmap()) {
        hash = (37 * hash) + IS_ON_HDMAP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsOnHdmap());
      }
      if (hasIsStationary()) {
        hash = (37 * hash) + IS_STATIONARY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsStationary());
      }
      if (getAucLaneCount() > 0) {
        hash = (37 * hash) + AUCLANE_FIELD_NUMBER;
        hash = (53 * hash) + getAucLaneList().hashCode();
      }
      if (getAucHdLaneCount() > 0) {
        hash = (37 * hash) + AUCHDLANE_FIELD_NUMBER;
        hash = (53 * hash) + getAucHdLaneList().hashCode();
      }
      if (getAucHdConnectionCount() > 0) {
        hash = (37 * hash) + AUCHDCONNECTION_FIELD_NUMBER;
        hash = (53 * hash) + getAucHdConnectionList().hashCode();
      }
      if (getAulCrosswalkCount() > 0) {
        hash = (37 * hash) + AULCROSSWALK_FIELD_NUMBER;
        hash = (53 * hash) + getAulCrosswalkList().hashCode();
      }
      if (getAstPixelPointCoordinateCount() > 0) {
        hash = (37 * hash) + ASTPIXELPOINTCOORDINATE_FIELD_NUMBER;
        hash = (53 * hash) + getAstPixelPointCoordinateList().hashCode();
      }
      if (hasCameraMidTimestamp()) {
        hash = (37 * hash) + CAMERA_MID_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getCameraMidTimestamp()));
      }
      if (hasCameraLongTimestamp()) {
        hash = (37 * hash) + CAMERA_LONG_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getCameraLongTimestamp()));
      }
      if (hasRadarTimestamp()) {
        hash = (37 * hash) + RADAR_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getRadarTimestamp()));
      }
      if (hasVehicleClass()) {
        hash = (37 * hash) + VEHICLECLASS_FIELD_NUMBER;
        hash = (53 * hash) + getVehicleClass().hashCode();
      }
      if (hasVehicleColor()) {
        hash = (37 * hash) + VEHICLECOLOR_FIELD_NUMBER;
        hash = (53 * hash) + getVehicleColor().hashCode();
      }
      if (hasVehicleBrand()) {
        hash = (37 * hash) + VEHICLEBRAND_FIELD_NUMBER;
        hash = (53 * hash) + getVehicleBrand().hashCode();
      }
      if (hasVehicleModel()) {
        hash = (37 * hash) + VEHICLEMODEL_FIELD_NUMBER;
        hash = (53 * hash) + getVehicleModel().hashCode();
      }
      if (hasVehicleStyles()) {
        hash = (37 * hash) + VEHICLESTYLES_FIELD_NUMBER;
        hash = (53 * hash) + getVehicleStyles().hashCode();
      }
      if (hasPlateClass()) {
        hash = (37 * hash) + PLATECLASS_FIELD_NUMBER;
        hash = (53 * hash) + getPlateClass().hashCode();
      }
      if (hasPlateColor()) {
        hash = (37 * hash) + PLATECOLOR_FIELD_NUMBER;
        hash = (53 * hash) + getPlateColor().hashCode();
      }
      if (hasPlateNo()) {
        hash = (37 * hash) + PLATENO_FIELD_NUMBER;
        hash = (53 * hash) + getPlateNo().hashCode();
      }
      if (hasCarDirection()) {
        hash = (37 * hash) + CARDIRECTION_FIELD_NUMBER;
        hash = (53 * hash) + getCarDirection();
      }
      if (hasSpecialVehicleType()) {
        hash = (37 * hash) + SPECIALVEHICLETYPE_FIELD_NUMBER;
        hash = (53 * hash) + getSpecialVehicleType();
      }
      if (hasDataSourceIP()) {
        hash = (37 * hash) + DATASOURCEIP_FIELD_NUMBER;
        hash = (53 * hash) + getDataSourceIP();
      }
      if (hasHeading()) {
        hash = (37 * hash) + HEADING_FIELD_NUMBER;
        hash = (53 * hash) + getHeading();
      }
      if (hasSpeed()) {
        hash = (37 * hash) + SPEED_FIELD_NUMBER;
        hash = (53 * hash) + getSpeed();
      }
      if (hasGps()) {
        hash = (37 * hash) + GPS_FIELD_NUMBER;
        hash = (53 * hash) + getGps().hashCode();
      }
      if (hasSpeedConfidence()) {
        hash = (37 * hash) + SPEEDCONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + getSpeedConfidence();
      }
      if (hasPosConfidence()) {
        hash = (37 * hash) + POSCONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + getPosConfidence();
      }
      if (hasTargetCameraIP()) {
        hash = (37 * hash) + TARGETCAMERAIP_FIELD_NUMBER;
        hash = (53 * hash) + getTargetCameraIP().hashCode();
      }
      if (hasTargetCameraDis()) {
        hash = (37 * hash) + TARGETCAMERADIS_FIELD_NUMBER;
        hash = (53 * hash) + getTargetCameraDis();
      }
      if (hasCameraSupplement()) {
        hash = (37 * hash) + CAMERA_SUPPLEMENT_FIELD_NUMBER;
        hash = (53 * hash) + getCameraSupplement().hashCode();
      }
      if (hasLidarSupplement()) {
        hash = (37 * hash) + LIDAR_SUPPLEMENT_FIELD_NUMBER;
        hash = (53 * hash) + getLidarSupplement().hashCode();
      }
      if (hasRadarSupplement()) {
        hash = (37 * hash) + RADAR_SUPPLEMENT_FIELD_NUMBER;
        hash = (53 * hash) + getRadarSupplement().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static if_proto_common.BxtObstacleV2.Obstacle parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.Obstacle parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Obstacle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.Obstacle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Obstacle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.Obstacle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Obstacle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.Obstacle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Obstacle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.Obstacle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Obstacle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.Obstacle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(if_proto_common.BxtObstacleV2.Obstacle prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Next id is 41
     * </pre>
     *
     * Protobuf type {@code if_proto_common.Obstacle}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:if_proto_common.Obstacle)
        if_proto_common.BxtObstacleV2.ObstacleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Obstacle_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Obstacle_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                if_proto_common.BxtObstacleV2.Obstacle.class, if_proto_common.BxtObstacleV2.Obstacle.Builder.class);
      }

      // Construct using if_proto_common.BxtObstacleV2.Obstacle.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCenterFieldBuilder();
          getEgoCenterFieldBuilder();
          getDirectionFieldBuilder();
          getPositionUncertaintyFieldBuilder();
          getVelocityFieldBuilder();
          getVelocityUncertaintyFieldBuilder();
          getAccelerationFieldBuilder();
          getAccelerationUncertaintyFieldBuilder();
          getAstPixelPointCoordinateFieldBuilder();
          getGpsFieldBuilder();
          getCameraSupplementFieldBuilder();
          getLidarSupplementFieldBuilder();
          getRadarSupplementFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        drsuTimestamp_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (centerBuilder_ == null) {
          center_ = null;
        } else {
          centerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (egoCenterBuilder_ == null) {
          egoCenter_ = null;
        } else {
          egoCenterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (directionBuilder_ == null) {
          direction_ = null;
        } else {
          directionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        theta_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        length_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        width_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        height_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        detConfidence_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000200);
        objType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        typeProb_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000800);
        trackId_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        if (positionUncertaintyBuilder_ == null) {
          positionUncertainty_ = null;
        } else {
          positionUncertaintyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        if (velocityBuilder_ == null) {
          velocity_ = null;
        } else {
          velocityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        if (velocityUncertaintyBuilder_ == null) {
          velocityUncertainty_ = null;
        } else {
          velocityUncertaintyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        angularVelocity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00010000);
        if (accelerationBuilder_ == null) {
          acceleration_ = null;
        } else {
          accelerationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        if (accelerationUncertaintyBuilder_ == null) {
          accelerationUncertainty_ = null;
        } else {
          accelerationUncertaintyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        detectionTime_ = 0D;
        bitField0_ = (bitField0_ & ~0x00080000);
        trackingTime_ = 0D;
        bitField0_ = (bitField0_ & ~0x00100000);
        latestTrackedTime_ = 0D;
        bitField0_ = (bitField0_ & ~0x00200000);
        sensorSource_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        isValid_ = true;
        bitField0_ = (bitField0_ & ~0x00800000);
        isOnHdmap_ = false;
        bitField0_ = (bitField0_ & ~0x01000000);
        isStationary_ = false;
        bitField0_ = (bitField0_ & ~0x02000000);
        aucLane_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x04000000);
        aucHdLane_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x08000000);
        aucHdConnection_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x10000000);
        aulCrosswalk_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x20000000);
        if (astPixelPointCoordinateBuilder_ == null) {
          astPixelPointCoordinate_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x40000000);
        } else {
          astPixelPointCoordinateBuilder_.clear();
        }
        cameraMidTimestamp_ = 0D;
        bitField0_ = (bitField0_ & ~0x80000000);
        cameraLongTimestamp_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000001);
        radarTimestamp_ = 0D;
        bitField1_ = (bitField1_ & ~0x00000002);
        vehicleClass_ = "";
        bitField1_ = (bitField1_ & ~0x00000004);
        vehicleColor_ = "";
        bitField1_ = (bitField1_ & ~0x00000008);
        vehicleBrand_ = "";
        bitField1_ = (bitField1_ & ~0x00000010);
        vehicleModel_ = "";
        bitField1_ = (bitField1_ & ~0x00000020);
        vehicleStyles_ = "";
        bitField1_ = (bitField1_ & ~0x00000040);
        plateClass_ = "";
        bitField1_ = (bitField1_ & ~0x00000080);
        plateColor_ = "";
        bitField1_ = (bitField1_ & ~0x00000100);
        plateNo_ = "";
        bitField1_ = (bitField1_ & ~0x00000200);
        carDirection_ = 0;
        bitField1_ = (bitField1_ & ~0x00000400);
        specialVehicleType_ = 0;
        bitField1_ = (bitField1_ & ~0x00000800);
        dataSourceIP_ = 0;
        bitField1_ = (bitField1_ & ~0x00001000);
        heading_ = 0;
        bitField1_ = (bitField1_ & ~0x00002000);
        speed_ = 0;
        bitField1_ = (bitField1_ & ~0x00004000);
        if (gpsBuilder_ == null) {
          gps_ = null;
        } else {
          gpsBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00008000);
        speedConfidence_ = 0;
        bitField1_ = (bitField1_ & ~0x00010000);
        posConfidence_ = 0;
        bitField1_ = (bitField1_ & ~0x00020000);
        targetCameraIP_ = "";
        bitField1_ = (bitField1_ & ~0x00040000);
        targetCameraDis_ = 0;
        bitField1_ = (bitField1_ & ~0x00080000);
        if (cameraSupplementBuilder_ == null) {
          cameraSupplement_ = null;
        } else {
          cameraSupplementBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00100000);
        if (lidarSupplementBuilder_ == null) {
          lidarSupplement_ = null;
        } else {
          lidarSupplementBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00200000);
        if (radarSupplementBuilder_ == null) {
          radarSupplement_ = null;
        } else {
          radarSupplementBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00400000);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Obstacle_descriptor;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.Obstacle getDefaultInstanceForType() {
        return if_proto_common.BxtObstacleV2.Obstacle.getDefaultInstance();
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.Obstacle build() {
        if_proto_common.BxtObstacleV2.Obstacle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.Obstacle buildPartial() {
        if_proto_common.BxtObstacleV2.Obstacle result = new if_proto_common.BxtObstacleV2.Obstacle(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.id_ = id_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.drsuTimestamp_ = drsuTimestamp_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          if (centerBuilder_ == null) {
            result.center_ = center_;
          } else {
            result.center_ = centerBuilder_.build();
          }
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          if (egoCenterBuilder_ == null) {
            result.egoCenter_ = egoCenter_;
          } else {
            result.egoCenter_ = egoCenterBuilder_.build();
          }
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          if (directionBuilder_ == null) {
            result.direction_ = direction_;
          } else {
            result.direction_ = directionBuilder_.build();
          }
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.theta_ = theta_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.length_ = length_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.width_ = width_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.height_ = height_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.detConfidence_ = detConfidence_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          to_bitField0_ |= 0x00000400;
        }
        result.objType_ = objType_;
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.typeProb_ = typeProb_;
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.trackId_ = trackId_;
          to_bitField0_ |= 0x00001000;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          if (positionUncertaintyBuilder_ == null) {
            result.positionUncertainty_ = positionUncertainty_;
          } else {
            result.positionUncertainty_ = positionUncertaintyBuilder_.build();
          }
          to_bitField0_ |= 0x00002000;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          if (velocityBuilder_ == null) {
            result.velocity_ = velocity_;
          } else {
            result.velocity_ = velocityBuilder_.build();
          }
          to_bitField0_ |= 0x00004000;
        }
        if (((from_bitField0_ & 0x00008000) != 0)) {
          if (velocityUncertaintyBuilder_ == null) {
            result.velocityUncertainty_ = velocityUncertainty_;
          } else {
            result.velocityUncertainty_ = velocityUncertaintyBuilder_.build();
          }
          to_bitField0_ |= 0x00008000;
        }
        if (((from_bitField0_ & 0x00010000) != 0)) {
          result.angularVelocity_ = angularVelocity_;
          to_bitField0_ |= 0x00010000;
        }
        if (((from_bitField0_ & 0x00020000) != 0)) {
          if (accelerationBuilder_ == null) {
            result.acceleration_ = acceleration_;
          } else {
            result.acceleration_ = accelerationBuilder_.build();
          }
          to_bitField0_ |= 0x00020000;
        }
        if (((from_bitField0_ & 0x00040000) != 0)) {
          if (accelerationUncertaintyBuilder_ == null) {
            result.accelerationUncertainty_ = accelerationUncertainty_;
          } else {
            result.accelerationUncertainty_ = accelerationUncertaintyBuilder_.build();
          }
          to_bitField0_ |= 0x00040000;
        }
        if (((from_bitField0_ & 0x00080000) != 0)) {
          result.detectionTime_ = detectionTime_;
          to_bitField0_ |= 0x00080000;
        }
        if (((from_bitField0_ & 0x00100000) != 0)) {
          result.trackingTime_ = trackingTime_;
          to_bitField0_ |= 0x00100000;
        }
        if (((from_bitField0_ & 0x00200000) != 0)) {
          result.latestTrackedTime_ = latestTrackedTime_;
          to_bitField0_ |= 0x00200000;
        }
        if (((from_bitField0_ & 0x00400000) != 0)) {
          to_bitField0_ |= 0x00400000;
        }
        result.sensorSource_ = sensorSource_;
        if (((from_bitField0_ & 0x00800000) != 0)) {
          to_bitField0_ |= 0x00800000;
        }
        result.isValid_ = isValid_;
        if (((from_bitField0_ & 0x01000000) != 0)) {
          result.isOnHdmap_ = isOnHdmap_;
          to_bitField0_ |= 0x01000000;
        }
        if (((from_bitField0_ & 0x02000000) != 0)) {
          result.isStationary_ = isStationary_;
          to_bitField0_ |= 0x02000000;
        }
        if (((bitField0_ & 0x04000000) != 0)) {
          aucLane_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x04000000);
        }
        result.aucLane_ = aucLane_;
        if (((bitField0_ & 0x08000000) != 0)) {
          aucHdLane_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x08000000);
        }
        result.aucHdLane_ = aucHdLane_;
        if (((bitField0_ & 0x10000000) != 0)) {
          aucHdConnection_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x10000000);
        }
        result.aucHdConnection_ = aucHdConnection_;
        if (((bitField0_ & 0x20000000) != 0)) {
          aulCrosswalk_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x20000000);
        }
        result.aulCrosswalk_ = aulCrosswalk_;
        if (astPixelPointCoordinateBuilder_ == null) {
          if (((bitField0_ & 0x40000000) != 0)) {
            astPixelPointCoordinate_ = java.util.Collections.unmodifiableList(astPixelPointCoordinate_);
            bitField0_ = (bitField0_ & ~0x40000000);
          }
          result.astPixelPointCoordinate_ = astPixelPointCoordinate_;
        } else {
          result.astPixelPointCoordinate_ = astPixelPointCoordinateBuilder_.build();
        }
        if (((from_bitField0_ & 0x80000000) != 0)) {
          result.cameraMidTimestamp_ = cameraMidTimestamp_;
          to_bitField0_ |= 0x04000000;
        }
        if (((from_bitField1_ & 0x00000001) != 0)) {
          result.cameraLongTimestamp_ = cameraLongTimestamp_;
          to_bitField0_ |= 0x08000000;
        }
        if (((from_bitField1_ & 0x00000002) != 0)) {
          result.radarTimestamp_ = radarTimestamp_;
          to_bitField0_ |= 0x10000000;
        }
        if (((from_bitField1_ & 0x00000004) != 0)) {
          to_bitField0_ |= 0x20000000;
        }
        result.vehicleClass_ = vehicleClass_;
        if (((from_bitField1_ & 0x00000008) != 0)) {
          to_bitField0_ |= 0x40000000;
        }
        result.vehicleColor_ = vehicleColor_;
        if (((from_bitField1_ & 0x00000010) != 0)) {
          to_bitField0_ |= 0x80000000;
        }
        result.vehicleBrand_ = vehicleBrand_;
        if (((from_bitField1_ & 0x00000020) != 0)) {
          to_bitField1_ |= 0x00000001;
        }
        result.vehicleModel_ = vehicleModel_;
        if (((from_bitField1_ & 0x00000040) != 0)) {
          to_bitField1_ |= 0x00000002;
        }
        result.vehicleStyles_ = vehicleStyles_;
        if (((from_bitField1_ & 0x00000080) != 0)) {
          to_bitField1_ |= 0x00000004;
        }
        result.plateClass_ = plateClass_;
        if (((from_bitField1_ & 0x00000100) != 0)) {
          to_bitField1_ |= 0x00000008;
        }
        result.plateColor_ = plateColor_;
        if (((from_bitField1_ & 0x00000200) != 0)) {
          to_bitField1_ |= 0x00000010;
        }
        result.plateNo_ = plateNo_;
        if (((from_bitField1_ & 0x00000400) != 0)) {
          result.carDirection_ = carDirection_;
          to_bitField1_ |= 0x00000020;
        }
        if (((from_bitField1_ & 0x00000800) != 0)) {
          result.specialVehicleType_ = specialVehicleType_;
          to_bitField1_ |= 0x00000040;
        }
        if (((from_bitField1_ & 0x00001000) != 0)) {
          result.dataSourceIP_ = dataSourceIP_;
          to_bitField1_ |= 0x00000080;
        }
        if (((from_bitField1_ & 0x00002000) != 0)) {
          result.heading_ = heading_;
          to_bitField1_ |= 0x00000100;
        }
        if (((from_bitField1_ & 0x00004000) != 0)) {
          result.speed_ = speed_;
          to_bitField1_ |= 0x00000200;
        }
        if (((from_bitField1_ & 0x00008000) != 0)) {
          if (gpsBuilder_ == null) {
            result.gps_ = gps_;
          } else {
            result.gps_ = gpsBuilder_.build();
          }
          to_bitField1_ |= 0x00000400;
        }
        if (((from_bitField1_ & 0x00010000) != 0)) {
          result.speedConfidence_ = speedConfidence_;
          to_bitField1_ |= 0x00000800;
        }
        if (((from_bitField1_ & 0x00020000) != 0)) {
          result.posConfidence_ = posConfidence_;
          to_bitField1_ |= 0x00001000;
        }
        if (((from_bitField1_ & 0x00040000) != 0)) {
          to_bitField1_ |= 0x00002000;
        }
        result.targetCameraIP_ = targetCameraIP_;
        if (((from_bitField1_ & 0x00080000) != 0)) {
          result.targetCameraDis_ = targetCameraDis_;
          to_bitField1_ |= 0x00004000;
        }
        if (((from_bitField1_ & 0x00100000) != 0)) {
          if (cameraSupplementBuilder_ == null) {
            result.cameraSupplement_ = cameraSupplement_;
          } else {
            result.cameraSupplement_ = cameraSupplementBuilder_.build();
          }
          to_bitField1_ |= 0x00008000;
        }
        if (((from_bitField1_ & 0x00200000) != 0)) {
          if (lidarSupplementBuilder_ == null) {
            result.lidarSupplement_ = lidarSupplement_;
          } else {
            result.lidarSupplement_ = lidarSupplementBuilder_.build();
          }
          to_bitField1_ |= 0x00010000;
        }
        if (((from_bitField1_ & 0x00400000) != 0)) {
          if (radarSupplementBuilder_ == null) {
            result.radarSupplement_ = radarSupplement_;
          } else {
            result.radarSupplement_ = radarSupplementBuilder_.build();
          }
          to_bitField1_ |= 0x00020000;
        }
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof if_proto_common.BxtObstacleV2.Obstacle) {
          return mergeFrom((if_proto_common.BxtObstacleV2.Obstacle)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(if_proto_common.BxtObstacleV2.Obstacle other) {
        if (other == if_proto_common.BxtObstacleV2.Obstacle.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasDrsuTimestamp()) {
          setDrsuTimestamp(other.getDrsuTimestamp());
        }
        if (other.hasCenter()) {
          mergeCenter(other.getCenter());
        }
        if (other.hasEgoCenter()) {
          mergeEgoCenter(other.getEgoCenter());
        }
        if (other.hasDirection()) {
          mergeDirection(other.getDirection());
        }
        if (other.hasTheta()) {
          setTheta(other.getTheta());
        }
        if (other.hasLength()) {
          setLength(other.getLength());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasDetConfidence()) {
          setDetConfidence(other.getDetConfidence());
        }
        if (other.hasObjType()) {
          setObjType(other.getObjType());
        }
        if (other.hasTypeProb()) {
          setTypeProb(other.getTypeProb());
        }
        if (other.hasTrackId()) {
          setTrackId(other.getTrackId());
        }
        if (other.hasPositionUncertainty()) {
          mergePositionUncertainty(other.getPositionUncertainty());
        }
        if (other.hasVelocity()) {
          mergeVelocity(other.getVelocity());
        }
        if (other.hasVelocityUncertainty()) {
          mergeVelocityUncertainty(other.getVelocityUncertainty());
        }
        if (other.hasAngularVelocity()) {
          setAngularVelocity(other.getAngularVelocity());
        }
        if (other.hasAcceleration()) {
          mergeAcceleration(other.getAcceleration());
        }
        if (other.hasAccelerationUncertainty()) {
          mergeAccelerationUncertainty(other.getAccelerationUncertainty());
        }
        if (other.hasDetectionTime()) {
          setDetectionTime(other.getDetectionTime());
        }
        if (other.hasTrackingTime()) {
          setTrackingTime(other.getTrackingTime());
        }
        if (other.hasLatestTrackedTime()) {
          setLatestTrackedTime(other.getLatestTrackedTime());
        }
        if (other.hasSensorSource()) {
          setSensorSource(other.getSensorSource());
        }
        if (other.hasIsValid()) {
          setIsValid(other.getIsValid());
        }
        if (other.hasIsOnHdmap()) {
          setIsOnHdmap(other.getIsOnHdmap());
        }
        if (other.hasIsStationary()) {
          setIsStationary(other.getIsStationary());
        }
        if (!other.aucLane_.isEmpty()) {
          if (aucLane_.isEmpty()) {
            aucLane_ = other.aucLane_;
            bitField0_ = (bitField0_ & ~0x04000000);
          } else {
            ensureAucLaneIsMutable();
            aucLane_.addAll(other.aucLane_);
          }
          onChanged();
        }
        if (!other.aucHdLane_.isEmpty()) {
          if (aucHdLane_.isEmpty()) {
            aucHdLane_ = other.aucHdLane_;
            bitField0_ = (bitField0_ & ~0x08000000);
          } else {
            ensureAucHdLaneIsMutable();
            aucHdLane_.addAll(other.aucHdLane_);
          }
          onChanged();
        }
        if (!other.aucHdConnection_.isEmpty()) {
          if (aucHdConnection_.isEmpty()) {
            aucHdConnection_ = other.aucHdConnection_;
            bitField0_ = (bitField0_ & ~0x10000000);
          } else {
            ensureAucHdConnectionIsMutable();
            aucHdConnection_.addAll(other.aucHdConnection_);
          }
          onChanged();
        }
        if (!other.aulCrosswalk_.isEmpty()) {
          if (aulCrosswalk_.isEmpty()) {
            aulCrosswalk_ = other.aulCrosswalk_;
            bitField0_ = (bitField0_ & ~0x20000000);
          } else {
            ensureAulCrosswalkIsMutable();
            aulCrosswalk_.addAll(other.aulCrosswalk_);
          }
          onChanged();
        }
        if (astPixelPointCoordinateBuilder_ == null) {
          if (!other.astPixelPointCoordinate_.isEmpty()) {
            if (astPixelPointCoordinate_.isEmpty()) {
              astPixelPointCoordinate_ = other.astPixelPointCoordinate_;
              bitField0_ = (bitField0_ & ~0x40000000);
            } else {
              ensureAstPixelPointCoordinateIsMutable();
              astPixelPointCoordinate_.addAll(other.astPixelPointCoordinate_);
            }
            onChanged();
          }
        } else {
          if (!other.astPixelPointCoordinate_.isEmpty()) {
            if (astPixelPointCoordinateBuilder_.isEmpty()) {
              astPixelPointCoordinateBuilder_.dispose();
              astPixelPointCoordinateBuilder_ = null;
              astPixelPointCoordinate_ = other.astPixelPointCoordinate_;
              bitField0_ = (bitField0_ & ~0x40000000);
              astPixelPointCoordinateBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getAstPixelPointCoordinateFieldBuilder() : null;
            } else {
              astPixelPointCoordinateBuilder_.addAllMessages(other.astPixelPointCoordinate_);
            }
          }
        }
        if (other.hasCameraMidTimestamp()) {
          setCameraMidTimestamp(other.getCameraMidTimestamp());
        }
        if (other.hasCameraLongTimestamp()) {
          setCameraLongTimestamp(other.getCameraLongTimestamp());
        }
        if (other.hasRadarTimestamp()) {
          setRadarTimestamp(other.getRadarTimestamp());
        }
        if (other.hasVehicleClass()) {
          bitField1_ |= 0x00000004;
          vehicleClass_ = other.vehicleClass_;
          onChanged();
        }
        if (other.hasVehicleColor()) {
          bitField1_ |= 0x00000008;
          vehicleColor_ = other.vehicleColor_;
          onChanged();
        }
        if (other.hasVehicleBrand()) {
          bitField1_ |= 0x00000010;
          vehicleBrand_ = other.vehicleBrand_;
          onChanged();
        }
        if (other.hasVehicleModel()) {
          bitField1_ |= 0x00000020;
          vehicleModel_ = other.vehicleModel_;
          onChanged();
        }
        if (other.hasVehicleStyles()) {
          bitField1_ |= 0x00000040;
          vehicleStyles_ = other.vehicleStyles_;
          onChanged();
        }
        if (other.hasPlateClass()) {
          bitField1_ |= 0x00000080;
          plateClass_ = other.plateClass_;
          onChanged();
        }
        if (other.hasPlateColor()) {
          bitField1_ |= 0x00000100;
          plateColor_ = other.plateColor_;
          onChanged();
        }
        if (other.hasPlateNo()) {
          bitField1_ |= 0x00000200;
          plateNo_ = other.plateNo_;
          onChanged();
        }
        if (other.hasCarDirection()) {
          setCarDirection(other.getCarDirection());
        }
        if (other.hasSpecialVehicleType()) {
          setSpecialVehicleType(other.getSpecialVehicleType());
        }
        if (other.hasDataSourceIP()) {
          setDataSourceIP(other.getDataSourceIP());
        }
        if (other.hasHeading()) {
          setHeading(other.getHeading());
        }
        if (other.hasSpeed()) {
          setSpeed(other.getSpeed());
        }
        if (other.hasGps()) {
          mergeGps(other.getGps());
        }
        if (other.hasSpeedConfidence()) {
          setSpeedConfidence(other.getSpeedConfidence());
        }
        if (other.hasPosConfidence()) {
          setPosConfidence(other.getPosConfidence());
        }
        if (other.hasTargetCameraIP()) {
          bitField1_ |= 0x00040000;
          targetCameraIP_ = other.targetCameraIP_;
          onChanged();
        }
        if (other.hasTargetCameraDis()) {
          setTargetCameraDis(other.getTargetCameraDis());
        }
        if (other.hasCameraSupplement()) {
          mergeCameraSupplement(other.getCameraSupplement());
        }
        if (other.hasLidarSupplement()) {
          mergeLidarSupplement(other.getLidarSupplement());
        }
        if (other.hasRadarSupplement()) {
          mergeRadarSupplement(other.getRadarSupplement());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if_proto_common.BxtObstacleV2.Obstacle parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (if_proto_common.BxtObstacleV2.Obstacle) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private int id_ ;
      /**
       * <pre>
       * ======= Detection =======
       * obstacle ID.
       * </pre>
       *
       * <code>optional int32 id = 1;</code>
       * @return Whether the id field is set.
       */
      @java.lang.Override
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * ======= Detection =======
       * obstacle ID.
       * </pre>
       *
       * <code>optional int32 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public int getId() {
        return id_;
      }
      /**
       * <pre>
       * ======= Detection =======
       * obstacle ID.
       * </pre>
       *
       * <code>optional int32 id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ======= Detection =======
       * obstacle ID.
       * </pre>
       *
       * <code>optional int32 id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private double drsuTimestamp_ ;
      /**
       * <pre>
       * GPS time in seconds.
       * </pre>
       *
       * <code>optional double drsu_timestamp = 2;</code>
       * @return Whether the drsuTimestamp field is set.
       */
      @java.lang.Override
      public boolean hasDrsuTimestamp() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * GPS time in seconds.
       * </pre>
       *
       * <code>optional double drsu_timestamp = 2;</code>
       * @return The drsuTimestamp.
       */
      @java.lang.Override
      public double getDrsuTimestamp() {
        return drsuTimestamp_;
      }
      /**
       * <pre>
       * GPS time in seconds.
       * </pre>
       *
       * <code>optional double drsu_timestamp = 2;</code>
       * @param value The drsuTimestamp to set.
       * @return This builder for chaining.
       */
      public Builder setDrsuTimestamp(double value) {
        bitField0_ |= 0x00000002;
        drsuTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * GPS time in seconds.
       * </pre>
       *
       * <code>optional double drsu_timestamp = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDrsuTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000002);
        drsuTimestamp_ = 0D;
        onChanged();
        return this;
      }

      private if_proto_common.BxtCommonMathVector3D.Vector3d center_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder> centerBuilder_;
      /**
       * <pre>
       * utm center of the object (cx, cy, z_min)
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d center = 3;</code>
       * @return Whether the center field is set.
       */
      public boolean hasCenter() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * utm center of the object (cx, cy, z_min)
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d center = 3;</code>
       * @return The center.
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3d getCenter() {
        if (centerBuilder_ == null) {
          return center_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : center_;
        } else {
          return centerBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * utm center of the object (cx, cy, z_min)
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d center = 3;</code>
       */
      public Builder setCenter(if_proto_common.BxtCommonMathVector3D.Vector3d value) {
        if (centerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          center_ = value;
          onChanged();
        } else {
          centerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * utm center of the object (cx, cy, z_min)
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d center = 3;</code>
       */
      public Builder setCenter(
          if_proto_common.BxtCommonMathVector3D.Vector3d.Builder builderForValue) {
        if (centerBuilder_ == null) {
          center_ = builderForValue.build();
          onChanged();
        } else {
          centerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * utm center of the object (cx, cy, z_min)
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d center = 3;</code>
       */
      public Builder mergeCenter(if_proto_common.BxtCommonMathVector3D.Vector3d value) {
        if (centerBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
              center_ != null &&
              center_ != if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance()) {
            center_ =
              if_proto_common.BxtCommonMathVector3D.Vector3d.newBuilder(center_).mergeFrom(value).buildPartial();
          } else {
            center_ = value;
          }
          onChanged();
        } else {
          centerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * utm center of the object (cx, cy, z_min)
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d center = 3;</code>
       */
      public Builder clearCenter() {
        if (centerBuilder_ == null) {
          center_ = null;
          onChanged();
        } else {
          centerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <pre>
       * utm center of the object (cx, cy, z_min)
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d center = 3;</code>
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3d.Builder getCenterBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getCenterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * utm center of the object (cx, cy, z_min)
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d center = 3;</code>
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getCenterOrBuilder() {
        if (centerBuilder_ != null) {
          return centerBuilder_.getMessageOrBuilder();
        } else {
          return center_ == null ?
              if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : center_;
        }
      }
      /**
       * <pre>
       * utm center of the object (cx, cy, z_min)
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d center = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder> 
          getCenterFieldBuilder() {
        if (centerBuilder_ == null) {
          centerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder>(
                  getCenter(),
                  getParentForChildren(),
                  isClean());
          center_ = null;
        }
        return centerBuilder_;
      }

      private if_proto_common.BxtCommonMathVector3D.Vector3d egoCenter_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder> egoCenterBuilder_;
      /**
       * <pre>
       * ego center of the object
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
       * @return Whether the egoCenter field is set.
       */
      public boolean hasEgoCenter() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * ego center of the object
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
       * @return The egoCenter.
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3d getEgoCenter() {
        if (egoCenterBuilder_ == null) {
          return egoCenter_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : egoCenter_;
        } else {
          return egoCenterBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * ego center of the object
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
       */
      public Builder setEgoCenter(if_proto_common.BxtCommonMathVector3D.Vector3d value) {
        if (egoCenterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          egoCenter_ = value;
          onChanged();
        } else {
          egoCenterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * ego center of the object
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
       */
      public Builder setEgoCenter(
          if_proto_common.BxtCommonMathVector3D.Vector3d.Builder builderForValue) {
        if (egoCenterBuilder_ == null) {
          egoCenter_ = builderForValue.build();
          onChanged();
        } else {
          egoCenterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * ego center of the object
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
       */
      public Builder mergeEgoCenter(if_proto_common.BxtCommonMathVector3D.Vector3d value) {
        if (egoCenterBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
              egoCenter_ != null &&
              egoCenter_ != if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance()) {
            egoCenter_ =
              if_proto_common.BxtCommonMathVector3D.Vector3d.newBuilder(egoCenter_).mergeFrom(value).buildPartial();
          } else {
            egoCenter_ = value;
          }
          onChanged();
        } else {
          egoCenterBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * ego center of the object
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
       */
      public Builder clearEgoCenter() {
        if (egoCenterBuilder_ == null) {
          egoCenter_ = null;
          onChanged();
        } else {
          egoCenterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <pre>
       * ego center of the object
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3d.Builder getEgoCenterBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getEgoCenterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * ego center of the object
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getEgoCenterOrBuilder() {
        if (egoCenterBuilder_ != null) {
          return egoCenterBuilder_.getMessageOrBuilder();
        } else {
          return egoCenter_ == null ?
              if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : egoCenter_;
        }
      }
      /**
       * <pre>
       * ego center of the object
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d ego_center = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder> 
          getEgoCenterFieldBuilder() {
        if (egoCenterBuilder_ == null) {
          egoCenterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder>(
                  getEgoCenter(),
                  getParentForChildren(),
                  isClean());
          egoCenter_ = null;
        }
        return egoCenterBuilder_;
      }

      private if_proto_common.BxtCommonMathVector3D.Vector3d direction_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder> directionBuilder_;
      /**
       * <pre>
       * main direction
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d direction = 5;</code>
       * @return Whether the direction field is set.
       */
      public boolean hasDirection() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * main direction
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d direction = 5;</code>
       * @return The direction.
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3d getDirection() {
        if (directionBuilder_ == null) {
          return direction_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : direction_;
        } else {
          return directionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * main direction
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d direction = 5;</code>
       */
      public Builder setDirection(if_proto_common.BxtCommonMathVector3D.Vector3d value) {
        if (directionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          direction_ = value;
          onChanged();
        } else {
          directionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * main direction
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d direction = 5;</code>
       */
      public Builder setDirection(
          if_proto_common.BxtCommonMathVector3D.Vector3d.Builder builderForValue) {
        if (directionBuilder_ == null) {
          direction_ = builderForValue.build();
          onChanged();
        } else {
          directionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * main direction
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d direction = 5;</code>
       */
      public Builder mergeDirection(if_proto_common.BxtCommonMathVector3D.Vector3d value) {
        if (directionBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
              direction_ != null &&
              direction_ != if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance()) {
            direction_ =
              if_proto_common.BxtCommonMathVector3D.Vector3d.newBuilder(direction_).mergeFrom(value).buildPartial();
          } else {
            direction_ = value;
          }
          onChanged();
        } else {
          directionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * main direction
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d direction = 5;</code>
       */
      public Builder clearDirection() {
        if (directionBuilder_ == null) {
          direction_ = null;
          onChanged();
        } else {
          directionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       * main direction
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d direction = 5;</code>
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3d.Builder getDirectionBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getDirectionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * main direction
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d direction = 5;</code>
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getDirectionOrBuilder() {
        if (directionBuilder_ != null) {
          return directionBuilder_.getMessageOrBuilder();
        } else {
          return direction_ == null ?
              if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : direction_;
        }
      }
      /**
       * <pre>
       * main direction
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d direction = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder> 
          getDirectionFieldBuilder() {
        if (directionBuilder_ == null) {
          directionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder>(
                  getDirection(),
                  getParentForChildren(),
                  isClean());
          direction_ = null;
        }
        return directionBuilder_;
      }

      private double theta_ ;
      /**
       * <pre>
       * the yaw angle, theta = 0.0 &lt;=&gt; direction = (1, 0, 0)
       * </pre>
       *
       * <code>optional double theta = 6;</code>
       * @return Whether the theta field is set.
       */
      @java.lang.Override
      public boolean hasTheta() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * the yaw angle, theta = 0.0 &lt;=&gt; direction = (1, 0, 0)
       * </pre>
       *
       * <code>optional double theta = 6;</code>
       * @return The theta.
       */
      @java.lang.Override
      public double getTheta() {
        return theta_;
      }
      /**
       * <pre>
       * the yaw angle, theta = 0.0 &lt;=&gt; direction = (1, 0, 0)
       * </pre>
       *
       * <code>optional double theta = 6;</code>
       * @param value The theta to set.
       * @return This builder for chaining.
       */
      public Builder setTheta(double value) {
        bitField0_ |= 0x00000020;
        theta_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the yaw angle, theta = 0.0 &lt;=&gt; direction = (1, 0, 0)
       * </pre>
       *
       * <code>optional double theta = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearTheta() {
        bitField0_ = (bitField0_ & ~0x00000020);
        theta_ = 0D;
        onChanged();
        return this;
      }

      private double length_ ;
      /**
       * <pre>
       * Size of obstacle bounding box.
       * </pre>
       *
       * <code>optional double length = 7;</code>
       * @return Whether the length field is set.
       */
      @java.lang.Override
      public boolean hasLength() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Size of obstacle bounding box.
       * </pre>
       *
       * <code>optional double length = 7;</code>
       * @return The length.
       */
      @java.lang.Override
      public double getLength() {
        return length_;
      }
      /**
       * <pre>
       * Size of obstacle bounding box.
       * </pre>
       *
       * <code>optional double length = 7;</code>
       * @param value The length to set.
       * @return This builder for chaining.
       */
      public Builder setLength(double value) {
        bitField0_ |= 0x00000040;
        length_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Size of obstacle bounding box.
       * </pre>
       *
       * <code>optional double length = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearLength() {
        bitField0_ = (bitField0_ & ~0x00000040);
        length_ = 0D;
        onChanged();
        return this;
      }

      private double width_ ;
      /**
       * <pre>
       * obstacle width.
       * </pre>
       *
       * <code>optional double width = 8;</code>
       * @return Whether the width field is set.
       */
      @java.lang.Override
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * obstacle width.
       * </pre>
       *
       * <code>optional double width = 8;</code>
       * @return The width.
       */
      @java.lang.Override
      public double getWidth() {
        return width_;
      }
      /**
       * <pre>
       * obstacle width.
       * </pre>
       *
       * <code>optional double width = 8;</code>
       * @param value The width to set.
       * @return This builder for chaining.
       */
      public Builder setWidth(double value) {
        bitField0_ |= 0x00000080;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * obstacle width.
       * </pre>
       *
       * <code>optional double width = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000080);
        width_ = 0D;
        onChanged();
        return this;
      }

      private double height_ ;
      /**
       * <pre>
       * obstacle height.
       * </pre>
       *
       * <code>optional double height = 9;</code>
       * @return Whether the height field is set.
       */
      @java.lang.Override
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * obstacle height.
       * </pre>
       *
       * <code>optional double height = 9;</code>
       * @return The height.
       */
      @java.lang.Override
      public double getHeight() {
        return height_;
      }
      /**
       * <pre>
       * obstacle height.
       * </pre>
       *
       * <code>optional double height = 9;</code>
       * @param value The height to set.
       * @return This builder for chaining.
       */
      public Builder setHeight(double value) {
        bitField0_ |= 0x00000100;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * obstacle height.
       * </pre>
       *
       * <code>optional double height = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000100);
        height_ = 0D;
        onChanged();
        return this;
      }

      private double detConfidence_ ;
      /**
       * <code>optional double det_confidence = 10;</code>
       * @return Whether the detConfidence field is set.
       */
      @java.lang.Override
      public boolean hasDetConfidence() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional double det_confidence = 10;</code>
       * @return The detConfidence.
       */
      @java.lang.Override
      public double getDetConfidence() {
        return detConfidence_;
      }
      /**
       * <code>optional double det_confidence = 10;</code>
       * @param value The detConfidence to set.
       * @return This builder for chaining.
       */
      public Builder setDetConfidence(double value) {
        bitField0_ |= 0x00000200;
        detConfidence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double det_confidence = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearDetConfidence() {
        bitField0_ = (bitField0_ & ~0x00000200);
        detConfidence_ = 0D;
        onChanged();
        return this;
      }

      private int objType_ = 0;
      /**
       * <pre>
       * ======= Classification =======
       * </pre>
       *
       * <code>optional .if_proto_common.ObjectType obj_type = 20;</code>
       * @return Whether the objType field is set.
       */
      @java.lang.Override public boolean hasObjType() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * ======= Classification =======
       * </pre>
       *
       * <code>optional .if_proto_common.ObjectType obj_type = 20;</code>
       * @return The objType.
       */
      @java.lang.Override
      public if_proto_common.BxtObstacleV2.ObjectType getObjType() {
        @SuppressWarnings("deprecation")
        if_proto_common.BxtObstacleV2.ObjectType result = if_proto_common.BxtObstacleV2.ObjectType.valueOf(objType_);
        return result == null ? if_proto_common.BxtObstacleV2.ObjectType.UNKNOWN : result;
      }
      /**
       * <pre>
       * ======= Classification =======
       * </pre>
       *
       * <code>optional .if_proto_common.ObjectType obj_type = 20;</code>
       * @param value The objType to set.
       * @return This builder for chaining.
       */
      public Builder setObjType(if_proto_common.BxtObstacleV2.ObjectType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        objType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ======= Classification =======
       * </pre>
       *
       * <code>optional .if_proto_common.ObjectType obj_type = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearObjType() {
        bitField0_ = (bitField0_ & ~0x00000400);
        objType_ = 0;
        onChanged();
        return this;
      }

      private double typeProb_ ;
      /**
       * <pre>
       * Probability of each type, used for track type.
       * </pre>
       *
       * <code>optional double type_prob = 21;</code>
       * @return Whether the typeProb field is set.
       */
      @java.lang.Override
      public boolean hasTypeProb() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       * Probability of each type, used for track type.
       * </pre>
       *
       * <code>optional double type_prob = 21;</code>
       * @return The typeProb.
       */
      @java.lang.Override
      public double getTypeProb() {
        return typeProb_;
      }
      /**
       * <pre>
       * Probability of each type, used for track type.
       * </pre>
       *
       * <code>optional double type_prob = 21;</code>
       * @param value The typeProb to set.
       * @return This builder for chaining.
       */
      public Builder setTypeProb(double value) {
        bitField0_ |= 0x00000800;
        typeProb_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Probability of each type, used for track type.
       * </pre>
       *
       * <code>optional double type_prob = 21;</code>
       * @return This builder for chaining.
       */
      public Builder clearTypeProb() {
        bitField0_ = (bitField0_ & ~0x00000800);
        typeProb_ = 0D;
        onChanged();
        return this;
      }

      private int trackId_ ;
      /**
       * <pre>
       * ======= tracking =======
       * </pre>
       *
       * <code>optional int32 track_id = 30;</code>
       * @return Whether the trackId field is set.
       */
      @java.lang.Override
      public boolean hasTrackId() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <pre>
       * ======= tracking =======
       * </pre>
       *
       * <code>optional int32 track_id = 30;</code>
       * @return The trackId.
       */
      @java.lang.Override
      public int getTrackId() {
        return trackId_;
      }
      /**
       * <pre>
       * ======= tracking =======
       * </pre>
       *
       * <code>optional int32 track_id = 30;</code>
       * @param value The trackId to set.
       * @return This builder for chaining.
       */
      public Builder setTrackId(int value) {
        bitField0_ |= 0x00001000;
        trackId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ======= tracking =======
       * </pre>
       *
       * <code>optional int32 track_id = 30;</code>
       * @return This builder for chaining.
       */
      public Builder clearTrackId() {
        bitField0_ = (bitField0_ & ~0x00001000);
        trackId_ = 0;
        onChanged();
        return this;
      }

      private if_proto_common.BxtCommonMathMatrixXd.MatrixXd positionUncertainty_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathMatrixXd.MatrixXd, if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder, if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder> positionUncertaintyBuilder_;
      /**
       * <pre>
       * obstacle position uncertainty
       * </pre>
       *
       * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
       * @return Whether the positionUncertainty field is set.
       */
      public boolean hasPositionUncertainty() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <pre>
       * obstacle position uncertainty
       * </pre>
       *
       * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
       * @return The positionUncertainty.
       */
      public if_proto_common.BxtCommonMathMatrixXd.MatrixXd getPositionUncertainty() {
        if (positionUncertaintyBuilder_ == null) {
          return positionUncertainty_ == null ? if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance() : positionUncertainty_;
        } else {
          return positionUncertaintyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * obstacle position uncertainty
       * </pre>
       *
       * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
       */
      public Builder setPositionUncertainty(if_proto_common.BxtCommonMathMatrixXd.MatrixXd value) {
        if (positionUncertaintyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          positionUncertainty_ = value;
          onChanged();
        } else {
          positionUncertaintyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       * obstacle position uncertainty
       * </pre>
       *
       * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
       */
      public Builder setPositionUncertainty(
          if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder builderForValue) {
        if (positionUncertaintyBuilder_ == null) {
          positionUncertainty_ = builderForValue.build();
          onChanged();
        } else {
          positionUncertaintyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       * obstacle position uncertainty
       * </pre>
       *
       * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
       */
      public Builder mergePositionUncertainty(if_proto_common.BxtCommonMathMatrixXd.MatrixXd value) {
        if (positionUncertaintyBuilder_ == null) {
          if (((bitField0_ & 0x00002000) != 0) &&
              positionUncertainty_ != null &&
              positionUncertainty_ != if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance()) {
            positionUncertainty_ =
              if_proto_common.BxtCommonMathMatrixXd.MatrixXd.newBuilder(positionUncertainty_).mergeFrom(value).buildPartial();
          } else {
            positionUncertainty_ = value;
          }
          onChanged();
        } else {
          positionUncertaintyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       * obstacle position uncertainty
       * </pre>
       *
       * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
       */
      public Builder clearPositionUncertainty() {
        if (positionUncertaintyBuilder_ == null) {
          positionUncertainty_ = null;
          onChanged();
        } else {
          positionUncertaintyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <pre>
       * obstacle position uncertainty
       * </pre>
       *
       * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
       */
      public if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder getPositionUncertaintyBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getPositionUncertaintyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * obstacle position uncertainty
       * </pre>
       *
       * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
       */
      public if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder getPositionUncertaintyOrBuilder() {
        if (positionUncertaintyBuilder_ != null) {
          return positionUncertaintyBuilder_.getMessageOrBuilder();
        } else {
          return positionUncertainty_ == null ?
              if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance() : positionUncertainty_;
        }
      }
      /**
       * <pre>
       * obstacle position uncertainty
       * </pre>
       *
       * <code>optional .if_proto_common.MatrixXd position_uncertainty = 43;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathMatrixXd.MatrixXd, if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder, if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder> 
          getPositionUncertaintyFieldBuilder() {
        if (positionUncertaintyBuilder_ == null) {
          positionUncertaintyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtCommonMathMatrixXd.MatrixXd, if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder, if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder>(
                  getPositionUncertainty(),
                  getParentForChildren(),
                  isClean());
          positionUncertainty_ = null;
        }
        return positionUncertaintyBuilder_;
      }

      private if_proto_common.BxtCommonMathVector3D.Vector3d velocity_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder> velocityBuilder_;
      /**
       * <pre>
       * obstacle velocity.
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
       * @return Whether the velocity field is set.
       */
      public boolean hasVelocity() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <pre>
       * obstacle velocity.
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
       * @return The velocity.
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3d getVelocity() {
        if (velocityBuilder_ == null) {
          return velocity_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : velocity_;
        } else {
          return velocityBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * obstacle velocity.
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
       */
      public Builder setVelocity(if_proto_common.BxtCommonMathVector3D.Vector3d value) {
        if (velocityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          velocity_ = value;
          onChanged();
        } else {
          velocityBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <pre>
       * obstacle velocity.
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
       */
      public Builder setVelocity(
          if_proto_common.BxtCommonMathVector3D.Vector3d.Builder builderForValue) {
        if (velocityBuilder_ == null) {
          velocity_ = builderForValue.build();
          onChanged();
        } else {
          velocityBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <pre>
       * obstacle velocity.
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
       */
      public Builder mergeVelocity(if_proto_common.BxtCommonMathVector3D.Vector3d value) {
        if (velocityBuilder_ == null) {
          if (((bitField0_ & 0x00004000) != 0) &&
              velocity_ != null &&
              velocity_ != if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance()) {
            velocity_ =
              if_proto_common.BxtCommonMathVector3D.Vector3d.newBuilder(velocity_).mergeFrom(value).buildPartial();
          } else {
            velocity_ = value;
          }
          onChanged();
        } else {
          velocityBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <pre>
       * obstacle velocity.
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
       */
      public Builder clearVelocity() {
        if (velocityBuilder_ == null) {
          velocity_ = null;
          onChanged();
        } else {
          velocityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }
      /**
       * <pre>
       * obstacle velocity.
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3d.Builder getVelocityBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getVelocityFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * obstacle velocity.
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getVelocityOrBuilder() {
        if (velocityBuilder_ != null) {
          return velocityBuilder_.getMessageOrBuilder();
        } else {
          return velocity_ == null ?
              if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : velocity_;
        }
      }
      /**
       * <pre>
       * obstacle velocity.
       * </pre>
       *
       * <code>optional .if_proto_common.Vector3d velocity = 31;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder> 
          getVelocityFieldBuilder() {
        if (velocityBuilder_ == null) {
          velocityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder>(
                  getVelocity(),
                  getParentForChildren(),
                  isClean());
          velocity_ = null;
        }
        return velocityBuilder_;
      }

      private if_proto_common.BxtCommonMathMatrixXd.MatrixXd velocityUncertainty_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathMatrixXd.MatrixXd, if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder, if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder> velocityUncertaintyBuilder_;
      /**
       * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
       * @return Whether the velocityUncertainty field is set.
       */
      public boolean hasVelocityUncertainty() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
       * @return The velocityUncertainty.
       */
      public if_proto_common.BxtCommonMathMatrixXd.MatrixXd getVelocityUncertainty() {
        if (velocityUncertaintyBuilder_ == null) {
          return velocityUncertainty_ == null ? if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance() : velocityUncertainty_;
        } else {
          return velocityUncertaintyBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
       */
      public Builder setVelocityUncertainty(if_proto_common.BxtCommonMathMatrixXd.MatrixXd value) {
        if (velocityUncertaintyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          velocityUncertainty_ = value;
          onChanged();
        } else {
          velocityUncertaintyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
       */
      public Builder setVelocityUncertainty(
          if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder builderForValue) {
        if (velocityUncertaintyBuilder_ == null) {
          velocityUncertainty_ = builderForValue.build();
          onChanged();
        } else {
          velocityUncertaintyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
       */
      public Builder mergeVelocityUncertainty(if_proto_common.BxtCommonMathMatrixXd.MatrixXd value) {
        if (velocityUncertaintyBuilder_ == null) {
          if (((bitField0_ & 0x00008000) != 0) &&
              velocityUncertainty_ != null &&
              velocityUncertainty_ != if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance()) {
            velocityUncertainty_ =
              if_proto_common.BxtCommonMathMatrixXd.MatrixXd.newBuilder(velocityUncertainty_).mergeFrom(value).buildPartial();
          } else {
            velocityUncertainty_ = value;
          }
          onChanged();
        } else {
          velocityUncertaintyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
       */
      public Builder clearVelocityUncertainty() {
        if (velocityUncertaintyBuilder_ == null) {
          velocityUncertainty_ = null;
          onChanged();
        } else {
          velocityUncertaintyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }
      /**
       * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
       */
      public if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder getVelocityUncertaintyBuilder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getVelocityUncertaintyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
       */
      public if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder getVelocityUncertaintyOrBuilder() {
        if (velocityUncertaintyBuilder_ != null) {
          return velocityUncertaintyBuilder_.getMessageOrBuilder();
        } else {
          return velocityUncertainty_ == null ?
              if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance() : velocityUncertainty_;
        }
      }
      /**
       * <code>optional .if_proto_common.MatrixXd velocity_uncertainty = 38;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathMatrixXd.MatrixXd, if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder, if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder> 
          getVelocityUncertaintyFieldBuilder() {
        if (velocityUncertaintyBuilder_ == null) {
          velocityUncertaintyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtCommonMathMatrixXd.MatrixXd, if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder, if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder>(
                  getVelocityUncertainty(),
                  getParentForChildren(),
                  isClean());
          velocityUncertainty_ = null;
        }
        return velocityUncertaintyBuilder_;
      }

      private double angularVelocity_ ;
      /**
       * <code>optional double angular_velocity = 32;</code>
       * @return Whether the angularVelocity field is set.
       */
      @java.lang.Override
      public boolean hasAngularVelocity() {
        return ((bitField0_ & 0x00010000) != 0);
      }
      /**
       * <code>optional double angular_velocity = 32;</code>
       * @return The angularVelocity.
       */
      @java.lang.Override
      public double getAngularVelocity() {
        return angularVelocity_;
      }
      /**
       * <code>optional double angular_velocity = 32;</code>
       * @param value The angularVelocity to set.
       * @return This builder for chaining.
       */
      public Builder setAngularVelocity(double value) {
        bitField0_ |= 0x00010000;
        angularVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double angular_velocity = 32;</code>
       * @return This builder for chaining.
       */
      public Builder clearAngularVelocity() {
        bitField0_ = (bitField0_ & ~0x00010000);
        angularVelocity_ = 0D;
        onChanged();
        return this;
      }

      private if_proto_common.BxtCommonMathVector3D.Vector3d acceleration_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder> accelerationBuilder_;
      /**
       * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
       * @return Whether the acceleration field is set.
       */
      public boolean hasAcceleration() {
        return ((bitField0_ & 0x00020000) != 0);
      }
      /**
       * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
       * @return The acceleration.
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3d getAcceleration() {
        if (accelerationBuilder_ == null) {
          return acceleration_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : acceleration_;
        } else {
          return accelerationBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
       */
      public Builder setAcceleration(if_proto_common.BxtCommonMathVector3D.Vector3d value) {
        if (accelerationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          acceleration_ = value;
          onChanged();
        } else {
          accelerationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
       */
      public Builder setAcceleration(
          if_proto_common.BxtCommonMathVector3D.Vector3d.Builder builderForValue) {
        if (accelerationBuilder_ == null) {
          acceleration_ = builderForValue.build();
          onChanged();
        } else {
          accelerationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
       */
      public Builder mergeAcceleration(if_proto_common.BxtCommonMathVector3D.Vector3d value) {
        if (accelerationBuilder_ == null) {
          if (((bitField0_ & 0x00020000) != 0) &&
              acceleration_ != null &&
              acceleration_ != if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance()) {
            acceleration_ =
              if_proto_common.BxtCommonMathVector3D.Vector3d.newBuilder(acceleration_).mergeFrom(value).buildPartial();
          } else {
            acceleration_ = value;
          }
          onChanged();
        } else {
          accelerationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
       */
      public Builder clearAcceleration() {
        if (accelerationBuilder_ == null) {
          acceleration_ = null;
          onChanged();
        } else {
          accelerationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3d.Builder getAccelerationBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getAccelerationFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getAccelerationOrBuilder() {
        if (accelerationBuilder_ != null) {
          return accelerationBuilder_.getMessageOrBuilder();
        } else {
          return acceleration_ == null ?
              if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : acceleration_;
        }
      }
      /**
       * <code>optional .if_proto_common.Vector3d acceleration = 33;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder> 
          getAccelerationFieldBuilder() {
        if (accelerationBuilder_ == null) {
          accelerationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder>(
                  getAcceleration(),
                  getParentForChildren(),
                  isClean());
          acceleration_ = null;
        }
        return accelerationBuilder_;
      }

      private if_proto_common.BxtCommonMathMatrixXd.MatrixXd accelerationUncertainty_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathMatrixXd.MatrixXd, if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder, if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder> accelerationUncertaintyBuilder_;
      /**
       * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
       * @return Whether the accelerationUncertainty field is set.
       */
      public boolean hasAccelerationUncertainty() {
        return ((bitField0_ & 0x00040000) != 0);
      }
      /**
       * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
       * @return The accelerationUncertainty.
       */
      public if_proto_common.BxtCommonMathMatrixXd.MatrixXd getAccelerationUncertainty() {
        if (accelerationUncertaintyBuilder_ == null) {
          return accelerationUncertainty_ == null ? if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance() : accelerationUncertainty_;
        } else {
          return accelerationUncertaintyBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
       */
      public Builder setAccelerationUncertainty(if_proto_common.BxtCommonMathMatrixXd.MatrixXd value) {
        if (accelerationUncertaintyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          accelerationUncertainty_ = value;
          onChanged();
        } else {
          accelerationUncertaintyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
       */
      public Builder setAccelerationUncertainty(
          if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder builderForValue) {
        if (accelerationUncertaintyBuilder_ == null) {
          accelerationUncertainty_ = builderForValue.build();
          onChanged();
        } else {
          accelerationUncertaintyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
       */
      public Builder mergeAccelerationUncertainty(if_proto_common.BxtCommonMathMatrixXd.MatrixXd value) {
        if (accelerationUncertaintyBuilder_ == null) {
          if (((bitField0_ & 0x00040000) != 0) &&
              accelerationUncertainty_ != null &&
              accelerationUncertainty_ != if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance()) {
            accelerationUncertainty_ =
              if_proto_common.BxtCommonMathMatrixXd.MatrixXd.newBuilder(accelerationUncertainty_).mergeFrom(value).buildPartial();
          } else {
            accelerationUncertainty_ = value;
          }
          onChanged();
        } else {
          accelerationUncertaintyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
       */
      public Builder clearAccelerationUncertainty() {
        if (accelerationUncertaintyBuilder_ == null) {
          accelerationUncertainty_ = null;
          onChanged();
        } else {
          accelerationUncertaintyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }
      /**
       * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
       */
      public if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder getAccelerationUncertaintyBuilder() {
        bitField0_ |= 0x00040000;
        onChanged();
        return getAccelerationUncertaintyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
       */
      public if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder getAccelerationUncertaintyOrBuilder() {
        if (accelerationUncertaintyBuilder_ != null) {
          return accelerationUncertaintyBuilder_.getMessageOrBuilder();
        } else {
          return accelerationUncertainty_ == null ?
              if_proto_common.BxtCommonMathMatrixXd.MatrixXd.getDefaultInstance() : accelerationUncertainty_;
        }
      }
      /**
       * <code>optional .if_proto_common.MatrixXd acceleration_uncertainty = 39;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathMatrixXd.MatrixXd, if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder, if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder> 
          getAccelerationUncertaintyFieldBuilder() {
        if (accelerationUncertaintyBuilder_ == null) {
          accelerationUncertaintyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtCommonMathMatrixXd.MatrixXd, if_proto_common.BxtCommonMathMatrixXd.MatrixXd.Builder, if_proto_common.BxtCommonMathMatrixXd.MatrixXdOrBuilder>(
                  getAccelerationUncertainty(),
                  getParentForChildren(),
                  isClean());
          accelerationUncertainty_ = null;
        }
        return accelerationUncertaintyBuilder_;
      }

      private double detectionTime_ ;
      /**
       * <pre>
       * age of the tracked object
       * </pre>
       *
       * <code>optional double detection_time = 34;</code>
       * @return Whether the detectionTime field is set.
       */
      @java.lang.Override
      public boolean hasDetectionTime() {
        return ((bitField0_ & 0x00080000) != 0);
      }
      /**
       * <pre>
       * age of the tracked object
       * </pre>
       *
       * <code>optional double detection_time = 34;</code>
       * @return The detectionTime.
       */
      @java.lang.Override
      public double getDetectionTime() {
        return detectionTime_;
      }
      /**
       * <pre>
       * age of the tracked object
       * </pre>
       *
       * <code>optional double detection_time = 34;</code>
       * @param value The detectionTime to set.
       * @return This builder for chaining.
       */
      public Builder setDetectionTime(double value) {
        bitField0_ |= 0x00080000;
        detectionTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * age of the tracked object
       * </pre>
       *
       * <code>optional double detection_time = 34;</code>
       * @return This builder for chaining.
       */
      public Builder clearDetectionTime() {
        bitField0_ = (bitField0_ & ~0x00080000);
        detectionTime_ = 0D;
        onChanged();
        return this;
      }

      private double trackingTime_ ;
      /**
       * <code>optional double tracking_time = 35;</code>
       * @return Whether the trackingTime field is set.
       */
      @java.lang.Override
      public boolean hasTrackingTime() {
        return ((bitField0_ & 0x00100000) != 0);
      }
      /**
       * <code>optional double tracking_time = 35;</code>
       * @return The trackingTime.
       */
      @java.lang.Override
      public double getTrackingTime() {
        return trackingTime_;
      }
      /**
       * <code>optional double tracking_time = 35;</code>
       * @param value The trackingTime to set.
       * @return This builder for chaining.
       */
      public Builder setTrackingTime(double value) {
        bitField0_ |= 0x00100000;
        trackingTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double tracking_time = 35;</code>
       * @return This builder for chaining.
       */
      public Builder clearTrackingTime() {
        bitField0_ = (bitField0_ & ~0x00100000);
        trackingTime_ = 0D;
        onChanged();
        return this;
      }

      private double latestTrackedTime_ ;
      /**
       * <code>optional double latest_tracked_time = 36;</code>
       * @return Whether the latestTrackedTime field is set.
       */
      @java.lang.Override
      public boolean hasLatestTrackedTime() {
        return ((bitField0_ & 0x00200000) != 0);
      }
      /**
       * <code>optional double latest_tracked_time = 36;</code>
       * @return The latestTrackedTime.
       */
      @java.lang.Override
      public double getLatestTrackedTime() {
        return latestTrackedTime_;
      }
      /**
       * <code>optional double latest_tracked_time = 36;</code>
       * @param value The latestTrackedTime to set.
       * @return This builder for chaining.
       */
      public Builder setLatestTrackedTime(double value) {
        bitField0_ |= 0x00200000;
        latestTrackedTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double latest_tracked_time = 36;</code>
       * @return This builder for chaining.
       */
      public Builder clearLatestTrackedTime() {
        bitField0_ = (bitField0_ & ~0x00200000);
        latestTrackedTime_ = 0D;
        onChanged();
        return this;
      }

      private int sensorSource_ = 0;
      /**
       * <pre>
       * ======= Others ========
       * </pre>
       *
       * <code>optional .bxt.common.sensor.SensorSource sensor_source = 37 [default = UnknownSource];</code>
       * @return Whether the sensorSource field is set.
       */
      @java.lang.Override public boolean hasSensorSource() {
        return ((bitField0_ & 0x00400000) != 0);
      }
      /**
       * <pre>
       * ======= Others ========
       * </pre>
       *
       * <code>optional .bxt.common.sensor.SensorSource sensor_source = 37 [default = UnknownSource];</code>
       * @return The sensorSource.
       */
      @java.lang.Override
      public bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource getSensorSource() {
        @SuppressWarnings("deprecation")
        bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource result = bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource.valueOf(sensorSource_);
        return result == null ? bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource.UnknownSource : result;
      }
      /**
       * <pre>
       * ======= Others ========
       * </pre>
       *
       * <code>optional .bxt.common.sensor.SensorSource sensor_source = 37 [default = UnknownSource];</code>
       * @param value The sensorSource to set.
       * @return This builder for chaining.
       */
      public Builder setSensorSource(bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00400000;
        sensorSource_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ======= Others ========
       * </pre>
       *
       * <code>optional .bxt.common.sensor.SensorSource sensor_source = 37 [default = UnknownSource];</code>
       * @return This builder for chaining.
       */
      public Builder clearSensorSource() {
        bitField0_ = (bitField0_ & ~0x00400000);
        sensorSource_ = 0;
        onChanged();
        return this;
      }

      private boolean isValid_ = true;
      /**
       * <code>optional bool is_valid = 40 [default = true];</code>
       * @return Whether the isValid field is set.
       */
      @java.lang.Override
      public boolean hasIsValid() {
        return ((bitField0_ & 0x00800000) != 0);
      }
      /**
       * <code>optional bool is_valid = 40 [default = true];</code>
       * @return The isValid.
       */
      @java.lang.Override
      public boolean getIsValid() {
        return isValid_;
      }
      /**
       * <code>optional bool is_valid = 40 [default = true];</code>
       * @param value The isValid to set.
       * @return This builder for chaining.
       */
      public Builder setIsValid(boolean value) {
        bitField0_ |= 0x00800000;
        isValid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_valid = 40 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearIsValid() {
        bitField0_ = (bitField0_ & ~0x00800000);
        isValid_ = true;
        onChanged();
        return this;
      }

      private boolean isOnHdmap_ ;
      /**
       * <code>optional bool is_on_hdmap = 41 [default = false];</code>
       * @return Whether the isOnHdmap field is set.
       */
      @java.lang.Override
      public boolean hasIsOnHdmap() {
        return ((bitField0_ & 0x01000000) != 0);
      }
      /**
       * <code>optional bool is_on_hdmap = 41 [default = false];</code>
       * @return The isOnHdmap.
       */
      @java.lang.Override
      public boolean getIsOnHdmap() {
        return isOnHdmap_;
      }
      /**
       * <code>optional bool is_on_hdmap = 41 [default = false];</code>
       * @param value The isOnHdmap to set.
       * @return This builder for chaining.
       */
      public Builder setIsOnHdmap(boolean value) {
        bitField0_ |= 0x01000000;
        isOnHdmap_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_on_hdmap = 41 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearIsOnHdmap() {
        bitField0_ = (bitField0_ & ~0x01000000);
        isOnHdmap_ = false;
        onChanged();
        return this;
      }

      private boolean isStationary_ ;
      /**
       * <code>optional bool is_stationary = 42 [default = false];</code>
       * @return Whether the isStationary field is set.
       */
      @java.lang.Override
      public boolean hasIsStationary() {
        return ((bitField0_ & 0x02000000) != 0);
      }
      /**
       * <code>optional bool is_stationary = 42 [default = false];</code>
       * @return The isStationary.
       */
      @java.lang.Override
      public boolean getIsStationary() {
        return isStationary_;
      }
      /**
       * <code>optional bool is_stationary = 42 [default = false];</code>
       * @param value The isStationary to set.
       * @return This builder for chaining.
       */
      public Builder setIsStationary(boolean value) {
        bitField0_ |= 0x02000000;
        isStationary_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_stationary = 42 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearIsStationary() {
        bitField0_ = (bitField0_ & ~0x02000000);
        isStationary_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList aucLane_ = emptyIntList();
      private void ensureAucLaneIsMutable() {
        if (!((bitField0_ & 0x04000000) != 0)) {
          aucLane_ = mutableCopy(aucLane_);
          bitField0_ |= 0x04000000;
         }
      }
      /**
       * <pre>
       *100 means road entrance, others positive means logical lane id, 
       * </pre>
       *
       * <code>repeated int32 aucLane = 44;</code>
       * @return A list containing the aucLane.
       */
      public java.util.List<java.lang.Integer>
          getAucLaneList() {
        return ((bitField0_ & 0x04000000) != 0) ?
                 java.util.Collections.unmodifiableList(aucLane_) : aucLane_;
      }
      /**
       * <pre>
       *100 means road entrance, others positive means logical lane id, 
       * </pre>
       *
       * <code>repeated int32 aucLane = 44;</code>
       * @return The count of aucLane.
       */
      public int getAucLaneCount() {
        return aucLane_.size();
      }
      /**
       * <pre>
       *100 means road entrance, others positive means logical lane id, 
       * </pre>
       *
       * <code>repeated int32 aucLane = 44;</code>
       * @param index The index of the element to return.
       * @return The aucLane at the given index.
       */
      public int getAucLane(int index) {
        return aucLane_.getInt(index);
      }
      /**
       * <pre>
       *100 means road entrance, others positive means logical lane id, 
       * </pre>
       *
       * <code>repeated int32 aucLane = 44;</code>
       * @param index The index to set the value at.
       * @param value The aucLane to set.
       * @return This builder for chaining.
       */
      public Builder setAucLane(
          int index, int value) {
        ensureAucLaneIsMutable();
        aucLane_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *100 means road entrance, others positive means logical lane id, 
       * </pre>
       *
       * <code>repeated int32 aucLane = 44;</code>
       * @param value The aucLane to add.
       * @return This builder for chaining.
       */
      public Builder addAucLane(int value) {
        ensureAucLaneIsMutable();
        aucLane_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *100 means road entrance, others positive means logical lane id, 
       * </pre>
       *
       * <code>repeated int32 aucLane = 44;</code>
       * @param values The aucLane to add.
       * @return This builder for chaining.
       */
      public Builder addAllAucLane(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAucLaneIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, aucLane_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *100 means road entrance, others positive means logical lane id, 
       * </pre>
       *
       * <code>repeated int32 aucLane = 44;</code>
       * @return This builder for chaining.
       */
      public Builder clearAucLane() {
        aucLane_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x04000000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList aucHdLane_ = emptyIntList();
      private void ensureAucHdLaneIsMutable() {
        if (!((bitField0_ & 0x08000000) != 0)) {
          aucHdLane_ = mutableCopy(aucHdLane_);
          bitField0_ |= 0x08000000;
         }
      }
      /**
       * <pre>
       *-1 means road entrance, others positive means real lane id, 
       * </pre>
       *
       * <code>repeated int32 aucHdLane = 45;</code>
       * @return A list containing the aucHdLane.
       */
      public java.util.List<java.lang.Integer>
          getAucHdLaneList() {
        return ((bitField0_ & 0x08000000) != 0) ?
                 java.util.Collections.unmodifiableList(aucHdLane_) : aucHdLane_;
      }
      /**
       * <pre>
       *-1 means road entrance, others positive means real lane id, 
       * </pre>
       *
       * <code>repeated int32 aucHdLane = 45;</code>
       * @return The count of aucHdLane.
       */
      public int getAucHdLaneCount() {
        return aucHdLane_.size();
      }
      /**
       * <pre>
       *-1 means road entrance, others positive means real lane id, 
       * </pre>
       *
       * <code>repeated int32 aucHdLane = 45;</code>
       * @param index The index of the element to return.
       * @return The aucHdLane at the given index.
       */
      public int getAucHdLane(int index) {
        return aucHdLane_.getInt(index);
      }
      /**
       * <pre>
       *-1 means road entrance, others positive means real lane id, 
       * </pre>
       *
       * <code>repeated int32 aucHdLane = 45;</code>
       * @param index The index to set the value at.
       * @param value The aucHdLane to set.
       * @return This builder for chaining.
       */
      public Builder setAucHdLane(
          int index, int value) {
        ensureAucHdLaneIsMutable();
        aucHdLane_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *-1 means road entrance, others positive means real lane id, 
       * </pre>
       *
       * <code>repeated int32 aucHdLane = 45;</code>
       * @param value The aucHdLane to add.
       * @return This builder for chaining.
       */
      public Builder addAucHdLane(int value) {
        ensureAucHdLaneIsMutable();
        aucHdLane_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *-1 means road entrance, others positive means real lane id, 
       * </pre>
       *
       * <code>repeated int32 aucHdLane = 45;</code>
       * @param values The aucHdLane to add.
       * @return This builder for chaining.
       */
      public Builder addAllAucHdLane(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAucHdLaneIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, aucHdLane_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *-1 means road entrance, others positive means real lane id, 
       * </pre>
       *
       * <code>repeated int32 aucHdLane = 45;</code>
       * @return This builder for chaining.
       */
      public Builder clearAucHdLane() {
        aucHdLane_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x08000000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList aucHdConnection_ = emptyIntList();
      private void ensureAucHdConnectionIsMutable() {
        if (!((bitField0_ & 0x10000000) != 0)) {
          aucHdConnection_ = mutableCopy(aucHdConnection_);
          bitField0_ |= 0x10000000;
         }
      }
      /**
       * <pre>
       *-1 means section, others positive means real connection id
       * </pre>
       *
       * <code>repeated int32 aucHdConnection = 46;</code>
       * @return A list containing the aucHdConnection.
       */
      public java.util.List<java.lang.Integer>
          getAucHdConnectionList() {
        return ((bitField0_ & 0x10000000) != 0) ?
                 java.util.Collections.unmodifiableList(aucHdConnection_) : aucHdConnection_;
      }
      /**
       * <pre>
       *-1 means section, others positive means real connection id
       * </pre>
       *
       * <code>repeated int32 aucHdConnection = 46;</code>
       * @return The count of aucHdConnection.
       */
      public int getAucHdConnectionCount() {
        return aucHdConnection_.size();
      }
      /**
       * <pre>
       *-1 means section, others positive means real connection id
       * </pre>
       *
       * <code>repeated int32 aucHdConnection = 46;</code>
       * @param index The index of the element to return.
       * @return The aucHdConnection at the given index.
       */
      public int getAucHdConnection(int index) {
        return aucHdConnection_.getInt(index);
      }
      /**
       * <pre>
       *-1 means section, others positive means real connection id
       * </pre>
       *
       * <code>repeated int32 aucHdConnection = 46;</code>
       * @param index The index to set the value at.
       * @param value The aucHdConnection to set.
       * @return This builder for chaining.
       */
      public Builder setAucHdConnection(
          int index, int value) {
        ensureAucHdConnectionIsMutable();
        aucHdConnection_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *-1 means section, others positive means real connection id
       * </pre>
       *
       * <code>repeated int32 aucHdConnection = 46;</code>
       * @param value The aucHdConnection to add.
       * @return This builder for chaining.
       */
      public Builder addAucHdConnection(int value) {
        ensureAucHdConnectionIsMutable();
        aucHdConnection_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *-1 means section, others positive means real connection id
       * </pre>
       *
       * <code>repeated int32 aucHdConnection = 46;</code>
       * @param values The aucHdConnection to add.
       * @return This builder for chaining.
       */
      public Builder addAllAucHdConnection(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAucHdConnectionIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, aucHdConnection_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *-1 means section, others positive means real connection id
       * </pre>
       *
       * <code>repeated int32 aucHdConnection = 46;</code>
       * @return This builder for chaining.
       */
      public Builder clearAucHdConnection() {
        aucHdConnection_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x10000000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList aulCrosswalk_ = emptyIntList();
      private void ensureAulCrosswalkIsMutable() {
        if (!((bitField0_ & 0x20000000) != 0)) {
          aulCrosswalk_ = mutableCopy(aulCrosswalk_);
          bitField0_ |= 0x20000000;
         }
      }
      /**
       * <pre>
       *-1 means section, real connection id
       * </pre>
       *
       * <code>repeated int32 aulCrosswalk = 47;</code>
       * @return A list containing the aulCrosswalk.
       */
      public java.util.List<java.lang.Integer>
          getAulCrosswalkList() {
        return ((bitField0_ & 0x20000000) != 0) ?
                 java.util.Collections.unmodifiableList(aulCrosswalk_) : aulCrosswalk_;
      }
      /**
       * <pre>
       *-1 means section, real connection id
       * </pre>
       *
       * <code>repeated int32 aulCrosswalk = 47;</code>
       * @return The count of aulCrosswalk.
       */
      public int getAulCrosswalkCount() {
        return aulCrosswalk_.size();
      }
      /**
       * <pre>
       *-1 means section, real connection id
       * </pre>
       *
       * <code>repeated int32 aulCrosswalk = 47;</code>
       * @param index The index of the element to return.
       * @return The aulCrosswalk at the given index.
       */
      public int getAulCrosswalk(int index) {
        return aulCrosswalk_.getInt(index);
      }
      /**
       * <pre>
       *-1 means section, real connection id
       * </pre>
       *
       * <code>repeated int32 aulCrosswalk = 47;</code>
       * @param index The index to set the value at.
       * @param value The aulCrosswalk to set.
       * @return This builder for chaining.
       */
      public Builder setAulCrosswalk(
          int index, int value) {
        ensureAulCrosswalkIsMutable();
        aulCrosswalk_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *-1 means section, real connection id
       * </pre>
       *
       * <code>repeated int32 aulCrosswalk = 47;</code>
       * @param value The aulCrosswalk to add.
       * @return This builder for chaining.
       */
      public Builder addAulCrosswalk(int value) {
        ensureAulCrosswalkIsMutable();
        aulCrosswalk_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *-1 means section, real connection id
       * </pre>
       *
       * <code>repeated int32 aulCrosswalk = 47;</code>
       * @param values The aulCrosswalk to add.
       * @return This builder for chaining.
       */
      public Builder addAllAulCrosswalk(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAulCrosswalkIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, aulCrosswalk_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *-1 means section, real connection id
       * </pre>
       *
       * <code>repeated int32 aulCrosswalk = 47;</code>
       * @return This builder for chaining.
       */
      public Builder clearAulCrosswalk() {
        aulCrosswalk_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x20000000);
        onChanged();
        return this;
      }

      private java.util.List<if_proto_common.BxtObstacleV2.PixelPointCoordinate> astPixelPointCoordinate_ =
        java.util.Collections.emptyList();
      private void ensureAstPixelPointCoordinateIsMutable() {
        if (!((bitField0_ & 0x40000000) != 0)) {
          astPixelPointCoordinate_ = new java.util.ArrayList<if_proto_common.BxtObstacleV2.PixelPointCoordinate>(astPixelPointCoordinate_);
          bitField0_ |= 0x40000000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          if_proto_common.BxtObstacleV2.PixelPointCoordinate, if_proto_common.BxtObstacleV2.PixelPointCoordinate.Builder, if_proto_common.BxtObstacleV2.PixelPointCoordinateOrBuilder> astPixelPointCoordinateBuilder_;

      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public java.util.List<if_proto_common.BxtObstacleV2.PixelPointCoordinate> getAstPixelPointCoordinateList() {
        if (astPixelPointCoordinateBuilder_ == null) {
          return java.util.Collections.unmodifiableList(astPixelPointCoordinate_);
        } else {
          return astPixelPointCoordinateBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public int getAstPixelPointCoordinateCount() {
        if (astPixelPointCoordinateBuilder_ == null) {
          return astPixelPointCoordinate_.size();
        } else {
          return astPixelPointCoordinateBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public if_proto_common.BxtObstacleV2.PixelPointCoordinate getAstPixelPointCoordinate(int index) {
        if (astPixelPointCoordinateBuilder_ == null) {
          return astPixelPointCoordinate_.get(index);
        } else {
          return astPixelPointCoordinateBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public Builder setAstPixelPointCoordinate(
          int index, if_proto_common.BxtObstacleV2.PixelPointCoordinate value) {
        if (astPixelPointCoordinateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAstPixelPointCoordinateIsMutable();
          astPixelPointCoordinate_.set(index, value);
          onChanged();
        } else {
          astPixelPointCoordinateBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public Builder setAstPixelPointCoordinate(
          int index, if_proto_common.BxtObstacleV2.PixelPointCoordinate.Builder builderForValue) {
        if (astPixelPointCoordinateBuilder_ == null) {
          ensureAstPixelPointCoordinateIsMutable();
          astPixelPointCoordinate_.set(index, builderForValue.build());
          onChanged();
        } else {
          astPixelPointCoordinateBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public Builder addAstPixelPointCoordinate(if_proto_common.BxtObstacleV2.PixelPointCoordinate value) {
        if (astPixelPointCoordinateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAstPixelPointCoordinateIsMutable();
          astPixelPointCoordinate_.add(value);
          onChanged();
        } else {
          astPixelPointCoordinateBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public Builder addAstPixelPointCoordinate(
          int index, if_proto_common.BxtObstacleV2.PixelPointCoordinate value) {
        if (astPixelPointCoordinateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAstPixelPointCoordinateIsMutable();
          astPixelPointCoordinate_.add(index, value);
          onChanged();
        } else {
          astPixelPointCoordinateBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public Builder addAstPixelPointCoordinate(
          if_proto_common.BxtObstacleV2.PixelPointCoordinate.Builder builderForValue) {
        if (astPixelPointCoordinateBuilder_ == null) {
          ensureAstPixelPointCoordinateIsMutable();
          astPixelPointCoordinate_.add(builderForValue.build());
          onChanged();
        } else {
          astPixelPointCoordinateBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public Builder addAstPixelPointCoordinate(
          int index, if_proto_common.BxtObstacleV2.PixelPointCoordinate.Builder builderForValue) {
        if (astPixelPointCoordinateBuilder_ == null) {
          ensureAstPixelPointCoordinateIsMutable();
          astPixelPointCoordinate_.add(index, builderForValue.build());
          onChanged();
        } else {
          astPixelPointCoordinateBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public Builder addAllAstPixelPointCoordinate(
          java.lang.Iterable<? extends if_proto_common.BxtObstacleV2.PixelPointCoordinate> values) {
        if (astPixelPointCoordinateBuilder_ == null) {
          ensureAstPixelPointCoordinateIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, astPixelPointCoordinate_);
          onChanged();
        } else {
          astPixelPointCoordinateBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public Builder clearAstPixelPointCoordinate() {
        if (astPixelPointCoordinateBuilder_ == null) {
          astPixelPointCoordinate_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x40000000);
          onChanged();
        } else {
          astPixelPointCoordinateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public Builder removeAstPixelPointCoordinate(int index) {
        if (astPixelPointCoordinateBuilder_ == null) {
          ensureAstPixelPointCoordinateIsMutable();
          astPixelPointCoordinate_.remove(index);
          onChanged();
        } else {
          astPixelPointCoordinateBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public if_proto_common.BxtObstacleV2.PixelPointCoordinate.Builder getAstPixelPointCoordinateBuilder(
          int index) {
        return getAstPixelPointCoordinateFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public if_proto_common.BxtObstacleV2.PixelPointCoordinateOrBuilder getAstPixelPointCoordinateOrBuilder(
          int index) {
        if (astPixelPointCoordinateBuilder_ == null) {
          return astPixelPointCoordinate_.get(index);  } else {
          return astPixelPointCoordinateBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public java.util.List<? extends if_proto_common.BxtObstacleV2.PixelPointCoordinateOrBuilder> 
           getAstPixelPointCoordinateOrBuilderList() {
        if (astPixelPointCoordinateBuilder_ != null) {
          return astPixelPointCoordinateBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(astPixelPointCoordinate_);
        }
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public if_proto_common.BxtObstacleV2.PixelPointCoordinate.Builder addAstPixelPointCoordinateBuilder() {
        return getAstPixelPointCoordinateFieldBuilder().addBuilder(
            if_proto_common.BxtObstacleV2.PixelPointCoordinate.getDefaultInstance());
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public if_proto_common.BxtObstacleV2.PixelPointCoordinate.Builder addAstPixelPointCoordinateBuilder(
          int index) {
        return getAstPixelPointCoordinateFieldBuilder().addBuilder(
            index, if_proto_common.BxtObstacleV2.PixelPointCoordinate.getDefaultInstance());
      }
      /**
       * <code>repeated .if_proto_common.PixelPointCoordinate astPixelPointCoordinate = 48;</code>
       */
      public java.util.List<if_proto_common.BxtObstacleV2.PixelPointCoordinate.Builder> 
           getAstPixelPointCoordinateBuilderList() {
        return getAstPixelPointCoordinateFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          if_proto_common.BxtObstacleV2.PixelPointCoordinate, if_proto_common.BxtObstacleV2.PixelPointCoordinate.Builder, if_proto_common.BxtObstacleV2.PixelPointCoordinateOrBuilder> 
          getAstPixelPointCoordinateFieldBuilder() {
        if (astPixelPointCoordinateBuilder_ == null) {
          astPixelPointCoordinateBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              if_proto_common.BxtObstacleV2.PixelPointCoordinate, if_proto_common.BxtObstacleV2.PixelPointCoordinate.Builder, if_proto_common.BxtObstacleV2.PixelPointCoordinateOrBuilder>(
                  astPixelPointCoordinate_,
                  ((bitField0_ & 0x40000000) != 0),
                  getParentForChildren(),
                  isClean());
          astPixelPointCoordinate_ = null;
        }
        return astPixelPointCoordinateBuilder_;
      }

      private double cameraMidTimestamp_ ;
      /**
       * <pre>
       *fusion from mid camera
       * </pre>
       *
       * <code>optional double camera_mid_timestamp = 49;</code>
       * @return Whether the cameraMidTimestamp field is set.
       */
      @java.lang.Override
      public boolean hasCameraMidTimestamp() {
        return ((bitField0_ & 0x80000000) != 0);
      }
      /**
       * <pre>
       *fusion from mid camera
       * </pre>
       *
       * <code>optional double camera_mid_timestamp = 49;</code>
       * @return The cameraMidTimestamp.
       */
      @java.lang.Override
      public double getCameraMidTimestamp() {
        return cameraMidTimestamp_;
      }
      /**
       * <pre>
       *fusion from mid camera
       * </pre>
       *
       * <code>optional double camera_mid_timestamp = 49;</code>
       * @param value The cameraMidTimestamp to set.
       * @return This builder for chaining.
       */
      public Builder setCameraMidTimestamp(double value) {
        bitField0_ |= 0x80000000;
        cameraMidTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *fusion from mid camera
       * </pre>
       *
       * <code>optional double camera_mid_timestamp = 49;</code>
       * @return This builder for chaining.
       */
      public Builder clearCameraMidTimestamp() {
        bitField0_ = (bitField0_ & ~0x80000000);
        cameraMidTimestamp_ = 0D;
        onChanged();
        return this;
      }

      private double cameraLongTimestamp_ ;
      /**
       * <pre>
       *fusion from long camera
       * </pre>
       *
       * <code>optional double camera_long_timestamp = 50;</code>
       * @return Whether the cameraLongTimestamp field is set.
       */
      @java.lang.Override
      public boolean hasCameraLongTimestamp() {
        return ((bitField1_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *fusion from long camera
       * </pre>
       *
       * <code>optional double camera_long_timestamp = 50;</code>
       * @return The cameraLongTimestamp.
       */
      @java.lang.Override
      public double getCameraLongTimestamp() {
        return cameraLongTimestamp_;
      }
      /**
       * <pre>
       *fusion from long camera
       * </pre>
       *
       * <code>optional double camera_long_timestamp = 50;</code>
       * @param value The cameraLongTimestamp to set.
       * @return This builder for chaining.
       */
      public Builder setCameraLongTimestamp(double value) {
        bitField1_ |= 0x00000001;
        cameraLongTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *fusion from long camera
       * </pre>
       *
       * <code>optional double camera_long_timestamp = 50;</code>
       * @return This builder for chaining.
       */
      public Builder clearCameraLongTimestamp() {
        bitField1_ = (bitField1_ & ~0x00000001);
        cameraLongTimestamp_ = 0D;
        onChanged();
        return this;
      }

      private double radarTimestamp_ ;
      /**
       * <pre>
       *fusion from radar 
       * </pre>
       *
       * <code>optional double radar_timestamp = 51;</code>
       * @return Whether the radarTimestamp field is set.
       */
      @java.lang.Override
      public boolean hasRadarTimestamp() {
        return ((bitField1_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       *fusion from radar 
       * </pre>
       *
       * <code>optional double radar_timestamp = 51;</code>
       * @return The radarTimestamp.
       */
      @java.lang.Override
      public double getRadarTimestamp() {
        return radarTimestamp_;
      }
      /**
       * <pre>
       *fusion from radar 
       * </pre>
       *
       * <code>optional double radar_timestamp = 51;</code>
       * @param value The radarTimestamp to set.
       * @return This builder for chaining.
       */
      public Builder setRadarTimestamp(double value) {
        bitField1_ |= 0x00000002;
        radarTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *fusion from radar 
       * </pre>
       *
       * <code>optional double radar_timestamp = 51;</code>
       * @return This builder for chaining.
       */
      public Builder clearRadarTimestamp() {
        bitField1_ = (bitField1_ & ~0x00000002);
        radarTimestamp_ = 0D;
        onChanged();
        return this;
      }

      private java.lang.Object vehicleClass_ = "";
      /**
       * <pre>
       * 车辆类型
       * </pre>
       *
       * <code>optional string VehicleClass = 60;</code>
       * @return Whether the vehicleClass field is set.
       */
      public boolean hasVehicleClass() {
        return ((bitField1_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * 车辆类型
       * </pre>
       *
       * <code>optional string VehicleClass = 60;</code>
       * @return The vehicleClass.
       */
      public java.lang.String getVehicleClass() {
        java.lang.Object ref = vehicleClass_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            vehicleClass_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 车辆类型
       * </pre>
       *
       * <code>optional string VehicleClass = 60;</code>
       * @return The bytes for vehicleClass.
       */
      public com.google.protobuf.ByteString
          getVehicleClassBytes() {
        java.lang.Object ref = vehicleClass_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vehicleClass_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 车辆类型
       * </pre>
       *
       * <code>optional string VehicleClass = 60;</code>
       * @param value The vehicleClass to set.
       * @return This builder for chaining.
       */
      public Builder setVehicleClass(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000004;
        vehicleClass_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车辆类型
       * </pre>
       *
       * <code>optional string VehicleClass = 60;</code>
       * @return This builder for chaining.
       */
      public Builder clearVehicleClass() {
        bitField1_ = (bitField1_ & ~0x00000004);
        vehicleClass_ = getDefaultInstance().getVehicleClass();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车辆类型
       * </pre>
       *
       * <code>optional string VehicleClass = 60;</code>
       * @param value The bytes for vehicleClass to set.
       * @return This builder for chaining.
       */
      public Builder setVehicleClassBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000004;
        vehicleClass_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object vehicleColor_ = "";
      /**
       * <pre>
       * 车辆颜色, atlas &amp; its
       * </pre>
       *
       * <code>optional string VehicleColor = 61;</code>
       * @return Whether the vehicleColor field is set.
       */
      public boolean hasVehicleColor() {
        return ((bitField1_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * 车辆颜色, atlas &amp; its
       * </pre>
       *
       * <code>optional string VehicleColor = 61;</code>
       * @return The vehicleColor.
       */
      public java.lang.String getVehicleColor() {
        java.lang.Object ref = vehicleColor_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            vehicleColor_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 车辆颜色, atlas &amp; its
       * </pre>
       *
       * <code>optional string VehicleColor = 61;</code>
       * @return The bytes for vehicleColor.
       */
      public com.google.protobuf.ByteString
          getVehicleColorBytes() {
        java.lang.Object ref = vehicleColor_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vehicleColor_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 车辆颜色, atlas &amp; its
       * </pre>
       *
       * <code>optional string VehicleColor = 61;</code>
       * @param value The vehicleColor to set.
       * @return This builder for chaining.
       */
      public Builder setVehicleColor(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000008;
        vehicleColor_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车辆颜色, atlas &amp; its
       * </pre>
       *
       * <code>optional string VehicleColor = 61;</code>
       * @return This builder for chaining.
       */
      public Builder clearVehicleColor() {
        bitField1_ = (bitField1_ & ~0x00000008);
        vehicleColor_ = getDefaultInstance().getVehicleColor();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车辆颜色, atlas &amp; its
       * </pre>
       *
       * <code>optional string VehicleColor = 61;</code>
       * @param value The bytes for vehicleColor to set.
       * @return This builder for chaining.
       */
      public Builder setVehicleColorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000008;
        vehicleColor_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object vehicleBrand_ = "";
      /**
       * <pre>
       * 车辆品牌
       * </pre>
       *
       * <code>optional string VehicleBrand = 62;</code>
       * @return Whether the vehicleBrand field is set.
       */
      public boolean hasVehicleBrand() {
        return ((bitField1_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * 车辆品牌
       * </pre>
       *
       * <code>optional string VehicleBrand = 62;</code>
       * @return The vehicleBrand.
       */
      public java.lang.String getVehicleBrand() {
        java.lang.Object ref = vehicleBrand_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            vehicleBrand_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 车辆品牌
       * </pre>
       *
       * <code>optional string VehicleBrand = 62;</code>
       * @return The bytes for vehicleBrand.
       */
      public com.google.protobuf.ByteString
          getVehicleBrandBytes() {
        java.lang.Object ref = vehicleBrand_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vehicleBrand_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 车辆品牌
       * </pre>
       *
       * <code>optional string VehicleBrand = 62;</code>
       * @param value The vehicleBrand to set.
       * @return This builder for chaining.
       */
      public Builder setVehicleBrand(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000010;
        vehicleBrand_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车辆品牌
       * </pre>
       *
       * <code>optional string VehicleBrand = 62;</code>
       * @return This builder for chaining.
       */
      public Builder clearVehicleBrand() {
        bitField1_ = (bitField1_ & ~0x00000010);
        vehicleBrand_ = getDefaultInstance().getVehicleBrand();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车辆品牌
       * </pre>
       *
       * <code>optional string VehicleBrand = 62;</code>
       * @param value The bytes for vehicleBrand to set.
       * @return This builder for chaining.
       */
      public Builder setVehicleBrandBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000010;
        vehicleBrand_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object vehicleModel_ = "";
      /**
       * <pre>
       * 车辆型号
       * </pre>
       *
       * <code>optional string VehicleModel = 63;</code>
       * @return Whether the vehicleModel field is set.
       */
      public boolean hasVehicleModel() {
        return ((bitField1_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * 车辆型号
       * </pre>
       *
       * <code>optional string VehicleModel = 63;</code>
       * @return The vehicleModel.
       */
      public java.lang.String getVehicleModel() {
        java.lang.Object ref = vehicleModel_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            vehicleModel_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 车辆型号
       * </pre>
       *
       * <code>optional string VehicleModel = 63;</code>
       * @return The bytes for vehicleModel.
       */
      public com.google.protobuf.ByteString
          getVehicleModelBytes() {
        java.lang.Object ref = vehicleModel_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vehicleModel_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 车辆型号
       * </pre>
       *
       * <code>optional string VehicleModel = 63;</code>
       * @param value The vehicleModel to set.
       * @return This builder for chaining.
       */
      public Builder setVehicleModel(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000020;
        vehicleModel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车辆型号
       * </pre>
       *
       * <code>optional string VehicleModel = 63;</code>
       * @return This builder for chaining.
       */
      public Builder clearVehicleModel() {
        bitField1_ = (bitField1_ & ~0x00000020);
        vehicleModel_ = getDefaultInstance().getVehicleModel();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车辆型号
       * </pre>
       *
       * <code>optional string VehicleModel = 63;</code>
       * @param value The bytes for vehicleModel to set.
       * @return This builder for chaining.
       */
      public Builder setVehicleModelBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000020;
        vehicleModel_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object vehicleStyles_ = "";
      /**
       * <pre>
       * 车辆年款,多个可能值用英文逗号分隔。例如“2014,2015,2016”
       * </pre>
       *
       * <code>optional string VehicleStyles = 64;</code>
       * @return Whether the vehicleStyles field is set.
       */
      public boolean hasVehicleStyles() {
        return ((bitField1_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * 车辆年款,多个可能值用英文逗号分隔。例如“2014,2015,2016”
       * </pre>
       *
       * <code>optional string VehicleStyles = 64;</code>
       * @return The vehicleStyles.
       */
      public java.lang.String getVehicleStyles() {
        java.lang.Object ref = vehicleStyles_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            vehicleStyles_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 车辆年款,多个可能值用英文逗号分隔。例如“2014,2015,2016”
       * </pre>
       *
       * <code>optional string VehicleStyles = 64;</code>
       * @return The bytes for vehicleStyles.
       */
      public com.google.protobuf.ByteString
          getVehicleStylesBytes() {
        java.lang.Object ref = vehicleStyles_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vehicleStyles_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 车辆年款,多个可能值用英文逗号分隔。例如“2014,2015,2016”
       * </pre>
       *
       * <code>optional string VehicleStyles = 64;</code>
       * @param value The vehicleStyles to set.
       * @return This builder for chaining.
       */
      public Builder setVehicleStyles(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000040;
        vehicleStyles_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车辆年款,多个可能值用英文逗号分隔。例如“2014,2015,2016”
       * </pre>
       *
       * <code>optional string VehicleStyles = 64;</code>
       * @return This builder for chaining.
       */
      public Builder clearVehicleStyles() {
        bitField1_ = (bitField1_ & ~0x00000040);
        vehicleStyles_ = getDefaultInstance().getVehicleStyles();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车辆年款,多个可能值用英文逗号分隔。例如“2014,2015,2016”
       * </pre>
       *
       * <code>optional string VehicleStyles = 64;</code>
       * @param value The bytes for vehicleStyles to set.
       * @return This builder for chaining.
       */
      public Builder setVehicleStylesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000040;
        vehicleStyles_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object plateClass_ = "";
      /**
       * <pre>
       * 车牌类型 atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateClass = 65;</code>
       * @return Whether the plateClass field is set.
       */
      public boolean hasPlateClass() {
        return ((bitField1_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * 车牌类型 atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateClass = 65;</code>
       * @return The plateClass.
       */
      public java.lang.String getPlateClass() {
        java.lang.Object ref = plateClass_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            plateClass_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 车牌类型 atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateClass = 65;</code>
       * @return The bytes for plateClass.
       */
      public com.google.protobuf.ByteString
          getPlateClassBytes() {
        java.lang.Object ref = plateClass_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          plateClass_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 车牌类型 atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateClass = 65;</code>
       * @param value The plateClass to set.
       * @return This builder for chaining.
       */
      public Builder setPlateClass(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000080;
        plateClass_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车牌类型 atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateClass = 65;</code>
       * @return This builder for chaining.
       */
      public Builder clearPlateClass() {
        bitField1_ = (bitField1_ & ~0x00000080);
        plateClass_ = getDefaultInstance().getPlateClass();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车牌类型 atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateClass = 65;</code>
       * @param value The bytes for plateClass to set.
       * @return This builder for chaining.
       */
      public Builder setPlateClassBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000080;
        plateClass_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object plateColor_ = "";
      /**
       * <pre>
       * 车牌颜色,2位字符串 atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateColor = 66;</code>
       * @return Whether the plateColor field is set.
       */
      public boolean hasPlateColor() {
        return ((bitField1_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * 车牌颜色,2位字符串 atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateColor = 66;</code>
       * @return The plateColor.
       */
      public java.lang.String getPlateColor() {
        java.lang.Object ref = plateColor_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            plateColor_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 车牌颜色,2位字符串 atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateColor = 66;</code>
       * @return The bytes for plateColor.
       */
      public com.google.protobuf.ByteString
          getPlateColorBytes() {
        java.lang.Object ref = plateColor_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          plateColor_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 车牌颜色,2位字符串 atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateColor = 66;</code>
       * @param value The plateColor to set.
       * @return This builder for chaining.
       */
      public Builder setPlateColor(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000100;
        plateColor_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车牌颜色,2位字符串 atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateColor = 66;</code>
       * @return This builder for chaining.
       */
      public Builder clearPlateColor() {
        bitField1_ = (bitField1_ & ~0x00000100);
        plateColor_ = getDefaultInstance().getPlateColor();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车牌颜色,2位字符串 atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateColor = 66;</code>
       * @param value The bytes for plateColor to set.
       * @return This builder for chaining.
       */
      public Builder setPlateColorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000100;
        plateColor_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object plateNo_ = "";
      /**
       * <pre>
       * 车牌号码，atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateNo = 67;</code>
       * @return Whether the plateNo field is set.
       */
      public boolean hasPlateNo() {
        return ((bitField1_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * 车牌号码，atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateNo = 67;</code>
       * @return The plateNo.
       */
      public java.lang.String getPlateNo() {
        java.lang.Object ref = plateNo_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            plateNo_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 车牌号码，atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateNo = 67;</code>
       * @return The bytes for plateNo.
       */
      public com.google.protobuf.ByteString
          getPlateNoBytes() {
        java.lang.Object ref = plateNo_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          plateNo_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 车牌号码，atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateNo = 67;</code>
       * @param value The plateNo to set.
       * @return This builder for chaining.
       */
      public Builder setPlateNo(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000200;
        plateNo_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车牌号码，atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateNo = 67;</code>
       * @return This builder for chaining.
       */
      public Builder clearPlateNo() {
        bitField1_ = (bitField1_ & ~0x00000200);
        plateNo_ = getDefaultInstance().getPlateNo();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 车牌号码，atlas &amp; its
       * </pre>
       *
       * <code>optional string PlateNo = 67;</code>
       * @param value The bytes for plateNo to set.
       * @return This builder for chaining.
       */
      public Builder setPlateNoBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000200;
        plateNo_ = value;
        onChanged();
        return this;
      }

      private int carDirection_ ;
      /**
       * <pre>
       * 是否拍车头、车尾
       * </pre>
       *
       * <code>optional int32 CarDirection = 70;</code>
       * @return Whether the carDirection field is set.
       */
      @java.lang.Override
      public boolean hasCarDirection() {
        return ((bitField1_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * 是否拍车头、车尾
       * </pre>
       *
       * <code>optional int32 CarDirection = 70;</code>
       * @return The carDirection.
       */
      @java.lang.Override
      public int getCarDirection() {
        return carDirection_;
      }
      /**
       * <pre>
       * 是否拍车头、车尾
       * </pre>
       *
       * <code>optional int32 CarDirection = 70;</code>
       * @param value The carDirection to set.
       * @return This builder for chaining.
       */
      public Builder setCarDirection(int value) {
        bitField1_ |= 0x00000400;
        carDirection_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 是否拍车头、车尾
       * </pre>
       *
       * <code>optional int32 CarDirection = 70;</code>
       * @return This builder for chaining.
       */
      public Builder clearCarDirection() {
        bitField1_ = (bitField1_ & ~0x00000400);
        carDirection_ = 0;
        onChanged();
        return this;
      }

      private int specialVehicleType_ ;
      /**
       * <pre>
       * 特殊车型
       * </pre>
       *
       * <code>optional int32 SpecialVehicleType = 71;</code>
       * @return Whether the specialVehicleType field is set.
       */
      @java.lang.Override
      public boolean hasSpecialVehicleType() {
        return ((bitField1_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       * 特殊车型
       * </pre>
       *
       * <code>optional int32 SpecialVehicleType = 71;</code>
       * @return The specialVehicleType.
       */
      @java.lang.Override
      public int getSpecialVehicleType() {
        return specialVehicleType_;
      }
      /**
       * <pre>
       * 特殊车型
       * </pre>
       *
       * <code>optional int32 SpecialVehicleType = 71;</code>
       * @param value The specialVehicleType to set.
       * @return This builder for chaining.
       */
      public Builder setSpecialVehicleType(int value) {
        bitField1_ |= 0x00000800;
        specialVehicleType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 特殊车型
       * </pre>
       *
       * <code>optional int32 SpecialVehicleType = 71;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpecialVehicleType() {
        bitField1_ = (bitField1_ & ~0x00000800);
        specialVehicleType_ = 0;
        onChanged();
        return this;
      }

      private int dataSourceIP_ ;
      /**
       * <pre>
       *目标来自camera的ip; atals使用
       * </pre>
       *
       * <code>optional uint32 dataSourceIP = 72;</code>
       * @return Whether the dataSourceIP field is set.
       */
      @java.lang.Override
      public boolean hasDataSourceIP() {
        return ((bitField1_ & 0x00001000) != 0);
      }
      /**
       * <pre>
       *目标来自camera的ip; atals使用
       * </pre>
       *
       * <code>optional uint32 dataSourceIP = 72;</code>
       * @return The dataSourceIP.
       */
      @java.lang.Override
      public int getDataSourceIP() {
        return dataSourceIP_;
      }
      /**
       * <pre>
       *目标来自camera的ip; atals使用
       * </pre>
       *
       * <code>optional uint32 dataSourceIP = 72;</code>
       * @param value The dataSourceIP to set.
       * @return This builder for chaining.
       */
      public Builder setDataSourceIP(int value) {
        bitField1_ |= 0x00001000;
        dataSourceIP_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *目标来自camera的ip; atals使用
       * </pre>
       *
       * <code>optional uint32 dataSourceIP = 72;</code>
       * @return This builder for chaining.
       */
      public Builder clearDataSourceIP() {
        bitField1_ = (bitField1_ & ~0x00001000);
        dataSourceIP_ = 0;
        onChanged();
        return this;
      }

      private int heading_ ;
      /**
       * <pre>
       *车辆航向角。为车头方向与正北方向的顺时针夹角,分辨率为0.0125°。
       * </pre>
       *
       * <code>optional int32 heading = 73;</code>
       * @return Whether the heading field is set.
       */
      @java.lang.Override
      public boolean hasHeading() {
        return ((bitField1_ & 0x00002000) != 0);
      }
      /**
       * <pre>
       *车辆航向角。为车头方向与正北方向的顺时针夹角,分辨率为0.0125°。
       * </pre>
       *
       * <code>optional int32 heading = 73;</code>
       * @return The heading.
       */
      @java.lang.Override
      public int getHeading() {
        return heading_;
      }
      /**
       * <pre>
       *车辆航向角。为车头方向与正北方向的顺时针夹角,分辨率为0.0125°。
       * </pre>
       *
       * <code>optional int32 heading = 73;</code>
       * @param value The heading to set.
       * @return This builder for chaining.
       */
      public Builder setHeading(int value) {
        bitField1_ |= 0x00002000;
        heading_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *车辆航向角。为车头方向与正北方向的顺时针夹角,分辨率为0.0125°。
       * </pre>
       *
       * <code>optional int32 heading = 73;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeading() {
        bitField1_ = (bitField1_ & ~0x00002000);
        heading_ = 0;
        onChanged();
        return this;
      }

      private int speed_ ;
      /**
       * <pre>
       *当前车速，定义车速大小，分辨率为0.01m/s
       * </pre>
       *
       * <code>optional int32 speed = 74;</code>
       * @return Whether the speed field is set.
       */
      @java.lang.Override
      public boolean hasSpeed() {
        return ((bitField1_ & 0x00004000) != 0);
      }
      /**
       * <pre>
       *当前车速，定义车速大小，分辨率为0.01m/s
       * </pre>
       *
       * <code>optional int32 speed = 74;</code>
       * @return The speed.
       */
      @java.lang.Override
      public int getSpeed() {
        return speed_;
      }
      /**
       * <pre>
       *当前车速，定义车速大小，分辨率为0.01m/s
       * </pre>
       *
       * <code>optional int32 speed = 74;</code>
       * @param value The speed to set.
       * @return This builder for chaining.
       */
      public Builder setSpeed(int value) {
        bitField1_ |= 0x00004000;
        speed_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *当前车速，定义车速大小，分辨率为0.01m/s
       * </pre>
       *
       * <code>optional int32 speed = 74;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpeed() {
        bitField1_ = (bitField1_ & ~0x00004000);
        speed_ = 0;
        onChanged();
        return this;
      }

      private if_proto_common.BxtCommonMathPoint.PointGPS gps_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathPoint.PointGPS, if_proto_common.BxtCommonMathPoint.PointGPS.Builder, if_proto_common.BxtCommonMathPoint.PointGPSOrBuilder> gpsBuilder_;
      /**
       * <pre>
       *gps 坐标
       * </pre>
       *
       * <code>optional .if_proto_common.PointGPS gps = 75;</code>
       * @return Whether the gps field is set.
       */
      public boolean hasGps() {
        return ((bitField1_ & 0x00008000) != 0);
      }
      /**
       * <pre>
       *gps 坐标
       * </pre>
       *
       * <code>optional .if_proto_common.PointGPS gps = 75;</code>
       * @return The gps.
       */
      public if_proto_common.BxtCommonMathPoint.PointGPS getGps() {
        if (gpsBuilder_ == null) {
          return gps_ == null ? if_proto_common.BxtCommonMathPoint.PointGPS.getDefaultInstance() : gps_;
        } else {
          return gpsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *gps 坐标
       * </pre>
       *
       * <code>optional .if_proto_common.PointGPS gps = 75;</code>
       */
      public Builder setGps(if_proto_common.BxtCommonMathPoint.PointGPS value) {
        if (gpsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gps_ = value;
          onChanged();
        } else {
          gpsBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00008000;
        return this;
      }
      /**
       * <pre>
       *gps 坐标
       * </pre>
       *
       * <code>optional .if_proto_common.PointGPS gps = 75;</code>
       */
      public Builder setGps(
          if_proto_common.BxtCommonMathPoint.PointGPS.Builder builderForValue) {
        if (gpsBuilder_ == null) {
          gps_ = builderForValue.build();
          onChanged();
        } else {
          gpsBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00008000;
        return this;
      }
      /**
       * <pre>
       *gps 坐标
       * </pre>
       *
       * <code>optional .if_proto_common.PointGPS gps = 75;</code>
       */
      public Builder mergeGps(if_proto_common.BxtCommonMathPoint.PointGPS value) {
        if (gpsBuilder_ == null) {
          if (((bitField1_ & 0x00008000) != 0) &&
              gps_ != null &&
              gps_ != if_proto_common.BxtCommonMathPoint.PointGPS.getDefaultInstance()) {
            gps_ =
              if_proto_common.BxtCommonMathPoint.PointGPS.newBuilder(gps_).mergeFrom(value).buildPartial();
          } else {
            gps_ = value;
          }
          onChanged();
        } else {
          gpsBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00008000;
        return this;
      }
      /**
       * <pre>
       *gps 坐标
       * </pre>
       *
       * <code>optional .if_proto_common.PointGPS gps = 75;</code>
       */
      public Builder clearGps() {
        if (gpsBuilder_ == null) {
          gps_ = null;
          onChanged();
        } else {
          gpsBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00008000);
        return this;
      }
      /**
       * <pre>
       *gps 坐标
       * </pre>
       *
       * <code>optional .if_proto_common.PointGPS gps = 75;</code>
       */
      public if_proto_common.BxtCommonMathPoint.PointGPS.Builder getGpsBuilder() {
        bitField1_ |= 0x00008000;
        onChanged();
        return getGpsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *gps 坐标
       * </pre>
       *
       * <code>optional .if_proto_common.PointGPS gps = 75;</code>
       */
      public if_proto_common.BxtCommonMathPoint.PointGPSOrBuilder getGpsOrBuilder() {
        if (gpsBuilder_ != null) {
          return gpsBuilder_.getMessageOrBuilder();
        } else {
          return gps_ == null ?
              if_proto_common.BxtCommonMathPoint.PointGPS.getDefaultInstance() : gps_;
        }
      }
      /**
       * <pre>
       *gps 坐标
       * </pre>
       *
       * <code>optional .if_proto_common.PointGPS gps = 75;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathPoint.PointGPS, if_proto_common.BxtCommonMathPoint.PointGPS.Builder, if_proto_common.BxtCommonMathPoint.PointGPSOrBuilder> 
          getGpsFieldBuilder() {
        if (gpsBuilder_ == null) {
          gpsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtCommonMathPoint.PointGPS, if_proto_common.BxtCommonMathPoint.PointGPS.Builder, if_proto_common.BxtCommonMathPoint.PointGPSOrBuilder>(
                  getGps(),
                  getParentForChildren(),
                  isClean());
          gps_ = null;
        }
        return gpsBuilder_;
      }

      private int speedConfidence_ ;
      /**
       * <pre>
       * ======= 10.1版本新增 ========
       * </pre>
       *
       * <code>optional uint32 speedConfidence = 76;</code>
       * @return Whether the speedConfidence field is set.
       */
      @java.lang.Override
      public boolean hasSpeedConfidence() {
        return ((bitField1_ & 0x00010000) != 0);
      }
      /**
       * <pre>
       * ======= 10.1版本新增 ========
       * </pre>
       *
       * <code>optional uint32 speedConfidence = 76;</code>
       * @return The speedConfidence.
       */
      @java.lang.Override
      public int getSpeedConfidence() {
        return speedConfidence_;
      }
      /**
       * <pre>
       * ======= 10.1版本新增 ========
       * </pre>
       *
       * <code>optional uint32 speedConfidence = 76;</code>
       * @param value The speedConfidence to set.
       * @return This builder for chaining.
       */
      public Builder setSpeedConfidence(int value) {
        bitField1_ |= 0x00010000;
        speedConfidence_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ======= 10.1版本新增 ========
       * </pre>
       *
       * <code>optional uint32 speedConfidence = 76;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpeedConfidence() {
        bitField1_ = (bitField1_ & ~0x00010000);
        speedConfidence_ = 0;
        onChanged();
        return this;
      }

      private int posConfidence_ ;
      /**
       * <pre>
       *速度置信度 0~100 
       * </pre>
       *
       * <code>optional uint32 posConfidence = 77;</code>
       * @return Whether the posConfidence field is set.
       */
      @java.lang.Override
      public boolean hasPosConfidence() {
        return ((bitField1_ & 0x00020000) != 0);
      }
      /**
       * <pre>
       *速度置信度 0~100 
       * </pre>
       *
       * <code>optional uint32 posConfidence = 77;</code>
       * @return The posConfidence.
       */
      @java.lang.Override
      public int getPosConfidence() {
        return posConfidence_;
      }
      /**
       * <pre>
       *速度置信度 0~100 
       * </pre>
       *
       * <code>optional uint32 posConfidence = 77;</code>
       * @param value The posConfidence to set.
       * @return This builder for chaining.
       */
      public Builder setPosConfidence(int value) {
        bitField1_ |= 0x00020000;
        posConfidence_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *速度置信度 0~100 
       * </pre>
       *
       * <code>optional uint32 posConfidence = 77;</code>
       * @return This builder for chaining.
       */
      public Builder clearPosConfidence() {
        bitField1_ = (bitField1_ & ~0x00020000);
        posConfidence_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object targetCameraIP_ = "";
      /**
       * <pre>
       *目标对应的相机IP, 仅路段使用, 路口不需要也无法提供 
       * </pre>
       *
       * <code>optional string targetCameraIP = 78;</code>
       * @return Whether the targetCameraIP field is set.
       */
      public boolean hasTargetCameraIP() {
        return ((bitField1_ & 0x00040000) != 0);
      }
      /**
       * <pre>
       *目标对应的相机IP, 仅路段使用, 路口不需要也无法提供 
       * </pre>
       *
       * <code>optional string targetCameraIP = 78;</code>
       * @return The targetCameraIP.
       */
      public java.lang.String getTargetCameraIP() {
        java.lang.Object ref = targetCameraIP_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            targetCameraIP_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *目标对应的相机IP, 仅路段使用, 路口不需要也无法提供 
       * </pre>
       *
       * <code>optional string targetCameraIP = 78;</code>
       * @return The bytes for targetCameraIP.
       */
      public com.google.protobuf.ByteString
          getTargetCameraIPBytes() {
        java.lang.Object ref = targetCameraIP_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          targetCameraIP_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *目标对应的相机IP, 仅路段使用, 路口不需要也无法提供 
       * </pre>
       *
       * <code>optional string targetCameraIP = 78;</code>
       * @param value The targetCameraIP to set.
       * @return This builder for chaining.
       */
      public Builder setTargetCameraIP(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00040000;
        targetCameraIP_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *目标对应的相机IP, 仅路段使用, 路口不需要也无法提供 
       * </pre>
       *
       * <code>optional string targetCameraIP = 78;</code>
       * @return This builder for chaining.
       */
      public Builder clearTargetCameraIP() {
        bitField1_ = (bitField1_ & ~0x00040000);
        targetCameraIP_ = getDefaultInstance().getTargetCameraIP();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *目标对应的相机IP, 仅路段使用, 路口不需要也无法提供 
       * </pre>
       *
       * <code>optional string targetCameraIP = 78;</code>
       * @param value The bytes for targetCameraIP to set.
       * @return This builder for chaining.
       */
      public Builder setTargetCameraIPBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00040000;
        targetCameraIP_ = value;
        onChanged();
        return this;
      }

      private int targetCameraDis_ ;
      /**
       * <pre>
       *目标对应到相机的纵向距离, 单位m, 仅路段使用,路口不需要也无法提供 
       * </pre>
       *
       * <code>optional uint32 targetCameraDis = 79;</code>
       * @return Whether the targetCameraDis field is set.
       */
      @java.lang.Override
      public boolean hasTargetCameraDis() {
        return ((bitField1_ & 0x00080000) != 0);
      }
      /**
       * <pre>
       *目标对应到相机的纵向距离, 单位m, 仅路段使用,路口不需要也无法提供 
       * </pre>
       *
       * <code>optional uint32 targetCameraDis = 79;</code>
       * @return The targetCameraDis.
       */
      @java.lang.Override
      public int getTargetCameraDis() {
        return targetCameraDis_;
      }
      /**
       * <pre>
       *目标对应到相机的纵向距离, 单位m, 仅路段使用,路口不需要也无法提供 
       * </pre>
       *
       * <code>optional uint32 targetCameraDis = 79;</code>
       * @param value The targetCameraDis to set.
       * @return This builder for chaining.
       */
      public Builder setTargetCameraDis(int value) {
        bitField1_ |= 0x00080000;
        targetCameraDis_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *目标对应到相机的纵向距离, 单位m, 仅路段使用,路口不需要也无法提供 
       * </pre>
       *
       * <code>optional uint32 targetCameraDis = 79;</code>
       * @return This builder for chaining.
       */
      public Builder clearTargetCameraDis() {
        bitField1_ = (bitField1_ & ~0x00080000);
        targetCameraDis_ = 0;
        onChanged();
        return this;
      }

      private if_proto_common.BxtObstacleV2.CameraSupplement cameraSupplement_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtObstacleV2.CameraSupplement, if_proto_common.BxtObstacleV2.CameraSupplement.Builder, if_proto_common.BxtObstacleV2.CameraSupplementOrBuilder> cameraSupplementBuilder_;
      /**
       * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
       * @return Whether the cameraSupplement field is set.
       */
      public boolean hasCameraSupplement() {
        return ((bitField1_ & 0x00100000) != 0);
      }
      /**
       * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
       * @return The cameraSupplement.
       */
      public if_proto_common.BxtObstacleV2.CameraSupplement getCameraSupplement() {
        if (cameraSupplementBuilder_ == null) {
          return cameraSupplement_ == null ? if_proto_common.BxtObstacleV2.CameraSupplement.getDefaultInstance() : cameraSupplement_;
        } else {
          return cameraSupplementBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
       */
      public Builder setCameraSupplement(if_proto_common.BxtObstacleV2.CameraSupplement value) {
        if (cameraSupplementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cameraSupplement_ = value;
          onChanged();
        } else {
          cameraSupplementBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
       */
      public Builder setCameraSupplement(
          if_proto_common.BxtObstacleV2.CameraSupplement.Builder builderForValue) {
        if (cameraSupplementBuilder_ == null) {
          cameraSupplement_ = builderForValue.build();
          onChanged();
        } else {
          cameraSupplementBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
       */
      public Builder mergeCameraSupplement(if_proto_common.BxtObstacleV2.CameraSupplement value) {
        if (cameraSupplementBuilder_ == null) {
          if (((bitField1_ & 0x00100000) != 0) &&
              cameraSupplement_ != null &&
              cameraSupplement_ != if_proto_common.BxtObstacleV2.CameraSupplement.getDefaultInstance()) {
            cameraSupplement_ =
              if_proto_common.BxtObstacleV2.CameraSupplement.newBuilder(cameraSupplement_).mergeFrom(value).buildPartial();
          } else {
            cameraSupplement_ = value;
          }
          onChanged();
        } else {
          cameraSupplementBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
       */
      public Builder clearCameraSupplement() {
        if (cameraSupplementBuilder_ == null) {
          cameraSupplement_ = null;
          onChanged();
        } else {
          cameraSupplementBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00100000);
        return this;
      }
      /**
       * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
       */
      public if_proto_common.BxtObstacleV2.CameraSupplement.Builder getCameraSupplementBuilder() {
        bitField1_ |= 0x00100000;
        onChanged();
        return getCameraSupplementFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
       */
      public if_proto_common.BxtObstacleV2.CameraSupplementOrBuilder getCameraSupplementOrBuilder() {
        if (cameraSupplementBuilder_ != null) {
          return cameraSupplementBuilder_.getMessageOrBuilder();
        } else {
          return cameraSupplement_ == null ?
              if_proto_common.BxtObstacleV2.CameraSupplement.getDefaultInstance() : cameraSupplement_;
        }
      }
      /**
       * <code>optional .if_proto_common.CameraSupplement camera_supplement = 100;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtObstacleV2.CameraSupplement, if_proto_common.BxtObstacleV2.CameraSupplement.Builder, if_proto_common.BxtObstacleV2.CameraSupplementOrBuilder> 
          getCameraSupplementFieldBuilder() {
        if (cameraSupplementBuilder_ == null) {
          cameraSupplementBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtObstacleV2.CameraSupplement, if_proto_common.BxtObstacleV2.CameraSupplement.Builder, if_proto_common.BxtObstacleV2.CameraSupplementOrBuilder>(
                  getCameraSupplement(),
                  getParentForChildren(),
                  isClean());
          cameraSupplement_ = null;
        }
        return cameraSupplementBuilder_;
      }

      private if_proto_common.BxtObstacleV2.LidarSupplement lidarSupplement_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtObstacleV2.LidarSupplement, if_proto_common.BxtObstacleV2.LidarSupplement.Builder, if_proto_common.BxtObstacleV2.LidarSupplementOrBuilder> lidarSupplementBuilder_;
      /**
       * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
       * @return Whether the lidarSupplement field is set.
       */
      public boolean hasLidarSupplement() {
        return ((bitField1_ & 0x00200000) != 0);
      }
      /**
       * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
       * @return The lidarSupplement.
       */
      public if_proto_common.BxtObstacleV2.LidarSupplement getLidarSupplement() {
        if (lidarSupplementBuilder_ == null) {
          return lidarSupplement_ == null ? if_proto_common.BxtObstacleV2.LidarSupplement.getDefaultInstance() : lidarSupplement_;
        } else {
          return lidarSupplementBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
       */
      public Builder setLidarSupplement(if_proto_common.BxtObstacleV2.LidarSupplement value) {
        if (lidarSupplementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lidarSupplement_ = value;
          onChanged();
        } else {
          lidarSupplementBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
       */
      public Builder setLidarSupplement(
          if_proto_common.BxtObstacleV2.LidarSupplement.Builder builderForValue) {
        if (lidarSupplementBuilder_ == null) {
          lidarSupplement_ = builderForValue.build();
          onChanged();
        } else {
          lidarSupplementBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
       */
      public Builder mergeLidarSupplement(if_proto_common.BxtObstacleV2.LidarSupplement value) {
        if (lidarSupplementBuilder_ == null) {
          if (((bitField1_ & 0x00200000) != 0) &&
              lidarSupplement_ != null &&
              lidarSupplement_ != if_proto_common.BxtObstacleV2.LidarSupplement.getDefaultInstance()) {
            lidarSupplement_ =
              if_proto_common.BxtObstacleV2.LidarSupplement.newBuilder(lidarSupplement_).mergeFrom(value).buildPartial();
          } else {
            lidarSupplement_ = value;
          }
          onChanged();
        } else {
          lidarSupplementBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
       */
      public Builder clearLidarSupplement() {
        if (lidarSupplementBuilder_ == null) {
          lidarSupplement_ = null;
          onChanged();
        } else {
          lidarSupplementBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00200000);
        return this;
      }
      /**
       * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
       */
      public if_proto_common.BxtObstacleV2.LidarSupplement.Builder getLidarSupplementBuilder() {
        bitField1_ |= 0x00200000;
        onChanged();
        return getLidarSupplementFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
       */
      public if_proto_common.BxtObstacleV2.LidarSupplementOrBuilder getLidarSupplementOrBuilder() {
        if (lidarSupplementBuilder_ != null) {
          return lidarSupplementBuilder_.getMessageOrBuilder();
        } else {
          return lidarSupplement_ == null ?
              if_proto_common.BxtObstacleV2.LidarSupplement.getDefaultInstance() : lidarSupplement_;
        }
      }
      /**
       * <code>optional .if_proto_common.LidarSupplement lidar_supplement = 101;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtObstacleV2.LidarSupplement, if_proto_common.BxtObstacleV2.LidarSupplement.Builder, if_proto_common.BxtObstacleV2.LidarSupplementOrBuilder> 
          getLidarSupplementFieldBuilder() {
        if (lidarSupplementBuilder_ == null) {
          lidarSupplementBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtObstacleV2.LidarSupplement, if_proto_common.BxtObstacleV2.LidarSupplement.Builder, if_proto_common.BxtObstacleV2.LidarSupplementOrBuilder>(
                  getLidarSupplement(),
                  getParentForChildren(),
                  isClean());
          lidarSupplement_ = null;
        }
        return lidarSupplementBuilder_;
      }

      private if_proto_common.BxtObstacleV2.RadarSupplement radarSupplement_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtObstacleV2.RadarSupplement, if_proto_common.BxtObstacleV2.RadarSupplement.Builder, if_proto_common.BxtObstacleV2.RadarSupplementOrBuilder> radarSupplementBuilder_;
      /**
       * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
       * @return Whether the radarSupplement field is set.
       */
      public boolean hasRadarSupplement() {
        return ((bitField1_ & 0x00400000) != 0);
      }
      /**
       * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
       * @return The radarSupplement.
       */
      public if_proto_common.BxtObstacleV2.RadarSupplement getRadarSupplement() {
        if (radarSupplementBuilder_ == null) {
          return radarSupplement_ == null ? if_proto_common.BxtObstacleV2.RadarSupplement.getDefaultInstance() : radarSupplement_;
        } else {
          return radarSupplementBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
       */
      public Builder setRadarSupplement(if_proto_common.BxtObstacleV2.RadarSupplement value) {
        if (radarSupplementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          radarSupplement_ = value;
          onChanged();
        } else {
          radarSupplementBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
       */
      public Builder setRadarSupplement(
          if_proto_common.BxtObstacleV2.RadarSupplement.Builder builderForValue) {
        if (radarSupplementBuilder_ == null) {
          radarSupplement_ = builderForValue.build();
          onChanged();
        } else {
          radarSupplementBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
       */
      public Builder mergeRadarSupplement(if_proto_common.BxtObstacleV2.RadarSupplement value) {
        if (radarSupplementBuilder_ == null) {
          if (((bitField1_ & 0x00400000) != 0) &&
              radarSupplement_ != null &&
              radarSupplement_ != if_proto_common.BxtObstacleV2.RadarSupplement.getDefaultInstance()) {
            radarSupplement_ =
              if_proto_common.BxtObstacleV2.RadarSupplement.newBuilder(radarSupplement_).mergeFrom(value).buildPartial();
          } else {
            radarSupplement_ = value;
          }
          onChanged();
        } else {
          radarSupplementBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
       */
      public Builder clearRadarSupplement() {
        if (radarSupplementBuilder_ == null) {
          radarSupplement_ = null;
          onChanged();
        } else {
          radarSupplementBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00400000);
        return this;
      }
      /**
       * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
       */
      public if_proto_common.BxtObstacleV2.RadarSupplement.Builder getRadarSupplementBuilder() {
        bitField1_ |= 0x00400000;
        onChanged();
        return getRadarSupplementFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
       */
      public if_proto_common.BxtObstacleV2.RadarSupplementOrBuilder getRadarSupplementOrBuilder() {
        if (radarSupplementBuilder_ != null) {
          return radarSupplementBuilder_.getMessageOrBuilder();
        } else {
          return radarSupplement_ == null ?
              if_proto_common.BxtObstacleV2.RadarSupplement.getDefaultInstance() : radarSupplement_;
        }
      }
      /**
       * <code>optional .if_proto_common.RadarSupplement radar_supplement = 102;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtObstacleV2.RadarSupplement, if_proto_common.BxtObstacleV2.RadarSupplement.Builder, if_proto_common.BxtObstacleV2.RadarSupplementOrBuilder> 
          getRadarSupplementFieldBuilder() {
        if (radarSupplementBuilder_ == null) {
          radarSupplementBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtObstacleV2.RadarSupplement, if_proto_common.BxtObstacleV2.RadarSupplement.Builder, if_proto_common.BxtObstacleV2.RadarSupplementOrBuilder>(
                  getRadarSupplement(),
                  getParentForChildren(),
                  isClean());
          radarSupplement_ = null;
        }
        return radarSupplementBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:if_proto_common.Obstacle)
    }

    // @@protoc_insertion_point(class_scope:if_proto_common.Obstacle)
    private static final if_proto_common.BxtObstacleV2.Obstacle DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new if_proto_common.BxtObstacleV2.Obstacle();
    }

    public static if_proto_common.BxtObstacleV2.Obstacle getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Obstacle>
        PARSER = new com.google.protobuf.AbstractParser<Obstacle>() {
      @java.lang.Override
      public Obstacle parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Obstacle(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Obstacle> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Obstacle> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public if_proto_common.BxtObstacleV2.Obstacle getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LidarSupplementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:if_proto_common.LidarSupplement)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * grids occupied by this obstacle.
     * </pre>
     *
     * <code>repeated int32 occupied_grids = 1 [packed = true];</code>
     * @return A list containing the occupiedGrids.
     */
    java.util.List<java.lang.Integer> getOccupiedGridsList();
    /**
     * <pre>
     * grids occupied by this obstacle.
     * </pre>
     *
     * <code>repeated int32 occupied_grids = 1 [packed = true];</code>
     * @return The count of occupiedGrids.
     */
    int getOccupiedGridsCount();
    /**
     * <pre>
     * grids occupied by this obstacle.
     * </pre>
     *
     * <code>repeated int32 occupied_grids = 1 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The occupiedGrids at the given index.
     */
    int getOccupiedGrids(int index);
  }
  /**
   * Protobuf type {@code if_proto_common.LidarSupplement}
   */
  public static final class LidarSupplement extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:if_proto_common.LidarSupplement)
      LidarSupplementOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LidarSupplement.newBuilder() to construct.
    private LidarSupplement(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LidarSupplement() {
      occupiedGrids_ = emptyIntList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LidarSupplement();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LidarSupplement(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                occupiedGrids_ = newIntList();
                mutable_bitField0_ |= 0x00000001;
              }
              occupiedGrids_.addInt(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                occupiedGrids_ = newIntList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                occupiedGrids_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          occupiedGrids_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_LidarSupplement_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_LidarSupplement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              if_proto_common.BxtObstacleV2.LidarSupplement.class, if_proto_common.BxtObstacleV2.LidarSupplement.Builder.class);
    }

    public static final int OCCUPIED_GRIDS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.IntList occupiedGrids_;
    /**
     * <pre>
     * grids occupied by this obstacle.
     * </pre>
     *
     * <code>repeated int32 occupied_grids = 1 [packed = true];</code>
     * @return A list containing the occupiedGrids.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getOccupiedGridsList() {
      return occupiedGrids_;
    }
    /**
     * <pre>
     * grids occupied by this obstacle.
     * </pre>
     *
     * <code>repeated int32 occupied_grids = 1 [packed = true];</code>
     * @return The count of occupiedGrids.
     */
    public int getOccupiedGridsCount() {
      return occupiedGrids_.size();
    }
    /**
     * <pre>
     * grids occupied by this obstacle.
     * </pre>
     *
     * <code>repeated int32 occupied_grids = 1 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The occupiedGrids at the given index.
     */
    public int getOccupiedGrids(int index) {
      return occupiedGrids_.getInt(index);
    }
    private int occupiedGridsMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getOccupiedGridsList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(occupiedGridsMemoizedSerializedSize);
      }
      for (int i = 0; i < occupiedGrids_.size(); i++) {
        output.writeInt32NoTag(occupiedGrids_.getInt(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < occupiedGrids_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(occupiedGrids_.getInt(i));
        }
        size += dataSize;
        if (!getOccupiedGridsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        occupiedGridsMemoizedSerializedSize = dataSize;
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof if_proto_common.BxtObstacleV2.LidarSupplement)) {
        return super.equals(obj);
      }
      if_proto_common.BxtObstacleV2.LidarSupplement other = (if_proto_common.BxtObstacleV2.LidarSupplement) obj;

      if (!getOccupiedGridsList()
          .equals(other.getOccupiedGridsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getOccupiedGridsCount() > 0) {
        hash = (37 * hash) + OCCUPIED_GRIDS_FIELD_NUMBER;
        hash = (53 * hash) + getOccupiedGridsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static if_proto_common.BxtObstacleV2.LidarSupplement parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.LidarSupplement parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.LidarSupplement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.LidarSupplement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.LidarSupplement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.LidarSupplement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.LidarSupplement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.LidarSupplement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.LidarSupplement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.LidarSupplement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.LidarSupplement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.LidarSupplement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(if_proto_common.BxtObstacleV2.LidarSupplement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code if_proto_common.LidarSupplement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:if_proto_common.LidarSupplement)
        if_proto_common.BxtObstacleV2.LidarSupplementOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_LidarSupplement_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_LidarSupplement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                if_proto_common.BxtObstacleV2.LidarSupplement.class, if_proto_common.BxtObstacleV2.LidarSupplement.Builder.class);
      }

      // Construct using if_proto_common.BxtObstacleV2.LidarSupplement.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        occupiedGrids_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_LidarSupplement_descriptor;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.LidarSupplement getDefaultInstanceForType() {
        return if_proto_common.BxtObstacleV2.LidarSupplement.getDefaultInstance();
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.LidarSupplement build() {
        if_proto_common.BxtObstacleV2.LidarSupplement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.LidarSupplement buildPartial() {
        if_proto_common.BxtObstacleV2.LidarSupplement result = new if_proto_common.BxtObstacleV2.LidarSupplement(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) != 0)) {
          occupiedGrids_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.occupiedGrids_ = occupiedGrids_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof if_proto_common.BxtObstacleV2.LidarSupplement) {
          return mergeFrom((if_proto_common.BxtObstacleV2.LidarSupplement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(if_proto_common.BxtObstacleV2.LidarSupplement other) {
        if (other == if_proto_common.BxtObstacleV2.LidarSupplement.getDefaultInstance()) return this;
        if (!other.occupiedGrids_.isEmpty()) {
          if (occupiedGrids_.isEmpty()) {
            occupiedGrids_ = other.occupiedGrids_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureOccupiedGridsIsMutable();
            occupiedGrids_.addAll(other.occupiedGrids_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if_proto_common.BxtObstacleV2.LidarSupplement parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (if_proto_common.BxtObstacleV2.LidarSupplement) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.IntList occupiedGrids_ = emptyIntList();
      private void ensureOccupiedGridsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          occupiedGrids_ = mutableCopy(occupiedGrids_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * grids occupied by this obstacle.
       * </pre>
       *
       * <code>repeated int32 occupied_grids = 1 [packed = true];</code>
       * @return A list containing the occupiedGrids.
       */
      public java.util.List<java.lang.Integer>
          getOccupiedGridsList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(occupiedGrids_) : occupiedGrids_;
      }
      /**
       * <pre>
       * grids occupied by this obstacle.
       * </pre>
       *
       * <code>repeated int32 occupied_grids = 1 [packed = true];</code>
       * @return The count of occupiedGrids.
       */
      public int getOccupiedGridsCount() {
        return occupiedGrids_.size();
      }
      /**
       * <pre>
       * grids occupied by this obstacle.
       * </pre>
       *
       * <code>repeated int32 occupied_grids = 1 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The occupiedGrids at the given index.
       */
      public int getOccupiedGrids(int index) {
        return occupiedGrids_.getInt(index);
      }
      /**
       * <pre>
       * grids occupied by this obstacle.
       * </pre>
       *
       * <code>repeated int32 occupied_grids = 1 [packed = true];</code>
       * @param index The index to set the value at.
       * @param value The occupiedGrids to set.
       * @return This builder for chaining.
       */
      public Builder setOccupiedGrids(
          int index, int value) {
        ensureOccupiedGridsIsMutable();
        occupiedGrids_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * grids occupied by this obstacle.
       * </pre>
       *
       * <code>repeated int32 occupied_grids = 1 [packed = true];</code>
       * @param value The occupiedGrids to add.
       * @return This builder for chaining.
       */
      public Builder addOccupiedGrids(int value) {
        ensureOccupiedGridsIsMutable();
        occupiedGrids_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * grids occupied by this obstacle.
       * </pre>
       *
       * <code>repeated int32 occupied_grids = 1 [packed = true];</code>
       * @param values The occupiedGrids to add.
       * @return This builder for chaining.
       */
      public Builder addAllOccupiedGrids(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOccupiedGridsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, occupiedGrids_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * grids occupied by this obstacle.
       * </pre>
       *
       * <code>repeated int32 occupied_grids = 1 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearOccupiedGrids() {
        occupiedGrids_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:if_proto_common.LidarSupplement)
    }

    // @@protoc_insertion_point(class_scope:if_proto_common.LidarSupplement)
    private static final if_proto_common.BxtObstacleV2.LidarSupplement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new if_proto_common.BxtObstacleV2.LidarSupplement();
    }

    public static if_proto_common.BxtObstacleV2.LidarSupplement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<LidarSupplement>
        PARSER = new com.google.protobuf.AbstractParser<LidarSupplement>() {
      @java.lang.Override
      public LidarSupplement parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LidarSupplement(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LidarSupplement> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LidarSupplement> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public if_proto_common.BxtObstacleV2.LidarSupplement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Box2dOrBuilder extends
      // @@protoc_insertion_point(interface_extends:if_proto_common.Box2d)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional double xmin = 1;</code>
     * @return Whether the xmin field is set.
     */
    boolean hasXmin();
    /**
     * <code>optional double xmin = 1;</code>
     * @return The xmin.
     */
    double getXmin();

    /**
     * <code>optional double ymin = 2;</code>
     * @return Whether the ymin field is set.
     */
    boolean hasYmin();
    /**
     * <code>optional double ymin = 2;</code>
     * @return The ymin.
     */
    double getYmin();

    /**
     * <code>optional double xmax = 3;</code>
     * @return Whether the xmax field is set.
     */
    boolean hasXmax();
    /**
     * <code>optional double xmax = 3;</code>
     * @return The xmax.
     */
    double getXmax();

    /**
     * <code>optional double ymax = 4;</code>
     * @return Whether the ymax field is set.
     */
    boolean hasYmax();
    /**
     * <code>optional double ymax = 4;</code>
     * @return The ymax.
     */
    double getYmax();
  }
  /**
   * Protobuf type {@code if_proto_common.Box2d}
   */
  public static final class Box2d extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:if_proto_common.Box2d)
      Box2dOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Box2d.newBuilder() to construct.
    private Box2d(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Box2d() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Box2d();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Box2d(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {
              bitField0_ |= 0x00000001;
              xmin_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              ymin_ = input.readDouble();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              xmax_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              ymax_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Box2d_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Box2d_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              if_proto_common.BxtObstacleV2.Box2d.class, if_proto_common.BxtObstacleV2.Box2d.Builder.class);
    }

    private int bitField0_;
    public static final int XMIN_FIELD_NUMBER = 1;
    private double xmin_;
    /**
     * <code>optional double xmin = 1;</code>
     * @return Whether the xmin field is set.
     */
    @java.lang.Override
    public boolean hasXmin() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional double xmin = 1;</code>
     * @return The xmin.
     */
    @java.lang.Override
    public double getXmin() {
      return xmin_;
    }

    public static final int YMIN_FIELD_NUMBER = 2;
    private double ymin_;
    /**
     * <code>optional double ymin = 2;</code>
     * @return Whether the ymin field is set.
     */
    @java.lang.Override
    public boolean hasYmin() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional double ymin = 2;</code>
     * @return The ymin.
     */
    @java.lang.Override
    public double getYmin() {
      return ymin_;
    }

    public static final int XMAX_FIELD_NUMBER = 3;
    private double xmax_;
    /**
     * <code>optional double xmax = 3;</code>
     * @return Whether the xmax field is set.
     */
    @java.lang.Override
    public boolean hasXmax() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional double xmax = 3;</code>
     * @return The xmax.
     */
    @java.lang.Override
    public double getXmax() {
      return xmax_;
    }

    public static final int YMAX_FIELD_NUMBER = 4;
    private double ymax_;
    /**
     * <code>optional double ymax = 4;</code>
     * @return Whether the ymax field is set.
     */
    @java.lang.Override
    public boolean hasYmax() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional double ymax = 4;</code>
     * @return The ymax.
     */
    @java.lang.Override
    public double getYmax() {
      return ymax_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeDouble(1, xmin_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeDouble(2, ymin_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeDouble(3, xmax_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeDouble(4, ymax_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, xmin_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, ymin_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, xmax_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, ymax_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof if_proto_common.BxtObstacleV2.Box2d)) {
        return super.equals(obj);
      }
      if_proto_common.BxtObstacleV2.Box2d other = (if_proto_common.BxtObstacleV2.Box2d) obj;

      if (hasXmin() != other.hasXmin()) return false;
      if (hasXmin()) {
        if (java.lang.Double.doubleToLongBits(getXmin())
            != java.lang.Double.doubleToLongBits(
                other.getXmin())) return false;
      }
      if (hasYmin() != other.hasYmin()) return false;
      if (hasYmin()) {
        if (java.lang.Double.doubleToLongBits(getYmin())
            != java.lang.Double.doubleToLongBits(
                other.getYmin())) return false;
      }
      if (hasXmax() != other.hasXmax()) return false;
      if (hasXmax()) {
        if (java.lang.Double.doubleToLongBits(getXmax())
            != java.lang.Double.doubleToLongBits(
                other.getXmax())) return false;
      }
      if (hasYmax() != other.hasYmax()) return false;
      if (hasYmax()) {
        if (java.lang.Double.doubleToLongBits(getYmax())
            != java.lang.Double.doubleToLongBits(
                other.getYmax())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasXmin()) {
        hash = (37 * hash) + XMIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getXmin()));
      }
      if (hasYmin()) {
        hash = (37 * hash) + YMIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getYmin()));
      }
      if (hasXmax()) {
        hash = (37 * hash) + XMAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getXmax()));
      }
      if (hasYmax()) {
        hash = (37 * hash) + YMAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getYmax()));
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static if_proto_common.BxtObstacleV2.Box2d parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.Box2d parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Box2d parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.Box2d parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Box2d parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.Box2d parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Box2d parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.Box2d parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Box2d parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.Box2d parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.Box2d parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.Box2d parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(if_proto_common.BxtObstacleV2.Box2d prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code if_proto_common.Box2d}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:if_proto_common.Box2d)
        if_proto_common.BxtObstacleV2.Box2dOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Box2d_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Box2d_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                if_proto_common.BxtObstacleV2.Box2d.class, if_proto_common.BxtObstacleV2.Box2d.Builder.class);
      }

      // Construct using if_proto_common.BxtObstacleV2.Box2d.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        xmin_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        ymin_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        xmax_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        ymax_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_Box2d_descriptor;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.Box2d getDefaultInstanceForType() {
        return if_proto_common.BxtObstacleV2.Box2d.getDefaultInstance();
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.Box2d build() {
        if_proto_common.BxtObstacleV2.Box2d result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.Box2d buildPartial() {
        if_proto_common.BxtObstacleV2.Box2d result = new if_proto_common.BxtObstacleV2.Box2d(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.xmin_ = xmin_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.ymin_ = ymin_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.xmax_ = xmax_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.ymax_ = ymax_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof if_proto_common.BxtObstacleV2.Box2d) {
          return mergeFrom((if_proto_common.BxtObstacleV2.Box2d)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(if_proto_common.BxtObstacleV2.Box2d other) {
        if (other == if_proto_common.BxtObstacleV2.Box2d.getDefaultInstance()) return this;
        if (other.hasXmin()) {
          setXmin(other.getXmin());
        }
        if (other.hasYmin()) {
          setYmin(other.getYmin());
        }
        if (other.hasXmax()) {
          setXmax(other.getXmax());
        }
        if (other.hasYmax()) {
          setYmax(other.getYmax());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if_proto_common.BxtObstacleV2.Box2d parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (if_proto_common.BxtObstacleV2.Box2d) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private double xmin_ ;
      /**
       * <code>optional double xmin = 1;</code>
       * @return Whether the xmin field is set.
       */
      @java.lang.Override
      public boolean hasXmin() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional double xmin = 1;</code>
       * @return The xmin.
       */
      @java.lang.Override
      public double getXmin() {
        return xmin_;
      }
      /**
       * <code>optional double xmin = 1;</code>
       * @param value The xmin to set.
       * @return This builder for chaining.
       */
      public Builder setXmin(double value) {
        bitField0_ |= 0x00000001;
        xmin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double xmin = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearXmin() {
        bitField0_ = (bitField0_ & ~0x00000001);
        xmin_ = 0D;
        onChanged();
        return this;
      }

      private double ymin_ ;
      /**
       * <code>optional double ymin = 2;</code>
       * @return Whether the ymin field is set.
       */
      @java.lang.Override
      public boolean hasYmin() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional double ymin = 2;</code>
       * @return The ymin.
       */
      @java.lang.Override
      public double getYmin() {
        return ymin_;
      }
      /**
       * <code>optional double ymin = 2;</code>
       * @param value The ymin to set.
       * @return This builder for chaining.
       */
      public Builder setYmin(double value) {
        bitField0_ |= 0x00000002;
        ymin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double ymin = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearYmin() {
        bitField0_ = (bitField0_ & ~0x00000002);
        ymin_ = 0D;
        onChanged();
        return this;
      }

      private double xmax_ ;
      /**
       * <code>optional double xmax = 3;</code>
       * @return Whether the xmax field is set.
       */
      @java.lang.Override
      public boolean hasXmax() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional double xmax = 3;</code>
       * @return The xmax.
       */
      @java.lang.Override
      public double getXmax() {
        return xmax_;
      }
      /**
       * <code>optional double xmax = 3;</code>
       * @param value The xmax to set.
       * @return This builder for chaining.
       */
      public Builder setXmax(double value) {
        bitField0_ |= 0x00000004;
        xmax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double xmax = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearXmax() {
        bitField0_ = (bitField0_ & ~0x00000004);
        xmax_ = 0D;
        onChanged();
        return this;
      }

      private double ymax_ ;
      /**
       * <code>optional double ymax = 4;</code>
       * @return Whether the ymax field is set.
       */
      @java.lang.Override
      public boolean hasYmax() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional double ymax = 4;</code>
       * @return The ymax.
       */
      @java.lang.Override
      public double getYmax() {
        return ymax_;
      }
      /**
       * <code>optional double ymax = 4;</code>
       * @param value The ymax to set.
       * @return This builder for chaining.
       */
      public Builder setYmax(double value) {
        bitField0_ |= 0x00000008;
        ymax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double ymax = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearYmax() {
        bitField0_ = (bitField0_ & ~0x00000008);
        ymax_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:if_proto_common.Box2d)
    }

    // @@protoc_insertion_point(class_scope:if_proto_common.Box2d)
    private static final if_proto_common.BxtObstacleV2.Box2d DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new if_proto_common.BxtObstacleV2.Box2d();
    }

    public static if_proto_common.BxtObstacleV2.Box2d getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Box2d>
        PARSER = new com.google.protobuf.AbstractParser<Box2d>() {
      @java.lang.Override
      public Box2d parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Box2d(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Box2d> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Box2d> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public if_proto_common.BxtObstacleV2.Box2d getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RadarSupplementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:if_proto_common.RadarSupplement)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool is_background = 1 [default = false];</code>
     * @return Whether the isBackground field is set.
     */
    boolean hasIsBackground();
    /**
     * <code>optional bool is_background = 1 [default = false];</code>
     * @return The isBackground.
     */
    boolean getIsBackground();
  }
  /**
   * Protobuf type {@code if_proto_common.RadarSupplement}
   */
  public static final class RadarSupplement extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:if_proto_common.RadarSupplement)
      RadarSupplementOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RadarSupplement.newBuilder() to construct.
    private RadarSupplement(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RadarSupplement() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RadarSupplement();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RadarSupplement(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              isBackground_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_RadarSupplement_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_RadarSupplement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              if_proto_common.BxtObstacleV2.RadarSupplement.class, if_proto_common.BxtObstacleV2.RadarSupplement.Builder.class);
    }

    private int bitField0_;
    public static final int IS_BACKGROUND_FIELD_NUMBER = 1;
    private boolean isBackground_;
    /**
     * <code>optional bool is_background = 1 [default = false];</code>
     * @return Whether the isBackground field is set.
     */
    @java.lang.Override
    public boolean hasIsBackground() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional bool is_background = 1 [default = false];</code>
     * @return The isBackground.
     */
    @java.lang.Override
    public boolean getIsBackground() {
      return isBackground_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(1, isBackground_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isBackground_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof if_proto_common.BxtObstacleV2.RadarSupplement)) {
        return super.equals(obj);
      }
      if_proto_common.BxtObstacleV2.RadarSupplement other = (if_proto_common.BxtObstacleV2.RadarSupplement) obj;

      if (hasIsBackground() != other.hasIsBackground()) return false;
      if (hasIsBackground()) {
        if (getIsBackground()
            != other.getIsBackground()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIsBackground()) {
        hash = (37 * hash) + IS_BACKGROUND_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsBackground());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static if_proto_common.BxtObstacleV2.RadarSupplement parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.RadarSupplement parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.RadarSupplement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.RadarSupplement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.RadarSupplement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.RadarSupplement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.RadarSupplement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.RadarSupplement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.RadarSupplement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.RadarSupplement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.RadarSupplement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.RadarSupplement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(if_proto_common.BxtObstacleV2.RadarSupplement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code if_proto_common.RadarSupplement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:if_proto_common.RadarSupplement)
        if_proto_common.BxtObstacleV2.RadarSupplementOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_RadarSupplement_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_RadarSupplement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                if_proto_common.BxtObstacleV2.RadarSupplement.class, if_proto_common.BxtObstacleV2.RadarSupplement.Builder.class);
      }

      // Construct using if_proto_common.BxtObstacleV2.RadarSupplement.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        isBackground_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_RadarSupplement_descriptor;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.RadarSupplement getDefaultInstanceForType() {
        return if_proto_common.BxtObstacleV2.RadarSupplement.getDefaultInstance();
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.RadarSupplement build() {
        if_proto_common.BxtObstacleV2.RadarSupplement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.RadarSupplement buildPartial() {
        if_proto_common.BxtObstacleV2.RadarSupplement result = new if_proto_common.BxtObstacleV2.RadarSupplement(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.isBackground_ = isBackground_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof if_proto_common.BxtObstacleV2.RadarSupplement) {
          return mergeFrom((if_proto_common.BxtObstacleV2.RadarSupplement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(if_proto_common.BxtObstacleV2.RadarSupplement other) {
        if (other == if_proto_common.BxtObstacleV2.RadarSupplement.getDefaultInstance()) return this;
        if (other.hasIsBackground()) {
          setIsBackground(other.getIsBackground());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if_proto_common.BxtObstacleV2.RadarSupplement parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (if_proto_common.BxtObstacleV2.RadarSupplement) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean isBackground_ ;
      /**
       * <code>optional bool is_background = 1 [default = false];</code>
       * @return Whether the isBackground field is set.
       */
      @java.lang.Override
      public boolean hasIsBackground() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional bool is_background = 1 [default = false];</code>
       * @return The isBackground.
       */
      @java.lang.Override
      public boolean getIsBackground() {
        return isBackground_;
      }
      /**
       * <code>optional bool is_background = 1 [default = false];</code>
       * @param value The isBackground to set.
       * @return This builder for chaining.
       */
      public Builder setIsBackground(boolean value) {
        bitField0_ |= 0x00000001;
        isBackground_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_background = 1 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearIsBackground() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isBackground_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:if_proto_common.RadarSupplement)
    }

    // @@protoc_insertion_point(class_scope:if_proto_common.RadarSupplement)
    private static final if_proto_common.BxtObstacleV2.RadarSupplement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new if_proto_common.BxtObstacleV2.RadarSupplement();
    }

    public static if_proto_common.BxtObstacleV2.RadarSupplement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<RadarSupplement>
        PARSER = new com.google.protobuf.AbstractParser<RadarSupplement>() {
      @java.lang.Override
      public RadarSupplement parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RadarSupplement(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RadarSupplement> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RadarSupplement> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public if_proto_common.BxtObstacleV2.RadarSupplement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CameraSupplementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:if_proto_common.CameraSupplement)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * distance from lane center (just for obstacles from camera)
     * </pre>
     *
     * <code>optional double dis_from_lane_center = 1;</code>
     * @return Whether the disFromLaneCenter field is set.
     */
    boolean hasDisFromLaneCenter();
    /**
     * <pre>
     * distance from lane center (just for obstacles from camera)
     * </pre>
     *
     * <code>optional double dis_from_lane_center = 1;</code>
     * @return The disFromLaneCenter.
     */
    double getDisFromLaneCenter();

    /**
     * <pre>
     * distance from our vehicle (just for obstacles from camera)
     * </pre>
     *
     * <code>optional double dis_from_ego = 2;</code>
     * @return Whether the disFromEgo field is set.
     */
    boolean hasDisFromEgo();
    /**
     * <pre>
     * distance from our vehicle (just for obstacles from camera)
     * </pre>
     *
     * <code>optional double dis_from_ego = 2;</code>
     * @return The disFromEgo.
     */
    double getDisFromEgo();

    /**
     * <pre>
     * lane id of the obstacle lied in (just for obstacles from camera)
     * </pre>
     *
     * <code>optional int32 in_lane_id = 3;</code>
     * @return Whether the inLaneId field is set.
     */
    boolean hasInLaneId();
    /**
     * <pre>
     * lane id of the obstacle lied in (just for obstacles from camera)
     * </pre>
     *
     * <code>optional int32 in_lane_id = 3;</code>
     * @return The inLaneId.
     */
    int getInLaneId();

    /**
     * <pre>
     * obstacle 2d bounding box in camera coordinate.
     * </pre>
     *
     * <code>optional .if_proto_common.Box2d img_box = 4;</code>
     * @return Whether the imgBox field is set.
     */
    boolean hasImgBox();
    /**
     * <pre>
     * obstacle 2d bounding box in camera coordinate.
     * </pre>
     *
     * <code>optional .if_proto_common.Box2d img_box = 4;</code>
     * @return The imgBox.
     */
    if_proto_common.BxtObstacleV2.Box2d getImgBox();
    /**
     * <pre>
     * obstacle 2d bounding box in camera coordinate.
     * </pre>
     *
     * <code>optional .if_proto_common.Box2d img_box = 4;</code>
     */
    if_proto_common.BxtObstacleV2.Box2dOrBuilder getImgBoxOrBuilder();

    /**
     * <pre>
     * obstacle type
     * </pre>
     *
     * <code>optional .if_proto_common.CameraSupplement.CameraObjectType camera_object_type = 5 [default = BG];</code>
     * @return Whether the cameraObjectType field is set.
     */
    boolean hasCameraObjectType();
    /**
     * <pre>
     * obstacle type
     * </pre>
     *
     * <code>optional .if_proto_common.CameraSupplement.CameraObjectType camera_object_type = 5 [default = BG];</code>
     * @return The cameraObjectType.
     */
    if_proto_common.BxtObstacleV2.CameraSupplement.CameraObjectType getCameraObjectType();

    /**
     * <code>optional double confidence = 6;</code>
     * @return Whether the confidence field is set.
     */
    boolean hasConfidence();
    /**
     * <code>optional double confidence = 6;</code>
     * @return The confidence.
     */
    double getConfidence();
  }
  /**
   * Protobuf type {@code if_proto_common.CameraSupplement}
   */
  public static final class CameraSupplement extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:if_proto_common.CameraSupplement)
      CameraSupplementOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CameraSupplement.newBuilder() to construct.
    private CameraSupplement(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CameraSupplement() {
      cameraObjectType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CameraSupplement();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CameraSupplement(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {
              bitField0_ |= 0x00000001;
              disFromLaneCenter_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              disFromEgo_ = input.readDouble();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              inLaneId_ = input.readInt32();
              break;
            }
            case 34: {
              if_proto_common.BxtObstacleV2.Box2d.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) != 0)) {
                subBuilder = imgBox_.toBuilder();
              }
              imgBox_ = input.readMessage(if_proto_common.BxtObstacleV2.Box2d.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(imgBox_);
                imgBox_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              if_proto_common.BxtObstacleV2.CameraSupplement.CameraObjectType value = if_proto_common.BxtObstacleV2.CameraSupplement.CameraObjectType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                cameraObjectType_ = rawValue;
              }
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              confidence_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_CameraSupplement_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_CameraSupplement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              if_proto_common.BxtObstacleV2.CameraSupplement.class, if_proto_common.BxtObstacleV2.CameraSupplement.Builder.class);
    }

    /**
     * Protobuf enum {@code if_proto_common.CameraSupplement.CameraObjectType}
     */
    public enum CameraObjectType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>BG = 0;</code>
       */
      BG(0),
      /**
       * <code>CAR = 1;</code>
       */
      CAR(1),
      /**
       * <code>BUS = 2;</code>
       */
      BUS(2),
      /**
       * <code>TRUCK = 3;</code>
       */
      TRUCK(3),
      /**
       * <code>PERSON = 4;</code>
       */
      PERSON(4),
      /**
       * <code>BICYCLE = 5;</code>
       */
      BICYCLE(5),
      /**
       * <code>TRICYCLE = 6;</code>
       */
      TRICYCLE(6),
      /**
       * <code>BLOCK = 7;</code>
       */
      BLOCK(7),
      /**
       * <code>MOTOR = 8;</code>
       */
      MOTOR(8),
      ;

      /**
       * <code>BG = 0;</code>
       */
      public static final int BG_VALUE = 0;
      /**
       * <code>CAR = 1;</code>
       */
      public static final int CAR_VALUE = 1;
      /**
       * <code>BUS = 2;</code>
       */
      public static final int BUS_VALUE = 2;
      /**
       * <code>TRUCK = 3;</code>
       */
      public static final int TRUCK_VALUE = 3;
      /**
       * <code>PERSON = 4;</code>
       */
      public static final int PERSON_VALUE = 4;
      /**
       * <code>BICYCLE = 5;</code>
       */
      public static final int BICYCLE_VALUE = 5;
      /**
       * <code>TRICYCLE = 6;</code>
       */
      public static final int TRICYCLE_VALUE = 6;
      /**
       * <code>BLOCK = 7;</code>
       */
      public static final int BLOCK_VALUE = 7;
      /**
       * <code>MOTOR = 8;</code>
       */
      public static final int MOTOR_VALUE = 8;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CameraObjectType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static CameraObjectType forNumber(int value) {
        switch (value) {
          case 0: return BG;
          case 1: return CAR;
          case 2: return BUS;
          case 3: return TRUCK;
          case 4: return PERSON;
          case 5: return BICYCLE;
          case 6: return TRICYCLE;
          case 7: return BLOCK;
          case 8: return MOTOR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CameraObjectType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          CameraObjectType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CameraObjectType>() {
              public CameraObjectType findValueByNumber(int number) {
                return CameraObjectType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return if_proto_common.BxtObstacleV2.CameraSupplement.getDescriptor().getEnumTypes().get(0);
      }

      private static final CameraObjectType[] VALUES = values();

      public static CameraObjectType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private CameraObjectType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:if_proto_common.CameraSupplement.CameraObjectType)
    }

    private int bitField0_;
    public static final int DIS_FROM_LANE_CENTER_FIELD_NUMBER = 1;
    private double disFromLaneCenter_;
    /**
     * <pre>
     * distance from lane center (just for obstacles from camera)
     * </pre>
     *
     * <code>optional double dis_from_lane_center = 1;</code>
     * @return Whether the disFromLaneCenter field is set.
     */
    @java.lang.Override
    public boolean hasDisFromLaneCenter() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * distance from lane center (just for obstacles from camera)
     * </pre>
     *
     * <code>optional double dis_from_lane_center = 1;</code>
     * @return The disFromLaneCenter.
     */
    @java.lang.Override
    public double getDisFromLaneCenter() {
      return disFromLaneCenter_;
    }

    public static final int DIS_FROM_EGO_FIELD_NUMBER = 2;
    private double disFromEgo_;
    /**
     * <pre>
     * distance from our vehicle (just for obstacles from camera)
     * </pre>
     *
     * <code>optional double dis_from_ego = 2;</code>
     * @return Whether the disFromEgo field is set.
     */
    @java.lang.Override
    public boolean hasDisFromEgo() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * distance from our vehicle (just for obstacles from camera)
     * </pre>
     *
     * <code>optional double dis_from_ego = 2;</code>
     * @return The disFromEgo.
     */
    @java.lang.Override
    public double getDisFromEgo() {
      return disFromEgo_;
    }

    public static final int IN_LANE_ID_FIELD_NUMBER = 3;
    private int inLaneId_;
    /**
     * <pre>
     * lane id of the obstacle lied in (just for obstacles from camera)
     * </pre>
     *
     * <code>optional int32 in_lane_id = 3;</code>
     * @return Whether the inLaneId field is set.
     */
    @java.lang.Override
    public boolean hasInLaneId() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * lane id of the obstacle lied in (just for obstacles from camera)
     * </pre>
     *
     * <code>optional int32 in_lane_id = 3;</code>
     * @return The inLaneId.
     */
    @java.lang.Override
    public int getInLaneId() {
      return inLaneId_;
    }

    public static final int IMG_BOX_FIELD_NUMBER = 4;
    private if_proto_common.BxtObstacleV2.Box2d imgBox_;
    /**
     * <pre>
     * obstacle 2d bounding box in camera coordinate.
     * </pre>
     *
     * <code>optional .if_proto_common.Box2d img_box = 4;</code>
     * @return Whether the imgBox field is set.
     */
    @java.lang.Override
    public boolean hasImgBox() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * obstacle 2d bounding box in camera coordinate.
     * </pre>
     *
     * <code>optional .if_proto_common.Box2d img_box = 4;</code>
     * @return The imgBox.
     */
    @java.lang.Override
    public if_proto_common.BxtObstacleV2.Box2d getImgBox() {
      return imgBox_ == null ? if_proto_common.BxtObstacleV2.Box2d.getDefaultInstance() : imgBox_;
    }
    /**
     * <pre>
     * obstacle 2d bounding box in camera coordinate.
     * </pre>
     *
     * <code>optional .if_proto_common.Box2d img_box = 4;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtObstacleV2.Box2dOrBuilder getImgBoxOrBuilder() {
      return imgBox_ == null ? if_proto_common.BxtObstacleV2.Box2d.getDefaultInstance() : imgBox_;
    }

    public static final int CAMERA_OBJECT_TYPE_FIELD_NUMBER = 5;
    private int cameraObjectType_;
    /**
     * <pre>
     * obstacle type
     * </pre>
     *
     * <code>optional .if_proto_common.CameraSupplement.CameraObjectType camera_object_type = 5 [default = BG];</code>
     * @return Whether the cameraObjectType field is set.
     */
    @java.lang.Override public boolean hasCameraObjectType() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * obstacle type
     * </pre>
     *
     * <code>optional .if_proto_common.CameraSupplement.CameraObjectType camera_object_type = 5 [default = BG];</code>
     * @return The cameraObjectType.
     */
    @java.lang.Override public if_proto_common.BxtObstacleV2.CameraSupplement.CameraObjectType getCameraObjectType() {
      @SuppressWarnings("deprecation")
      if_proto_common.BxtObstacleV2.CameraSupplement.CameraObjectType result = if_proto_common.BxtObstacleV2.CameraSupplement.CameraObjectType.valueOf(cameraObjectType_);
      return result == null ? if_proto_common.BxtObstacleV2.CameraSupplement.CameraObjectType.BG : result;
    }

    public static final int CONFIDENCE_FIELD_NUMBER = 6;
    private double confidence_;
    /**
     * <code>optional double confidence = 6;</code>
     * @return Whether the confidence field is set.
     */
    @java.lang.Override
    public boolean hasConfidence() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional double confidence = 6;</code>
     * @return The confidence.
     */
    @java.lang.Override
    public double getConfidence() {
      return confidence_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeDouble(1, disFromLaneCenter_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeDouble(2, disFromEgo_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt32(3, inLaneId_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(4, getImgBox());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeEnum(5, cameraObjectType_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeDouble(6, confidence_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, disFromLaneCenter_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, disFromEgo_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, inLaneId_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getImgBox());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, cameraObjectType_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, confidence_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof if_proto_common.BxtObstacleV2.CameraSupplement)) {
        return super.equals(obj);
      }
      if_proto_common.BxtObstacleV2.CameraSupplement other = (if_proto_common.BxtObstacleV2.CameraSupplement) obj;

      if (hasDisFromLaneCenter() != other.hasDisFromLaneCenter()) return false;
      if (hasDisFromLaneCenter()) {
        if (java.lang.Double.doubleToLongBits(getDisFromLaneCenter())
            != java.lang.Double.doubleToLongBits(
                other.getDisFromLaneCenter())) return false;
      }
      if (hasDisFromEgo() != other.hasDisFromEgo()) return false;
      if (hasDisFromEgo()) {
        if (java.lang.Double.doubleToLongBits(getDisFromEgo())
            != java.lang.Double.doubleToLongBits(
                other.getDisFromEgo())) return false;
      }
      if (hasInLaneId() != other.hasInLaneId()) return false;
      if (hasInLaneId()) {
        if (getInLaneId()
            != other.getInLaneId()) return false;
      }
      if (hasImgBox() != other.hasImgBox()) return false;
      if (hasImgBox()) {
        if (!getImgBox()
            .equals(other.getImgBox())) return false;
      }
      if (hasCameraObjectType() != other.hasCameraObjectType()) return false;
      if (hasCameraObjectType()) {
        if (cameraObjectType_ != other.cameraObjectType_) return false;
      }
      if (hasConfidence() != other.hasConfidence()) return false;
      if (hasConfidence()) {
        if (java.lang.Double.doubleToLongBits(getConfidence())
            != java.lang.Double.doubleToLongBits(
                other.getConfidence())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDisFromLaneCenter()) {
        hash = (37 * hash) + DIS_FROM_LANE_CENTER_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDisFromLaneCenter()));
      }
      if (hasDisFromEgo()) {
        hash = (37 * hash) + DIS_FROM_EGO_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDisFromEgo()));
      }
      if (hasInLaneId()) {
        hash = (37 * hash) + IN_LANE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getInLaneId();
      }
      if (hasImgBox()) {
        hash = (37 * hash) + IMG_BOX_FIELD_NUMBER;
        hash = (53 * hash) + getImgBox().hashCode();
      }
      if (hasCameraObjectType()) {
        hash = (37 * hash) + CAMERA_OBJECT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + cameraObjectType_;
      }
      if (hasConfidence()) {
        hash = (37 * hash) + CONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getConfidence()));
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static if_proto_common.BxtObstacleV2.CameraSupplement parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.CameraSupplement parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.CameraSupplement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.CameraSupplement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.CameraSupplement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.CameraSupplement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.CameraSupplement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.CameraSupplement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.CameraSupplement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.CameraSupplement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.CameraSupplement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.CameraSupplement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(if_proto_common.BxtObstacleV2.CameraSupplement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code if_proto_common.CameraSupplement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:if_proto_common.CameraSupplement)
        if_proto_common.BxtObstacleV2.CameraSupplementOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_CameraSupplement_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_CameraSupplement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                if_proto_common.BxtObstacleV2.CameraSupplement.class, if_proto_common.BxtObstacleV2.CameraSupplement.Builder.class);
      }

      // Construct using if_proto_common.BxtObstacleV2.CameraSupplement.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getImgBoxFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        disFromLaneCenter_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        disFromEgo_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        inLaneId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (imgBoxBuilder_ == null) {
          imgBox_ = null;
        } else {
          imgBoxBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        cameraObjectType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        confidence_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_CameraSupplement_descriptor;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.CameraSupplement getDefaultInstanceForType() {
        return if_proto_common.BxtObstacleV2.CameraSupplement.getDefaultInstance();
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.CameraSupplement build() {
        if_proto_common.BxtObstacleV2.CameraSupplement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.CameraSupplement buildPartial() {
        if_proto_common.BxtObstacleV2.CameraSupplement result = new if_proto_common.BxtObstacleV2.CameraSupplement(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.disFromLaneCenter_ = disFromLaneCenter_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.disFromEgo_ = disFromEgo_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.inLaneId_ = inLaneId_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          if (imgBoxBuilder_ == null) {
            result.imgBox_ = imgBox_;
          } else {
            result.imgBox_ = imgBoxBuilder_.build();
          }
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          to_bitField0_ |= 0x00000010;
        }
        result.cameraObjectType_ = cameraObjectType_;
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.confidence_ = confidence_;
          to_bitField0_ |= 0x00000020;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof if_proto_common.BxtObstacleV2.CameraSupplement) {
          return mergeFrom((if_proto_common.BxtObstacleV2.CameraSupplement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(if_proto_common.BxtObstacleV2.CameraSupplement other) {
        if (other == if_proto_common.BxtObstacleV2.CameraSupplement.getDefaultInstance()) return this;
        if (other.hasDisFromLaneCenter()) {
          setDisFromLaneCenter(other.getDisFromLaneCenter());
        }
        if (other.hasDisFromEgo()) {
          setDisFromEgo(other.getDisFromEgo());
        }
        if (other.hasInLaneId()) {
          setInLaneId(other.getInLaneId());
        }
        if (other.hasImgBox()) {
          mergeImgBox(other.getImgBox());
        }
        if (other.hasCameraObjectType()) {
          setCameraObjectType(other.getCameraObjectType());
        }
        if (other.hasConfidence()) {
          setConfidence(other.getConfidence());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if_proto_common.BxtObstacleV2.CameraSupplement parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (if_proto_common.BxtObstacleV2.CameraSupplement) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private double disFromLaneCenter_ ;
      /**
       * <pre>
       * distance from lane center (just for obstacles from camera)
       * </pre>
       *
       * <code>optional double dis_from_lane_center = 1;</code>
       * @return Whether the disFromLaneCenter field is set.
       */
      @java.lang.Override
      public boolean hasDisFromLaneCenter() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * distance from lane center (just for obstacles from camera)
       * </pre>
       *
       * <code>optional double dis_from_lane_center = 1;</code>
       * @return The disFromLaneCenter.
       */
      @java.lang.Override
      public double getDisFromLaneCenter() {
        return disFromLaneCenter_;
      }
      /**
       * <pre>
       * distance from lane center (just for obstacles from camera)
       * </pre>
       *
       * <code>optional double dis_from_lane_center = 1;</code>
       * @param value The disFromLaneCenter to set.
       * @return This builder for chaining.
       */
      public Builder setDisFromLaneCenter(double value) {
        bitField0_ |= 0x00000001;
        disFromLaneCenter_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * distance from lane center (just for obstacles from camera)
       * </pre>
       *
       * <code>optional double dis_from_lane_center = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDisFromLaneCenter() {
        bitField0_ = (bitField0_ & ~0x00000001);
        disFromLaneCenter_ = 0D;
        onChanged();
        return this;
      }

      private double disFromEgo_ ;
      /**
       * <pre>
       * distance from our vehicle (just for obstacles from camera)
       * </pre>
       *
       * <code>optional double dis_from_ego = 2;</code>
       * @return Whether the disFromEgo field is set.
       */
      @java.lang.Override
      public boolean hasDisFromEgo() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * distance from our vehicle (just for obstacles from camera)
       * </pre>
       *
       * <code>optional double dis_from_ego = 2;</code>
       * @return The disFromEgo.
       */
      @java.lang.Override
      public double getDisFromEgo() {
        return disFromEgo_;
      }
      /**
       * <pre>
       * distance from our vehicle (just for obstacles from camera)
       * </pre>
       *
       * <code>optional double dis_from_ego = 2;</code>
       * @param value The disFromEgo to set.
       * @return This builder for chaining.
       */
      public Builder setDisFromEgo(double value) {
        bitField0_ |= 0x00000002;
        disFromEgo_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * distance from our vehicle (just for obstacles from camera)
       * </pre>
       *
       * <code>optional double dis_from_ego = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDisFromEgo() {
        bitField0_ = (bitField0_ & ~0x00000002);
        disFromEgo_ = 0D;
        onChanged();
        return this;
      }

      private int inLaneId_ ;
      /**
       * <pre>
       * lane id of the obstacle lied in (just for obstacles from camera)
       * </pre>
       *
       * <code>optional int32 in_lane_id = 3;</code>
       * @return Whether the inLaneId field is set.
       */
      @java.lang.Override
      public boolean hasInLaneId() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * lane id of the obstacle lied in (just for obstacles from camera)
       * </pre>
       *
       * <code>optional int32 in_lane_id = 3;</code>
       * @return The inLaneId.
       */
      @java.lang.Override
      public int getInLaneId() {
        return inLaneId_;
      }
      /**
       * <pre>
       * lane id of the obstacle lied in (just for obstacles from camera)
       * </pre>
       *
       * <code>optional int32 in_lane_id = 3;</code>
       * @param value The inLaneId to set.
       * @return This builder for chaining.
       */
      public Builder setInLaneId(int value) {
        bitField0_ |= 0x00000004;
        inLaneId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * lane id of the obstacle lied in (just for obstacles from camera)
       * </pre>
       *
       * <code>optional int32 in_lane_id = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearInLaneId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        inLaneId_ = 0;
        onChanged();
        return this;
      }

      private if_proto_common.BxtObstacleV2.Box2d imgBox_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtObstacleV2.Box2d, if_proto_common.BxtObstacleV2.Box2d.Builder, if_proto_common.BxtObstacleV2.Box2dOrBuilder> imgBoxBuilder_;
      /**
       * <pre>
       * obstacle 2d bounding box in camera coordinate.
       * </pre>
       *
       * <code>optional .if_proto_common.Box2d img_box = 4;</code>
       * @return Whether the imgBox field is set.
       */
      public boolean hasImgBox() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * obstacle 2d bounding box in camera coordinate.
       * </pre>
       *
       * <code>optional .if_proto_common.Box2d img_box = 4;</code>
       * @return The imgBox.
       */
      public if_proto_common.BxtObstacleV2.Box2d getImgBox() {
        if (imgBoxBuilder_ == null) {
          return imgBox_ == null ? if_proto_common.BxtObstacleV2.Box2d.getDefaultInstance() : imgBox_;
        } else {
          return imgBoxBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * obstacle 2d bounding box in camera coordinate.
       * </pre>
       *
       * <code>optional .if_proto_common.Box2d img_box = 4;</code>
       */
      public Builder setImgBox(if_proto_common.BxtObstacleV2.Box2d value) {
        if (imgBoxBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          imgBox_ = value;
          onChanged();
        } else {
          imgBoxBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * obstacle 2d bounding box in camera coordinate.
       * </pre>
       *
       * <code>optional .if_proto_common.Box2d img_box = 4;</code>
       */
      public Builder setImgBox(
          if_proto_common.BxtObstacleV2.Box2d.Builder builderForValue) {
        if (imgBoxBuilder_ == null) {
          imgBox_ = builderForValue.build();
          onChanged();
        } else {
          imgBoxBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * obstacle 2d bounding box in camera coordinate.
       * </pre>
       *
       * <code>optional .if_proto_common.Box2d img_box = 4;</code>
       */
      public Builder mergeImgBox(if_proto_common.BxtObstacleV2.Box2d value) {
        if (imgBoxBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
              imgBox_ != null &&
              imgBox_ != if_proto_common.BxtObstacleV2.Box2d.getDefaultInstance()) {
            imgBox_ =
              if_proto_common.BxtObstacleV2.Box2d.newBuilder(imgBox_).mergeFrom(value).buildPartial();
          } else {
            imgBox_ = value;
          }
          onChanged();
        } else {
          imgBoxBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * obstacle 2d bounding box in camera coordinate.
       * </pre>
       *
       * <code>optional .if_proto_common.Box2d img_box = 4;</code>
       */
      public Builder clearImgBox() {
        if (imgBoxBuilder_ == null) {
          imgBox_ = null;
          onChanged();
        } else {
          imgBoxBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <pre>
       * obstacle 2d bounding box in camera coordinate.
       * </pre>
       *
       * <code>optional .if_proto_common.Box2d img_box = 4;</code>
       */
      public if_proto_common.BxtObstacleV2.Box2d.Builder getImgBoxBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getImgBoxFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * obstacle 2d bounding box in camera coordinate.
       * </pre>
       *
       * <code>optional .if_proto_common.Box2d img_box = 4;</code>
       */
      public if_proto_common.BxtObstacleV2.Box2dOrBuilder getImgBoxOrBuilder() {
        if (imgBoxBuilder_ != null) {
          return imgBoxBuilder_.getMessageOrBuilder();
        } else {
          return imgBox_ == null ?
              if_proto_common.BxtObstacleV2.Box2d.getDefaultInstance() : imgBox_;
        }
      }
      /**
       * <pre>
       * obstacle 2d bounding box in camera coordinate.
       * </pre>
       *
       * <code>optional .if_proto_common.Box2d img_box = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtObstacleV2.Box2d, if_proto_common.BxtObstacleV2.Box2d.Builder, if_proto_common.BxtObstacleV2.Box2dOrBuilder> 
          getImgBoxFieldBuilder() {
        if (imgBoxBuilder_ == null) {
          imgBoxBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtObstacleV2.Box2d, if_proto_common.BxtObstacleV2.Box2d.Builder, if_proto_common.BxtObstacleV2.Box2dOrBuilder>(
                  getImgBox(),
                  getParentForChildren(),
                  isClean());
          imgBox_ = null;
        }
        return imgBoxBuilder_;
      }

      private int cameraObjectType_ = 0;
      /**
       * <pre>
       * obstacle type
       * </pre>
       *
       * <code>optional .if_proto_common.CameraSupplement.CameraObjectType camera_object_type = 5 [default = BG];</code>
       * @return Whether the cameraObjectType field is set.
       */
      @java.lang.Override public boolean hasCameraObjectType() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * obstacle type
       * </pre>
       *
       * <code>optional .if_proto_common.CameraSupplement.CameraObjectType camera_object_type = 5 [default = BG];</code>
       * @return The cameraObjectType.
       */
      @java.lang.Override
      public if_proto_common.BxtObstacleV2.CameraSupplement.CameraObjectType getCameraObjectType() {
        @SuppressWarnings("deprecation")
        if_proto_common.BxtObstacleV2.CameraSupplement.CameraObjectType result = if_proto_common.BxtObstacleV2.CameraSupplement.CameraObjectType.valueOf(cameraObjectType_);
        return result == null ? if_proto_common.BxtObstacleV2.CameraSupplement.CameraObjectType.BG : result;
      }
      /**
       * <pre>
       * obstacle type
       * </pre>
       *
       * <code>optional .if_proto_common.CameraSupplement.CameraObjectType camera_object_type = 5 [default = BG];</code>
       * @param value The cameraObjectType to set.
       * @return This builder for chaining.
       */
      public Builder setCameraObjectType(if_proto_common.BxtObstacleV2.CameraSupplement.CameraObjectType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        cameraObjectType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * obstacle type
       * </pre>
       *
       * <code>optional .if_proto_common.CameraSupplement.CameraObjectType camera_object_type = 5 [default = BG];</code>
       * @return This builder for chaining.
       */
      public Builder clearCameraObjectType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cameraObjectType_ = 0;
        onChanged();
        return this;
      }

      private double confidence_ ;
      /**
       * <code>optional double confidence = 6;</code>
       * @return Whether the confidence field is set.
       */
      @java.lang.Override
      public boolean hasConfidence() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional double confidence = 6;</code>
       * @return The confidence.
       */
      @java.lang.Override
      public double getConfidence() {
        return confidence_;
      }
      /**
       * <code>optional double confidence = 6;</code>
       * @param value The confidence to set.
       * @return This builder for chaining.
       */
      public Builder setConfidence(double value) {
        bitField0_ |= 0x00000020;
        confidence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double confidence = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearConfidence() {
        bitField0_ = (bitField0_ & ~0x00000020);
        confidence_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:if_proto_common.CameraSupplement)
    }

    // @@protoc_insertion_point(class_scope:if_proto_common.CameraSupplement)
    private static final if_proto_common.BxtObstacleV2.CameraSupplement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new if_proto_common.BxtObstacleV2.CameraSupplement();
    }

    public static if_proto_common.BxtObstacleV2.CameraSupplement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CameraSupplement>
        PARSER = new com.google.protobuf.AbstractParser<CameraSupplement>() {
      @java.lang.Override
      public CameraSupplement parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CameraSupplement(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CameraSupplement> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CameraSupplement> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public if_proto_common.BxtObstacleV2.CameraSupplement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SensorObstaclesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:if_proto_common.SensorObstacles)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .if_proto_common.Header header = 1;</code>
     * @return Whether the header field is set.
     */
    boolean hasHeader();
    /**
     * <code>optional .if_proto_common.Header header = 1;</code>
     * @return The header.
     */
    if_proto_common.BxtCommonHeader.Header getHeader();
    /**
     * <code>optional .if_proto_common.Header header = 1;</code>
     */
    if_proto_common.BxtCommonHeader.HeaderOrBuilder getHeaderOrBuilder();

    /**
     * <code>optional .if_proto_common.ErrorCode error_code = 2 [default = OK];</code>
     * @return Whether the errorCode field is set.
     */
    boolean hasErrorCode();
    /**
     * <code>optional .if_proto_common.ErrorCode error_code = 2 [default = OK];</code>
     * @return The errorCode.
     */
    if_proto_common.BxtStatusPb.ErrorCode getErrorCode();

    /**
     * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
     */
    java.util.List<if_proto_common.BxtObstacleV2.Obstacle> 
        getObstaclesList();
    /**
     * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
     */
    if_proto_common.BxtObstacleV2.Obstacle getObstacles(int index);
    /**
     * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
     */
    int getObstaclesCount();
    /**
     * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
     */
    java.util.List<? extends if_proto_common.BxtObstacleV2.ObstacleOrBuilder> 
        getObstaclesOrBuilderList();
    /**
     * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
     */
    if_proto_common.BxtObstacleV2.ObstacleOrBuilder getObstaclesOrBuilder(
        int index);

    /**
     * <pre>
     * observation sensor of the obstacle
     * </pre>
     *
     * <code>optional .bxt.common.sensor.SensorSource sensor_source = 30 [default = UnknownSource];</code>
     * @return Whether the sensorSource field is set.
     */
    boolean hasSensorSource();
    /**
     * <pre>
     * observation sensor of the obstacle
     * </pre>
     *
     * <code>optional .bxt.common.sensor.SensorSource sensor_source = 30 [default = UnknownSource];</code>
     * @return The sensorSource.
     */
    bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource getSensorSource();
  }
  /**
   * Protobuf type {@code if_proto_common.SensorObstacles}
   */
  public static final class SensorObstacles extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:if_proto_common.SensorObstacles)
      SensorObstaclesOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SensorObstacles.newBuilder() to construct.
    private SensorObstacles(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SensorObstacles() {
      errorCode_ = 0;
      obstacles_ = java.util.Collections.emptyList();
      sensorSource_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SensorObstacles();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SensorObstacles(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if_proto_common.BxtCommonHeader.Header.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) != 0)) {
                subBuilder = header_.toBuilder();
              }
              header_ = input.readMessage(if_proto_common.BxtCommonHeader.Header.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(header_);
                header_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              if_proto_common.BxtStatusPb.ErrorCode value = if_proto_common.BxtStatusPb.ErrorCode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                errorCode_ = rawValue;
              }
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                obstacles_ = new java.util.ArrayList<if_proto_common.BxtObstacleV2.Obstacle>();
                mutable_bitField0_ |= 0x00000004;
              }
              obstacles_.add(
                  input.readMessage(if_proto_common.BxtObstacleV2.Obstacle.PARSER, extensionRegistry));
              break;
            }
            case 240: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource value = bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(30, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                sensorSource_ = rawValue;
              }
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          obstacles_ = java.util.Collections.unmodifiableList(obstacles_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_SensorObstacles_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_SensorObstacles_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              if_proto_common.BxtObstacleV2.SensorObstacles.class, if_proto_common.BxtObstacleV2.SensorObstacles.Builder.class);
    }

    private int bitField0_;
    public static final int HEADER_FIELD_NUMBER = 1;
    private if_proto_common.BxtCommonHeader.Header header_;
    /**
     * <code>optional .if_proto_common.Header header = 1;</code>
     * @return Whether the header field is set.
     */
    @java.lang.Override
    public boolean hasHeader() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .if_proto_common.Header header = 1;</code>
     * @return The header.
     */
    @java.lang.Override
    public if_proto_common.BxtCommonHeader.Header getHeader() {
      return header_ == null ? if_proto_common.BxtCommonHeader.Header.getDefaultInstance() : header_;
    }
    /**
     * <code>optional .if_proto_common.Header header = 1;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtCommonHeader.HeaderOrBuilder getHeaderOrBuilder() {
      return header_ == null ? if_proto_common.BxtCommonHeader.Header.getDefaultInstance() : header_;
    }

    public static final int ERROR_CODE_FIELD_NUMBER = 2;
    private int errorCode_;
    /**
     * <code>optional .if_proto_common.ErrorCode error_code = 2 [default = OK];</code>
     * @return Whether the errorCode field is set.
     */
    @java.lang.Override public boolean hasErrorCode() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional .if_proto_common.ErrorCode error_code = 2 [default = OK];</code>
     * @return The errorCode.
     */
    @java.lang.Override public if_proto_common.BxtStatusPb.ErrorCode getErrorCode() {
      @SuppressWarnings("deprecation")
      if_proto_common.BxtStatusPb.ErrorCode result = if_proto_common.BxtStatusPb.ErrorCode.valueOf(errorCode_);
      return result == null ? if_proto_common.BxtStatusPb.ErrorCode.OK : result;
    }

    public static final int OBSTACLES_FIELD_NUMBER = 3;
    private java.util.List<if_proto_common.BxtObstacleV2.Obstacle> obstacles_;
    /**
     * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
     */
    @java.lang.Override
    public java.util.List<if_proto_common.BxtObstacleV2.Obstacle> getObstaclesList() {
      return obstacles_;
    }
    /**
     * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends if_proto_common.BxtObstacleV2.ObstacleOrBuilder> 
        getObstaclesOrBuilderList() {
      return obstacles_;
    }
    /**
     * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
     */
    @java.lang.Override
    public int getObstaclesCount() {
      return obstacles_.size();
    }
    /**
     * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtObstacleV2.Obstacle getObstacles(int index) {
      return obstacles_.get(index);
    }
    /**
     * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtObstacleV2.ObstacleOrBuilder getObstaclesOrBuilder(
        int index) {
      return obstacles_.get(index);
    }

    public static final int SENSOR_SOURCE_FIELD_NUMBER = 30;
    private int sensorSource_;
    /**
     * <pre>
     * observation sensor of the obstacle
     * </pre>
     *
     * <code>optional .bxt.common.sensor.SensorSource sensor_source = 30 [default = UnknownSource];</code>
     * @return Whether the sensorSource field is set.
     */
    @java.lang.Override public boolean hasSensorSource() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * observation sensor of the obstacle
     * </pre>
     *
     * <code>optional .bxt.common.sensor.SensorSource sensor_source = 30 [default = UnknownSource];</code>
     * @return The sensorSource.
     */
    @java.lang.Override public bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource getSensorSource() {
      @SuppressWarnings("deprecation")
      bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource result = bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource.valueOf(sensorSource_);
      return result == null ? bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource.UnknownSource : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getHeader());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeEnum(2, errorCode_);
      }
      for (int i = 0; i < obstacles_.size(); i++) {
        output.writeMessage(3, obstacles_.get(i));
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeEnum(30, sensorSource_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeader());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, errorCode_);
      }
      for (int i = 0; i < obstacles_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, obstacles_.get(i));
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(30, sensorSource_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof if_proto_common.BxtObstacleV2.SensorObstacles)) {
        return super.equals(obj);
      }
      if_proto_common.BxtObstacleV2.SensorObstacles other = (if_proto_common.BxtObstacleV2.SensorObstacles) obj;

      if (hasHeader() != other.hasHeader()) return false;
      if (hasHeader()) {
        if (!getHeader()
            .equals(other.getHeader())) return false;
      }
      if (hasErrorCode() != other.hasErrorCode()) return false;
      if (hasErrorCode()) {
        if (errorCode_ != other.errorCode_) return false;
      }
      if (!getObstaclesList()
          .equals(other.getObstaclesList())) return false;
      if (hasSensorSource() != other.hasSensorSource()) return false;
      if (hasSensorSource()) {
        if (sensorSource_ != other.sensorSource_) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasHeader()) {
        hash = (37 * hash) + HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getHeader().hashCode();
      }
      if (hasErrorCode()) {
        hash = (37 * hash) + ERROR_CODE_FIELD_NUMBER;
        hash = (53 * hash) + errorCode_;
      }
      if (getObstaclesCount() > 0) {
        hash = (37 * hash) + OBSTACLES_FIELD_NUMBER;
        hash = (53 * hash) + getObstaclesList().hashCode();
      }
      if (hasSensorSource()) {
        hash = (37 * hash) + SENSOR_SOURCE_FIELD_NUMBER;
        hash = (53 * hash) + sensorSource_;
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static if_proto_common.BxtObstacleV2.SensorObstacles parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.SensorObstacles parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.SensorObstacles parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.SensorObstacles parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.SensorObstacles parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.SensorObstacles parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.SensorObstacles parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.SensorObstacles parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.SensorObstacles parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.SensorObstacles parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.SensorObstacles parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.SensorObstacles parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(if_proto_common.BxtObstacleV2.SensorObstacles prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code if_proto_common.SensorObstacles}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:if_proto_common.SensorObstacles)
        if_proto_common.BxtObstacleV2.SensorObstaclesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_SensorObstacles_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_SensorObstacles_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                if_proto_common.BxtObstacleV2.SensorObstacles.class, if_proto_common.BxtObstacleV2.SensorObstacles.Builder.class);
      }

      // Construct using if_proto_common.BxtObstacleV2.SensorObstacles.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getHeaderFieldBuilder();
          getObstaclesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (headerBuilder_ == null) {
          header_ = null;
        } else {
          headerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        errorCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (obstaclesBuilder_ == null) {
          obstacles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          obstaclesBuilder_.clear();
        }
        sensorSource_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_SensorObstacles_descriptor;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.SensorObstacles getDefaultInstanceForType() {
        return if_proto_common.BxtObstacleV2.SensorObstacles.getDefaultInstance();
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.SensorObstacles build() {
        if_proto_common.BxtObstacleV2.SensorObstacles result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.SensorObstacles buildPartial() {
        if_proto_common.BxtObstacleV2.SensorObstacles result = new if_proto_common.BxtObstacleV2.SensorObstacles(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          if (headerBuilder_ == null) {
            result.header_ = header_;
          } else {
            result.header_ = headerBuilder_.build();
          }
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          to_bitField0_ |= 0x00000002;
        }
        result.errorCode_ = errorCode_;
        if (obstaclesBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            obstacles_ = java.util.Collections.unmodifiableList(obstacles_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.obstacles_ = obstacles_;
        } else {
          result.obstacles_ = obstaclesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          to_bitField0_ |= 0x00000004;
        }
        result.sensorSource_ = sensorSource_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof if_proto_common.BxtObstacleV2.SensorObstacles) {
          return mergeFrom((if_proto_common.BxtObstacleV2.SensorObstacles)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(if_proto_common.BxtObstacleV2.SensorObstacles other) {
        if (other == if_proto_common.BxtObstacleV2.SensorObstacles.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        if (obstaclesBuilder_ == null) {
          if (!other.obstacles_.isEmpty()) {
            if (obstacles_.isEmpty()) {
              obstacles_ = other.obstacles_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureObstaclesIsMutable();
              obstacles_.addAll(other.obstacles_);
            }
            onChanged();
          }
        } else {
          if (!other.obstacles_.isEmpty()) {
            if (obstaclesBuilder_.isEmpty()) {
              obstaclesBuilder_.dispose();
              obstaclesBuilder_ = null;
              obstacles_ = other.obstacles_;
              bitField0_ = (bitField0_ & ~0x00000004);
              obstaclesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getObstaclesFieldBuilder() : null;
            } else {
              obstaclesBuilder_.addAllMessages(other.obstacles_);
            }
          }
        }
        if (other.hasSensorSource()) {
          setSensorSource(other.getSensorSource());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if_proto_common.BxtObstacleV2.SensorObstacles parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (if_proto_common.BxtObstacleV2.SensorObstacles) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private if_proto_common.BxtCommonHeader.Header header_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonHeader.Header, if_proto_common.BxtCommonHeader.Header.Builder, if_proto_common.BxtCommonHeader.HeaderOrBuilder> headerBuilder_;
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       * @return Whether the header field is set.
       */
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       * @return The header.
       */
      public if_proto_common.BxtCommonHeader.Header getHeader() {
        if (headerBuilder_ == null) {
          return header_ == null ? if_proto_common.BxtCommonHeader.Header.getDefaultInstance() : header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       */
      public Builder setHeader(if_proto_common.BxtCommonHeader.Header value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
          onChanged();
        } else {
          headerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       */
      public Builder setHeader(
          if_proto_common.BxtCommonHeader.Header.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
          onChanged();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       */
      public Builder mergeHeader(if_proto_common.BxtCommonHeader.Header value) {
        if (headerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
              header_ != null &&
              header_ != if_proto_common.BxtCommonHeader.Header.getDefaultInstance()) {
            header_ =
              if_proto_common.BxtCommonHeader.Header.newBuilder(header_).mergeFrom(value).buildPartial();
          } else {
            header_ = value;
          }
          onChanged();
        } else {
          headerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       */
      public Builder clearHeader() {
        if (headerBuilder_ == null) {
          header_ = null;
          onChanged();
        } else {
          headerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       */
      public if_proto_common.BxtCommonHeader.Header.Builder getHeaderBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       */
      public if_proto_common.BxtCommonHeader.HeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_ == null ?
              if_proto_common.BxtCommonHeader.Header.getDefaultInstance() : header_;
        }
      }
      /**
       * <code>optional .if_proto_common.Header header = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonHeader.Header, if_proto_common.BxtCommonHeader.Header.Builder, if_proto_common.BxtCommonHeader.HeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtCommonHeader.Header, if_proto_common.BxtCommonHeader.Header.Builder, if_proto_common.BxtCommonHeader.HeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private int errorCode_ = 0;
      /**
       * <code>optional .if_proto_common.ErrorCode error_code = 2 [default = OK];</code>
       * @return Whether the errorCode field is set.
       */
      @java.lang.Override public boolean hasErrorCode() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional .if_proto_common.ErrorCode error_code = 2 [default = OK];</code>
       * @return The errorCode.
       */
      @java.lang.Override
      public if_proto_common.BxtStatusPb.ErrorCode getErrorCode() {
        @SuppressWarnings("deprecation")
        if_proto_common.BxtStatusPb.ErrorCode result = if_proto_common.BxtStatusPb.ErrorCode.valueOf(errorCode_);
        return result == null ? if_proto_common.BxtStatusPb.ErrorCode.OK : result;
      }
      /**
       * <code>optional .if_proto_common.ErrorCode error_code = 2 [default = OK];</code>
       * @param value The errorCode to set.
       * @return This builder for chaining.
       */
      public Builder setErrorCode(if_proto_common.BxtStatusPb.ErrorCode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        errorCode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .if_proto_common.ErrorCode error_code = 2 [default = OK];</code>
       * @return This builder for chaining.
       */
      public Builder clearErrorCode() {
        bitField0_ = (bitField0_ & ~0x00000002);
        errorCode_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<if_proto_common.BxtObstacleV2.Obstacle> obstacles_ =
        java.util.Collections.emptyList();
      private void ensureObstaclesIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          obstacles_ = new java.util.ArrayList<if_proto_common.BxtObstacleV2.Obstacle>(obstacles_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          if_proto_common.BxtObstacleV2.Obstacle, if_proto_common.BxtObstacleV2.Obstacle.Builder, if_proto_common.BxtObstacleV2.ObstacleOrBuilder> obstaclesBuilder_;

      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public java.util.List<if_proto_common.BxtObstacleV2.Obstacle> getObstaclesList() {
        if (obstaclesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(obstacles_);
        } else {
          return obstaclesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public int getObstaclesCount() {
        if (obstaclesBuilder_ == null) {
          return obstacles_.size();
        } else {
          return obstaclesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public if_proto_common.BxtObstacleV2.Obstacle getObstacles(int index) {
        if (obstaclesBuilder_ == null) {
          return obstacles_.get(index);
        } else {
          return obstaclesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public Builder setObstacles(
          int index, if_proto_common.BxtObstacleV2.Obstacle value) {
        if (obstaclesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureObstaclesIsMutable();
          obstacles_.set(index, value);
          onChanged();
        } else {
          obstaclesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public Builder setObstacles(
          int index, if_proto_common.BxtObstacleV2.Obstacle.Builder builderForValue) {
        if (obstaclesBuilder_ == null) {
          ensureObstaclesIsMutable();
          obstacles_.set(index, builderForValue.build());
          onChanged();
        } else {
          obstaclesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public Builder addObstacles(if_proto_common.BxtObstacleV2.Obstacle value) {
        if (obstaclesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureObstaclesIsMutable();
          obstacles_.add(value);
          onChanged();
        } else {
          obstaclesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public Builder addObstacles(
          int index, if_proto_common.BxtObstacleV2.Obstacle value) {
        if (obstaclesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureObstaclesIsMutable();
          obstacles_.add(index, value);
          onChanged();
        } else {
          obstaclesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public Builder addObstacles(
          if_proto_common.BxtObstacleV2.Obstacle.Builder builderForValue) {
        if (obstaclesBuilder_ == null) {
          ensureObstaclesIsMutable();
          obstacles_.add(builderForValue.build());
          onChanged();
        } else {
          obstaclesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public Builder addObstacles(
          int index, if_proto_common.BxtObstacleV2.Obstacle.Builder builderForValue) {
        if (obstaclesBuilder_ == null) {
          ensureObstaclesIsMutable();
          obstacles_.add(index, builderForValue.build());
          onChanged();
        } else {
          obstaclesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public Builder addAllObstacles(
          java.lang.Iterable<? extends if_proto_common.BxtObstacleV2.Obstacle> values) {
        if (obstaclesBuilder_ == null) {
          ensureObstaclesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, obstacles_);
          onChanged();
        } else {
          obstaclesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public Builder clearObstacles() {
        if (obstaclesBuilder_ == null) {
          obstacles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          obstaclesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public Builder removeObstacles(int index) {
        if (obstaclesBuilder_ == null) {
          ensureObstaclesIsMutable();
          obstacles_.remove(index);
          onChanged();
        } else {
          obstaclesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public if_proto_common.BxtObstacleV2.Obstacle.Builder getObstaclesBuilder(
          int index) {
        return getObstaclesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public if_proto_common.BxtObstacleV2.ObstacleOrBuilder getObstaclesOrBuilder(
          int index) {
        if (obstaclesBuilder_ == null) {
          return obstacles_.get(index);  } else {
          return obstaclesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public java.util.List<? extends if_proto_common.BxtObstacleV2.ObstacleOrBuilder> 
           getObstaclesOrBuilderList() {
        if (obstaclesBuilder_ != null) {
          return obstaclesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(obstacles_);
        }
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public if_proto_common.BxtObstacleV2.Obstacle.Builder addObstaclesBuilder() {
        return getObstaclesFieldBuilder().addBuilder(
            if_proto_common.BxtObstacleV2.Obstacle.getDefaultInstance());
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public if_proto_common.BxtObstacleV2.Obstacle.Builder addObstaclesBuilder(
          int index) {
        return getObstaclesFieldBuilder().addBuilder(
            index, if_proto_common.BxtObstacleV2.Obstacle.getDefaultInstance());
      }
      /**
       * <code>repeated .if_proto_common.Obstacle obstacles = 3;</code>
       */
      public java.util.List<if_proto_common.BxtObstacleV2.Obstacle.Builder> 
           getObstaclesBuilderList() {
        return getObstaclesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          if_proto_common.BxtObstacleV2.Obstacle, if_proto_common.BxtObstacleV2.Obstacle.Builder, if_proto_common.BxtObstacleV2.ObstacleOrBuilder> 
          getObstaclesFieldBuilder() {
        if (obstaclesBuilder_ == null) {
          obstaclesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              if_proto_common.BxtObstacleV2.Obstacle, if_proto_common.BxtObstacleV2.Obstacle.Builder, if_proto_common.BxtObstacleV2.ObstacleOrBuilder>(
                  obstacles_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          obstacles_ = null;
        }
        return obstaclesBuilder_;
      }

      private int sensorSource_ = 0;
      /**
       * <pre>
       * observation sensor of the obstacle
       * </pre>
       *
       * <code>optional .bxt.common.sensor.SensorSource sensor_source = 30 [default = UnknownSource];</code>
       * @return Whether the sensorSource field is set.
       */
      @java.lang.Override public boolean hasSensorSource() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * observation sensor of the obstacle
       * </pre>
       *
       * <code>optional .bxt.common.sensor.SensorSource sensor_source = 30 [default = UnknownSource];</code>
       * @return The sensorSource.
       */
      @java.lang.Override
      public bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource getSensorSource() {
        @SuppressWarnings("deprecation")
        bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource result = bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource.valueOf(sensorSource_);
        return result == null ? bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource.UnknownSource : result;
      }
      /**
       * <pre>
       * observation sensor of the obstacle
       * </pre>
       *
       * <code>optional .bxt.common.sensor.SensorSource sensor_source = 30 [default = UnknownSource];</code>
       * @param value The sensorSource to set.
       * @return This builder for chaining.
       */
      public Builder setSensorSource(bxt.common.sensor.BxtCommonSensorSensorSource.SensorSource value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        sensorSource_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * observation sensor of the obstacle
       * </pre>
       *
       * <code>optional .bxt.common.sensor.SensorSource sensor_source = 30 [default = UnknownSource];</code>
       * @return This builder for chaining.
       */
      public Builder clearSensorSource() {
        bitField0_ = (bitField0_ & ~0x00000008);
        sensorSource_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:if_proto_common.SensorObstacles)
    }

    // @@protoc_insertion_point(class_scope:if_proto_common.SensorObstacles)
    private static final if_proto_common.BxtObstacleV2.SensorObstacles DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new if_proto_common.BxtObstacleV2.SensorObstacles();
    }

    public static if_proto_common.BxtObstacleV2.SensorObstacles getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<SensorObstacles>
        PARSER = new com.google.protobuf.AbstractParser<SensorObstacles>() {
      @java.lang.Override
      public SensorObstacles parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorObstacles(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SensorObstacles> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SensorObstacles> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public if_proto_common.BxtObstacleV2.SensorObstacles getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RoadSurfaceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:if_proto_common.RoadSurface)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional double dbTimestamp = 1;</code>
     * @return Whether the dbTimestamp field is set.
     */
    boolean hasDbTimestamp();
    /**
     * <code>optional double dbTimestamp = 1;</code>
     * @return The dbTimestamp.
     */
    double getDbTimestamp();

    /**
     * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
     * @return Whether the stCenter field is set.
     */
    boolean hasStCenter();
    /**
     * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
     * @return The stCenter.
     */
    if_proto_common.BxtCommonMathVector3D.Vector3d getStCenter();
    /**
     * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
     */
    if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getStCenterOrBuilder();

    /**
     * <code>optional double dblength = 3;</code>
     * @return Whether the dblength field is set.
     */
    boolean hasDblength();
    /**
     * <code>optional double dblength = 3;</code>
     * @return The dblength.
     */
    double getDblength();

    /**
     * <code>optional double dbwidth = 4;</code>
     * @return Whether the dbwidth field is set.
     */
    boolean hasDbwidth();
    /**
     * <code>optional double dbwidth = 4;</code>
     * @return The dbwidth.
     */
    double getDbwidth();

    /**
     * <code>optional .if_proto_common.ROAD_SURFACE_TYPE_E ulRoadSurfaceType = 5;</code>
     * @return Whether the ulRoadSurfaceType field is set.
     */
    boolean hasUlRoadSurfaceType();
    /**
     * <code>optional .if_proto_common.ROAD_SURFACE_TYPE_E ulRoadSurfaceType = 5;</code>
     * @return The ulRoadSurfaceType.
     */
    if_proto_common.BxtObstacleV2.ROAD_SURFACE_TYPE_E getUlRoadSurfaceType();

    /**
     * <code>optional double dbRoadSurfaceConfidence = 6;</code>
     * @return Whether the dbRoadSurfaceConfidence field is set.
     */
    boolean hasDbRoadSurfaceConfidence();
    /**
     * <code>optional double dbRoadSurfaceConfidence = 6;</code>
     * @return The dbRoadSurfaceConfidence.
     */
    double getDbRoadSurfaceConfidence();
  }
  /**
   * Protobuf type {@code if_proto_common.RoadSurface}
   */
  public static final class RoadSurface extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:if_proto_common.RoadSurface)
      RoadSurfaceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RoadSurface.newBuilder() to construct.
    private RoadSurface(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RoadSurface() {
      ulRoadSurfaceType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RoadSurface();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RoadSurface(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {
              bitField0_ |= 0x00000001;
              dbTimestamp_ = input.readDouble();
              break;
            }
            case 18: {
              if_proto_common.BxtCommonMathVector3D.Vector3d.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) != 0)) {
                subBuilder = stCenter_.toBuilder();
              }
              stCenter_ = input.readMessage(if_proto_common.BxtCommonMathVector3D.Vector3d.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stCenter_);
                stCenter_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              dblength_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              dbwidth_ = input.readDouble();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              if_proto_common.BxtObstacleV2.ROAD_SURFACE_TYPE_E value = if_proto_common.BxtObstacleV2.ROAD_SURFACE_TYPE_E.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                ulRoadSurfaceType_ = rawValue;
              }
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              dbRoadSurfaceConfidence_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_RoadSurface_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_RoadSurface_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              if_proto_common.BxtObstacleV2.RoadSurface.class, if_proto_common.BxtObstacleV2.RoadSurface.Builder.class);
    }

    private int bitField0_;
    public static final int DBTIMESTAMP_FIELD_NUMBER = 1;
    private double dbTimestamp_;
    /**
     * <code>optional double dbTimestamp = 1;</code>
     * @return Whether the dbTimestamp field is set.
     */
    @java.lang.Override
    public boolean hasDbTimestamp() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional double dbTimestamp = 1;</code>
     * @return The dbTimestamp.
     */
    @java.lang.Override
    public double getDbTimestamp() {
      return dbTimestamp_;
    }

    public static final int STCENTER_FIELD_NUMBER = 2;
    private if_proto_common.BxtCommonMathVector3D.Vector3d stCenter_;
    /**
     * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
     * @return Whether the stCenter field is set.
     */
    @java.lang.Override
    public boolean hasStCenter() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
     * @return The stCenter.
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathVector3D.Vector3d getStCenter() {
      return stCenter_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : stCenter_;
    }
    /**
     * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
     */
    @java.lang.Override
    public if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getStCenterOrBuilder() {
      return stCenter_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : stCenter_;
    }

    public static final int DBLENGTH_FIELD_NUMBER = 3;
    private double dblength_;
    /**
     * <code>optional double dblength = 3;</code>
     * @return Whether the dblength field is set.
     */
    @java.lang.Override
    public boolean hasDblength() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional double dblength = 3;</code>
     * @return The dblength.
     */
    @java.lang.Override
    public double getDblength() {
      return dblength_;
    }

    public static final int DBWIDTH_FIELD_NUMBER = 4;
    private double dbwidth_;
    /**
     * <code>optional double dbwidth = 4;</code>
     * @return Whether the dbwidth field is set.
     */
    @java.lang.Override
    public boolean hasDbwidth() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional double dbwidth = 4;</code>
     * @return The dbwidth.
     */
    @java.lang.Override
    public double getDbwidth() {
      return dbwidth_;
    }

    public static final int ULROADSURFACETYPE_FIELD_NUMBER = 5;
    private int ulRoadSurfaceType_;
    /**
     * <code>optional .if_proto_common.ROAD_SURFACE_TYPE_E ulRoadSurfaceType = 5;</code>
     * @return Whether the ulRoadSurfaceType field is set.
     */
    @java.lang.Override public boolean hasUlRoadSurfaceType() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional .if_proto_common.ROAD_SURFACE_TYPE_E ulRoadSurfaceType = 5;</code>
     * @return The ulRoadSurfaceType.
     */
    @java.lang.Override public if_proto_common.BxtObstacleV2.ROAD_SURFACE_TYPE_E getUlRoadSurfaceType() {
      @SuppressWarnings("deprecation")
      if_proto_common.BxtObstacleV2.ROAD_SURFACE_TYPE_E result = if_proto_common.BxtObstacleV2.ROAD_SURFACE_TYPE_E.valueOf(ulRoadSurfaceType_);
      return result == null ? if_proto_common.BxtObstacleV2.ROAD_SURFACE_TYPE_E.NORMAL : result;
    }

    public static final int DBROADSURFACECONFIDENCE_FIELD_NUMBER = 6;
    private double dbRoadSurfaceConfidence_;
    /**
     * <code>optional double dbRoadSurfaceConfidence = 6;</code>
     * @return Whether the dbRoadSurfaceConfidence field is set.
     */
    @java.lang.Override
    public boolean hasDbRoadSurfaceConfidence() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional double dbRoadSurfaceConfidence = 6;</code>
     * @return The dbRoadSurfaceConfidence.
     */
    @java.lang.Override
    public double getDbRoadSurfaceConfidence() {
      return dbRoadSurfaceConfidence_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeDouble(1, dbTimestamp_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getStCenter());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeDouble(3, dblength_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeDouble(4, dbwidth_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeEnum(5, ulRoadSurfaceType_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeDouble(6, dbRoadSurfaceConfidence_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, dbTimestamp_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getStCenter());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, dblength_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, dbwidth_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, ulRoadSurfaceType_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, dbRoadSurfaceConfidence_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof if_proto_common.BxtObstacleV2.RoadSurface)) {
        return super.equals(obj);
      }
      if_proto_common.BxtObstacleV2.RoadSurface other = (if_proto_common.BxtObstacleV2.RoadSurface) obj;

      if (hasDbTimestamp() != other.hasDbTimestamp()) return false;
      if (hasDbTimestamp()) {
        if (java.lang.Double.doubleToLongBits(getDbTimestamp())
            != java.lang.Double.doubleToLongBits(
                other.getDbTimestamp())) return false;
      }
      if (hasStCenter() != other.hasStCenter()) return false;
      if (hasStCenter()) {
        if (!getStCenter()
            .equals(other.getStCenter())) return false;
      }
      if (hasDblength() != other.hasDblength()) return false;
      if (hasDblength()) {
        if (java.lang.Double.doubleToLongBits(getDblength())
            != java.lang.Double.doubleToLongBits(
                other.getDblength())) return false;
      }
      if (hasDbwidth() != other.hasDbwidth()) return false;
      if (hasDbwidth()) {
        if (java.lang.Double.doubleToLongBits(getDbwidth())
            != java.lang.Double.doubleToLongBits(
                other.getDbwidth())) return false;
      }
      if (hasUlRoadSurfaceType() != other.hasUlRoadSurfaceType()) return false;
      if (hasUlRoadSurfaceType()) {
        if (ulRoadSurfaceType_ != other.ulRoadSurfaceType_) return false;
      }
      if (hasDbRoadSurfaceConfidence() != other.hasDbRoadSurfaceConfidence()) return false;
      if (hasDbRoadSurfaceConfidence()) {
        if (java.lang.Double.doubleToLongBits(getDbRoadSurfaceConfidence())
            != java.lang.Double.doubleToLongBits(
                other.getDbRoadSurfaceConfidence())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDbTimestamp()) {
        hash = (37 * hash) + DBTIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDbTimestamp()));
      }
      if (hasStCenter()) {
        hash = (37 * hash) + STCENTER_FIELD_NUMBER;
        hash = (53 * hash) + getStCenter().hashCode();
      }
      if (hasDblength()) {
        hash = (37 * hash) + DBLENGTH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDblength()));
      }
      if (hasDbwidth()) {
        hash = (37 * hash) + DBWIDTH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDbwidth()));
      }
      if (hasUlRoadSurfaceType()) {
        hash = (37 * hash) + ULROADSURFACETYPE_FIELD_NUMBER;
        hash = (53 * hash) + ulRoadSurfaceType_;
      }
      if (hasDbRoadSurfaceConfidence()) {
        hash = (37 * hash) + DBROADSURFACECONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getDbRoadSurfaceConfidence()));
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static if_proto_common.BxtObstacleV2.RoadSurface parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.RoadSurface parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.RoadSurface parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.RoadSurface parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.RoadSurface parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static if_proto_common.BxtObstacleV2.RoadSurface parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.RoadSurface parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.RoadSurface parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.RoadSurface parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.RoadSurface parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static if_proto_common.BxtObstacleV2.RoadSurface parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static if_proto_common.BxtObstacleV2.RoadSurface parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(if_proto_common.BxtObstacleV2.RoadSurface prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code if_proto_common.RoadSurface}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:if_proto_common.RoadSurface)
        if_proto_common.BxtObstacleV2.RoadSurfaceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_RoadSurface_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_RoadSurface_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                if_proto_common.BxtObstacleV2.RoadSurface.class, if_proto_common.BxtObstacleV2.RoadSurface.Builder.class);
      }

      // Construct using if_proto_common.BxtObstacleV2.RoadSurface.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getStCenterFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        dbTimestamp_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (stCenterBuilder_ == null) {
          stCenter_ = null;
        } else {
          stCenterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        dblength_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        dbwidth_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        ulRoadSurfaceType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        dbRoadSurfaceConfidence_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return if_proto_common.BxtObstacleV2.internal_static_if_proto_common_RoadSurface_descriptor;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.RoadSurface getDefaultInstanceForType() {
        return if_proto_common.BxtObstacleV2.RoadSurface.getDefaultInstance();
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.RoadSurface build() {
        if_proto_common.BxtObstacleV2.RoadSurface result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public if_proto_common.BxtObstacleV2.RoadSurface buildPartial() {
        if_proto_common.BxtObstacleV2.RoadSurface result = new if_proto_common.BxtObstacleV2.RoadSurface(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.dbTimestamp_ = dbTimestamp_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          if (stCenterBuilder_ == null) {
            result.stCenter_ = stCenter_;
          } else {
            result.stCenter_ = stCenterBuilder_.build();
          }
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.dblength_ = dblength_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.dbwidth_ = dbwidth_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          to_bitField0_ |= 0x00000010;
        }
        result.ulRoadSurfaceType_ = ulRoadSurfaceType_;
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.dbRoadSurfaceConfidence_ = dbRoadSurfaceConfidence_;
          to_bitField0_ |= 0x00000020;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof if_proto_common.BxtObstacleV2.RoadSurface) {
          return mergeFrom((if_proto_common.BxtObstacleV2.RoadSurface)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(if_proto_common.BxtObstacleV2.RoadSurface other) {
        if (other == if_proto_common.BxtObstacleV2.RoadSurface.getDefaultInstance()) return this;
        if (other.hasDbTimestamp()) {
          setDbTimestamp(other.getDbTimestamp());
        }
        if (other.hasStCenter()) {
          mergeStCenter(other.getStCenter());
        }
        if (other.hasDblength()) {
          setDblength(other.getDblength());
        }
        if (other.hasDbwidth()) {
          setDbwidth(other.getDbwidth());
        }
        if (other.hasUlRoadSurfaceType()) {
          setUlRoadSurfaceType(other.getUlRoadSurfaceType());
        }
        if (other.hasDbRoadSurfaceConfidence()) {
          setDbRoadSurfaceConfidence(other.getDbRoadSurfaceConfidence());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if_proto_common.BxtObstacleV2.RoadSurface parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (if_proto_common.BxtObstacleV2.RoadSurface) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private double dbTimestamp_ ;
      /**
       * <code>optional double dbTimestamp = 1;</code>
       * @return Whether the dbTimestamp field is set.
       */
      @java.lang.Override
      public boolean hasDbTimestamp() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional double dbTimestamp = 1;</code>
       * @return The dbTimestamp.
       */
      @java.lang.Override
      public double getDbTimestamp() {
        return dbTimestamp_;
      }
      /**
       * <code>optional double dbTimestamp = 1;</code>
       * @param value The dbTimestamp to set.
       * @return This builder for chaining.
       */
      public Builder setDbTimestamp(double value) {
        bitField0_ |= 0x00000001;
        dbTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double dbTimestamp = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDbTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000001);
        dbTimestamp_ = 0D;
        onChanged();
        return this;
      }

      private if_proto_common.BxtCommonMathVector3D.Vector3d stCenter_;
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder> stCenterBuilder_;
      /**
       * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
       * @return Whether the stCenter field is set.
       */
      public boolean hasStCenter() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
       * @return The stCenter.
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3d getStCenter() {
        if (stCenterBuilder_ == null) {
          return stCenter_ == null ? if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : stCenter_;
        } else {
          return stCenterBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
       */
      public Builder setStCenter(if_proto_common.BxtCommonMathVector3D.Vector3d value) {
        if (stCenterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stCenter_ = value;
          onChanged();
        } else {
          stCenterBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
       */
      public Builder setStCenter(
          if_proto_common.BxtCommonMathVector3D.Vector3d.Builder builderForValue) {
        if (stCenterBuilder_ == null) {
          stCenter_ = builderForValue.build();
          onChanged();
        } else {
          stCenterBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
       */
      public Builder mergeStCenter(if_proto_common.BxtCommonMathVector3D.Vector3d value) {
        if (stCenterBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
              stCenter_ != null &&
              stCenter_ != if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance()) {
            stCenter_ =
              if_proto_common.BxtCommonMathVector3D.Vector3d.newBuilder(stCenter_).mergeFrom(value).buildPartial();
          } else {
            stCenter_ = value;
          }
          onChanged();
        } else {
          stCenterBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
       */
      public Builder clearStCenter() {
        if (stCenterBuilder_ == null) {
          stCenter_ = null;
          onChanged();
        } else {
          stCenterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3d.Builder getStCenterBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getStCenterFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
       */
      public if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder getStCenterOrBuilder() {
        if (stCenterBuilder_ != null) {
          return stCenterBuilder_.getMessageOrBuilder();
        } else {
          return stCenter_ == null ?
              if_proto_common.BxtCommonMathVector3D.Vector3d.getDefaultInstance() : stCenter_;
        }
      }
      /**
       * <code>optional .if_proto_common.Vector3d stCenter = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder> 
          getStCenterFieldBuilder() {
        if (stCenterBuilder_ == null) {
          stCenterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              if_proto_common.BxtCommonMathVector3D.Vector3d, if_proto_common.BxtCommonMathVector3D.Vector3d.Builder, if_proto_common.BxtCommonMathVector3D.Vector3dOrBuilder>(
                  getStCenter(),
                  getParentForChildren(),
                  isClean());
          stCenter_ = null;
        }
        return stCenterBuilder_;
      }

      private double dblength_ ;
      /**
       * <code>optional double dblength = 3;</code>
       * @return Whether the dblength field is set.
       */
      @java.lang.Override
      public boolean hasDblength() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional double dblength = 3;</code>
       * @return The dblength.
       */
      @java.lang.Override
      public double getDblength() {
        return dblength_;
      }
      /**
       * <code>optional double dblength = 3;</code>
       * @param value The dblength to set.
       * @return This builder for chaining.
       */
      public Builder setDblength(double value) {
        bitField0_ |= 0x00000004;
        dblength_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double dblength = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDblength() {
        bitField0_ = (bitField0_ & ~0x00000004);
        dblength_ = 0D;
        onChanged();
        return this;
      }

      private double dbwidth_ ;
      /**
       * <code>optional double dbwidth = 4;</code>
       * @return Whether the dbwidth field is set.
       */
      @java.lang.Override
      public boolean hasDbwidth() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional double dbwidth = 4;</code>
       * @return The dbwidth.
       */
      @java.lang.Override
      public double getDbwidth() {
        return dbwidth_;
      }
      /**
       * <code>optional double dbwidth = 4;</code>
       * @param value The dbwidth to set.
       * @return This builder for chaining.
       */
      public Builder setDbwidth(double value) {
        bitField0_ |= 0x00000008;
        dbwidth_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double dbwidth = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearDbwidth() {
        bitField0_ = (bitField0_ & ~0x00000008);
        dbwidth_ = 0D;
        onChanged();
        return this;
      }

      private int ulRoadSurfaceType_ = 0;
      /**
       * <code>optional .if_proto_common.ROAD_SURFACE_TYPE_E ulRoadSurfaceType = 5;</code>
       * @return Whether the ulRoadSurfaceType field is set.
       */
      @java.lang.Override public boolean hasUlRoadSurfaceType() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional .if_proto_common.ROAD_SURFACE_TYPE_E ulRoadSurfaceType = 5;</code>
       * @return The ulRoadSurfaceType.
       */
      @java.lang.Override
      public if_proto_common.BxtObstacleV2.ROAD_SURFACE_TYPE_E getUlRoadSurfaceType() {
        @SuppressWarnings("deprecation")
        if_proto_common.BxtObstacleV2.ROAD_SURFACE_TYPE_E result = if_proto_common.BxtObstacleV2.ROAD_SURFACE_TYPE_E.valueOf(ulRoadSurfaceType_);
        return result == null ? if_proto_common.BxtObstacleV2.ROAD_SURFACE_TYPE_E.NORMAL : result;
      }
      /**
       * <code>optional .if_proto_common.ROAD_SURFACE_TYPE_E ulRoadSurfaceType = 5;</code>
       * @param value The ulRoadSurfaceType to set.
       * @return This builder for chaining.
       */
      public Builder setUlRoadSurfaceType(if_proto_common.BxtObstacleV2.ROAD_SURFACE_TYPE_E value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        ulRoadSurfaceType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .if_proto_common.ROAD_SURFACE_TYPE_E ulRoadSurfaceType = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearUlRoadSurfaceType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        ulRoadSurfaceType_ = 0;
        onChanged();
        return this;
      }

      private double dbRoadSurfaceConfidence_ ;
      /**
       * <code>optional double dbRoadSurfaceConfidence = 6;</code>
       * @return Whether the dbRoadSurfaceConfidence field is set.
       */
      @java.lang.Override
      public boolean hasDbRoadSurfaceConfidence() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional double dbRoadSurfaceConfidence = 6;</code>
       * @return The dbRoadSurfaceConfidence.
       */
      @java.lang.Override
      public double getDbRoadSurfaceConfidence() {
        return dbRoadSurfaceConfidence_;
      }
      /**
       * <code>optional double dbRoadSurfaceConfidence = 6;</code>
       * @param value The dbRoadSurfaceConfidence to set.
       * @return This builder for chaining.
       */
      public Builder setDbRoadSurfaceConfidence(double value) {
        bitField0_ |= 0x00000020;
        dbRoadSurfaceConfidence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double dbRoadSurfaceConfidence = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearDbRoadSurfaceConfidence() {
        bitField0_ = (bitField0_ & ~0x00000020);
        dbRoadSurfaceConfidence_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:if_proto_common.RoadSurface)
    }

    // @@protoc_insertion_point(class_scope:if_proto_common.RoadSurface)
    private static final if_proto_common.BxtObstacleV2.RoadSurface DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new if_proto_common.BxtObstacleV2.RoadSurface();
    }

    public static if_proto_common.BxtObstacleV2.RoadSurface getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<RoadSurface>
        PARSER = new com.google.protobuf.AbstractParser<RoadSurface>() {
      @java.lang.Override
      public RoadSurface parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoadSurface(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RoadSurface> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RoadSurface> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public if_proto_common.BxtObstacleV2.RoadSurface getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_if_proto_common_Point2D_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_if_proto_common_Point2D_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_if_proto_common_PixelPointCoordinate_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_if_proto_common_PixelPointCoordinate_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_if_proto_common_Obstacle_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_if_proto_common_Obstacle_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_if_proto_common_LidarSupplement_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_if_proto_common_LidarSupplement_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_if_proto_common_Box2d_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_if_proto_common_Box2d_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_if_proto_common_RadarSupplement_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_if_proto_common_RadarSupplement_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_if_proto_common_CameraSupplement_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_if_proto_common_CameraSupplement_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_if_proto_common_SensorObstacles_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_if_proto_common_SensorObstacles_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_if_proto_common_RoadSurface_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_if_proto_common_RoadSurface_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025bxt.obstacle_v2.proto\022\017if_proto_common" +
      "\032\022bxt.StatusPb.proto\032\036bxt.common.math.Ma" +
      "trixXd.proto\032\036bxt.common.math.Vector3d.p" +
      "roto\032$bxt.common.sensor.SensorSource.pro" +
      "to\032\027bxt.common.Header.proto\032\033bxt.common." +
      "math.point.proto\"#\n\007Point2D\022\013\n\003dbx\030\001 \001(\001" +
      "\022\013\n\003dby\030\002 \001(\001\"\177\n\024PixelPointCoordinate\0226\n" +
      "\014ulCameraType\030\001 \001(\0162 .if_proto_common.Ca" +
      "meraCalibType\022/\n\rastPixelPoint\030\002 \003(\0132\030.i" +
      "f_proto_common.Point2D\"\254\r\n\010Obstacle\022\n\n\002i" +
      "d\030\001 \001(\005\022\026\n\016drsu_timestamp\030\002 \001(\001\022)\n\006cente" +
      "r\030\003 \001(\0132\031.if_proto_common.Vector3d\022-\n\neg" +
      "o_center\030\004 \001(\0132\031.if_proto_common.Vector3" +
      "d\022,\n\tdirection\030\005 \001(\0132\031.if_proto_common.V" +
      "ector3d\022\r\n\005theta\030\006 \001(\001\022\016\n\006length\030\007 \001(\001\022\r" +
      "\n\005width\030\010 \001(\001\022\016\n\006height\030\t \001(\001\022\026\n\016det_con" +
      "fidence\030\n \001(\001\022-\n\010obj_type\030\024 \001(\0162\033.if_pro" +
      "to_common.ObjectType\022\021\n\ttype_prob\030\025 \001(\001\022" +
      "\020\n\010track_id\030\036 \001(\005\0227\n\024position_uncertaint" +
      "y\030+ \001(\0132\031.if_proto_common.MatrixXd\022+\n\010ve" +
      "locity\030\037 \001(\0132\031.if_proto_common.Vector3d\022" +
      "7\n\024velocity_uncertainty\030& \001(\0132\031.if_proto" +
      "_common.MatrixXd\022\030\n\020angular_velocity\030  \001" +
      "(\001\022/\n\014acceleration\030! \001(\0132\031.if_proto_comm" +
      "on.Vector3d\022;\n\030acceleration_uncertainty\030" +
      "\' \001(\0132\031.if_proto_common.MatrixXd\022\026\n\016dete" +
      "ction_time\030\" \001(\001\022\025\n\rtracking_time\030# \001(\001\022" +
      "\033\n\023latest_tracked_time\030$ \001(\001\022E\n\rsensor_s" +
      "ource\030% \001(\0162\037.bxt.common.sensor.SensorSo" +
      "urce:\rUnknownSource\022\026\n\010is_valid\030( \001(\010:\004t" +
      "rue\022\032\n\013is_on_hdmap\030) \001(\010:\005false\022\034\n\ris_st" +
      "ationary\030* \001(\010:\005false\022\017\n\007aucLane\030, \003(\005\022\021" +
      "\n\taucHdLane\030- \003(\005\022\027\n\017aucHdConnection\030. \003" +
      "(\005\022\024\n\014aulCrosswalk\030/ \003(\005\022F\n\027astPixelPoin" +
      "tCoordinate\0300 \003(\0132%.if_proto_common.Pixe" +
      "lPointCoordinate\022\034\n\024camera_mid_timestamp" +
      "\0301 \001(\001\022\035\n\025camera_long_timestamp\0302 \001(\001\022\027\n" +
      "\017radar_timestamp\0303 \001(\001\022\024\n\014VehicleClass\030<" +
      " \001(\t\022\024\n\014VehicleColor\030= \001(\t\022\024\n\014VehicleBra" +
      "nd\030> \001(\t\022\024\n\014VehicleModel\030? \001(\t\022\025\n\rVehicl" +
      "eStyles\030@ \001(\t\022\022\n\nPlateClass\030A \001(\t\022\022\n\nPla" +
      "teColor\030B \001(\t\022\017\n\007PlateNo\030C \001(\t\022\024\n\014CarDir" +
      "ection\030F \001(\005\022\032\n\022SpecialVehicleType\030G \001(\005" +
      "\022\024\n\014dataSourceIP\030H \001(\r\022\017\n\007heading\030I \001(\005\022" +
      "\r\n\005speed\030J \001(\005\022&\n\003gps\030K \001(\0132\031.if_proto_c" +
      "ommon.PointGPS\022\027\n\017speedConfidence\030L \001(\r\022" +
      "\025\n\rposConfidence\030M \001(\r\022\026\n\016targetCameraIP" +
      "\030N \001(\t\022\027\n\017targetCameraDis\030O \001(\r\022<\n\021camer" +
      "a_supplement\030d \001(\0132!.if_proto_common.Cam" +
      "eraSupplement\022:\n\020lidar_supplement\030e \001(\0132" +
      " .if_proto_common.LidarSupplement\022:\n\020rad" +
      "ar_supplement\030f \001(\0132 .if_proto_common.Ra" +
      "darSupplement\"-\n\017LidarSupplement\022\032\n\016occu" +
      "pied_grids\030\001 \003(\005B\002\020\001\"?\n\005Box2d\022\014\n\004xmin\030\001 " +
      "\001(\001\022\014\n\004ymin\030\002 \001(\001\022\014\n\004xmax\030\003 \001(\001\022\014\n\004ymax\030" +
      "\004 \001(\001\"/\n\017RadarSupplement\022\034\n\ris_backgroun" +
      "d\030\001 \001(\010:\005false\"\341\002\n\020CameraSupplement\022\034\n\024d" +
      "is_from_lane_center\030\001 \001(\001\022\024\n\014dis_from_eg" +
      "o\030\002 \001(\001\022\022\n\nin_lane_id\030\003 \001(\005\022\'\n\007img_box\030\004" +
      " \001(\0132\026.if_proto_common.Box2d\022R\n\022camera_o" +
      "bject_type\030\005 \001(\01622.if_proto_common.Camer" +
      "aSupplement.CameraObjectType:\002BG\022\022\n\nconf" +
      "idence\030\006 \001(\001\"t\n\020CameraObjectType\022\006\n\002BG\020\000" +
      "\022\007\n\003CAR\020\001\022\007\n\003BUS\020\002\022\t\n\005TRUCK\020\003\022\n\n\006PERSON\020" +
      "\004\022\013\n\007BICYCLE\020\005\022\014\n\010TRICYCLE\020\006\022\t\n\005BLOCK\020\007\022" +
      "\t\n\005MOTOR\020\010\"\343\001\n\017SensorObstacles\022\'\n\006header" +
      "\030\001 \001(\0132\027.if_proto_common.Header\0222\n\nerror" +
      "_code\030\002 \001(\0162\032.if_proto_common.ErrorCode:" +
      "\002OK\022,\n\tobstacles\030\003 \003(\0132\031.if_proto_common" +
      ".Obstacle\022E\n\rsensor_source\030\036 \001(\0162\037.bxt.c" +
      "ommon.sensor.SensorSource:\rUnknownSource" +
      "\"\324\001\n\013RoadSurface\022\023\n\013dbTimestamp\030\001 \001(\001\022+\n" +
      "\010stCenter\030\002 \001(\0132\031.if_proto_common.Vector" +
      "3d\022\020\n\010dblength\030\003 \001(\001\022\017\n\007dbwidth\030\004 \001(\001\022?\n" +
      "\021ulRoadSurfaceType\030\005 \001(\0162$.if_proto_comm" +
      "on.ROAD_SURFACE_TYPE_E\022\037\n\027dbRoadSurfaceC" +
      "onfidence\030\006 \001(\001*\234\001\n\017CameraCalibType\022!\n\035C" +
      "AMERA_CALIBRATION_HEAD_RIGHT\020\000\022!\n\035CAMERA" +
      "_CALIBRATION_FRONT_LEFT\020\001\022\"\n\036CAMERA_CALI" +
      "BRATION_FRONT_RIGHT\020\002\022\037\n\032CAMERA_CALIBRAT" +
      "ION_INVALID\020\377\001*\310\002\n\nObjectType\022\013\n\007UNKNOWN" +
      "\020\000\022\023\n\017UNKNOWN_MOVABLE\020\001\022\025\n\021UNKNOWN_UNMOV" +
      "ABLE\020\002\022\016\n\nPEDESTRIAN\020\003\022\013\n\007BICYCLE\020\004\022\013\n\007V" +
      "EHICLE\020\005\022\007\n\003CAR\020\006\022\t\n\005TRUCK\020\007\022\007\n\003BUS\020\010\022\014\n" +
      "\010TRICYCLE\020\t\022\t\n\005BLOCK\020\n\022\017\n\013CONE_BARREL\020\013\022" +
      "\021\n\rABANDONED_BOX\020\014\022\022\n\016ABANDONED_TYRE\020\r\022\023" +
      "\n\017TYPE_PEDESTRIAN\020\025\022\017\n\013TYPE_OBJECT\020\026\022\020\n\014" +
      "TYPE_VEHICLE\020\027\022\021\n\rTYPE_NONMOTOR\020\030\022\016\n\nTYP" +
      "E_GOODS\020\031\022\016\n\nTYPE_SCENE\020\032*\221\003\n\022SpecialVeh" +
      "icleType\022\027\n\023NON_SPECIAL_VEHICLE\020\000\022\036\n\032SPE" +
      "CIAL_VEHICLE_SCHOOL_BUS\020\001\022\036\n\032SPECIAL_VEH" +
      "ICLE_DUMP_TRUCK\020\002\022\035\n\031SPECIAL_VEHICLE_HIG" +
      "H_RISK\020\003\022\030\n\024SPECIAL_VEHICLE_TAXI\020\004\022\036\n\032SP" +
      "ECIAL_VEHICLE_OIL_TANKER\020\005\022\031\n\025SPECIAL_VE" +
      "HICLE_CRANE\020\006\022\027\n\023SPECIAL_VEHICLE_BUS\020\007\022&" +
      "\n\"SPECIAL_VEHICLE_FOUR_WHEEL_SCOOTER\020\010\022\035" +
      "\n\031SPECIAL_VEHICLE_AMBULANCE\020\t\022.\n*SPECIAL" +
      "_VEHICLE_ENGINEERING_RESCUE_VEHICLE\020\n\022\036\n" +
      "\032SPECIAL_VEHICLE_FIRE_TRUCK\020\013*\312\002\n\022ITS800" +
      "VehicleClass\022\030\n\024ITS_VEHICLE_TYPE_NOT\020\000\022\023" +
      "\n\017ITS_VEHICLE_CAR\020\001\022\025\n\021ITS_VEHICLE_TRUCK" +
      "\020\002\022\023\n\017ITS_VEHICLE_VAN\020\003\022\023\n\017ITS_VEHICLE_P" +
      "AS\020\004\022\025\n\021ITS_VEHICLE_BUGGY\020\005\022\023\n\017ITS_VEHIC" +
      "LE_SUV\020\006\022\032\n\026ITS_VEHICLE_MEDIUM_BUS\020\007\022\032\n\026" +
      "ITS_VEHICLE_SCHOOL_BUS\020\010\022\033\n\027ITS_VEHICLE_" +
      "HEAVY_TRUCK\020\t\022\026\n\022ITS_VEHICLE_TANKER\020\n\022\023\n" +
      "\017ITS_VEHICLE_MPV\020\013\022\026\n\022ITS_VEHICLE_PICKUP" +
      "\020\r*\206\001\n\032ITS800NonMotorVehicleClass\022\030\n\024ITS" +
      "_NONMOTOR_BICYCLE\020\001\022\033\n\027ITS_NONMOTOR_MOTO" +
      "RCYCLE\020\002\022\031\n\025ITS_NONMOTOR_TRICYCLE\020\003\022\026\n\022I" +
      "TS_NONMOTOR_OTHER\020c*\236\002\n\022ITS800VehicleCol" +
      "or\022\r\n\tITS_WHITE\020\000\022\014\n\010ITS_GRAY\020\001\022\016\n\nITS_Y" +
      "ELLOW\020\002\022\014\n\010ITS_PINK\020\003\022\013\n\007ITS_RED\020\004\022\r\n\tIT" +
      "S_GREEN\020\005\022\014\n\010ITS_BLUE\020\006\022\r\n\tITS_BROWN\020\007\022\r" +
      "\n\tITS_BLACK\020\010\022\021\n\rITS_COLOR_NOT\020\t\022\016\n\nITS_" +
      "PURPLE\020\n\022\016\n\nITS_ORANGE\020\013\022\016\n\nITS_SILVER\020\014" +
      "\022\014\n\010ITS_CYAN\020\r\022\016\n\nITS_GLODEN\020\016\022\017\n\013ITS_LU" +
      "CENCY\020\017\022\023\n\017ITS_COLOR_OTHER\020c*\343\002\n\023GAT1400" +
      "VehicleColor\022\021\n\rVEHICLE_BLACK\020\001\022\021\n\rVEHIC" +
      "LE_WHITE\020\002\022\020\n\014VEHICLE_GRAY\020\003\022\017\n\013VEHICLE_" +
      "RED\020\004\022\020\n\014VEHICLE_BLUE\020\005\022\022\n\016VEHICLE_YELLO" +
      "W\020\006\022\022\n\016VEHICLE_ORANGE\020\007\022\021\n\rVEHICLE_BROWN" +
      "\020\010\022\021\n\rVEHICLE_GREEN\020\t\022\020\n\014VEHICLE_PINK\020\014\022" +
      "\022\n\016VEHICLE_PURPLE\020\n\022\020\n\014VEHICLE_CYAN\020\013\022\023\n" +
      "\017VEHICLE_LUCENCY\020\r\022\022\n\016VEHICLE_SILVER\020=\022\022" +
      "\n\016VEHICLE_GLODEN\020>\022\025\n\021VEHICLE_COLOR_NOT\020" +
      "b\022\027\n\023VEHICLE_COLOR_OTHER\020c*\202\003\n\020ITS800Pla" +
      "teColor\022\033\n\027ITS_PLATE_COLOR_UNKNOWN\020\000\022\030\n\024" +
      "ITS_PLATE_COLOR_BLUE\020\001\022\032\n\026ITS_PLATE_COLO" +
      "R_YELLOW\020\002\022\031\n\025ITS_PLATE_COLOR_WHITH\020\003\022\031\n" +
      "\025ITS_PLATE_COLOR_BLACK\020\004\022\031\n\025ITS_PLATE_CO" +
      "LOR_GREEN\020\005\022\"\n\036ITS_PLATE_COLOR_GRADIENT_" +
      "GREEN\020\006\022 \n\034ITS_PLATE_COLOR_YELLOW_GREEN\020" +
      "\007\022\027\n\023ITS_PLATE_COLOR_RED\020\010\022\030\n\024ITS_PLATE_" +
      "COLOR_GRAY\020\t\022\032\n\026ITS_PLATE_COLOR_ORANGE\020\016" +
      "\022\032\n\026ITS_PLATE_COLOR_PURPLE\020\017\022\031\n\025ITS_PLAT" +
      "E_COLOR_BROWN\020\020*\346\002\n\021GAT1400PlateColor\022\024\n" +
      "\020PLATE_COLOR_GRAY\020\003\022\023\n\017PLATE_COLOR_RED\020\004" +
      "\022\026\n\022PLATE_COLOR_ORANGE\020\007\022\025\n\021PLATE_COLOR_" +
      "BROWN\020\010\022\026\n\022PLATE_COLOR_PURPLE\020\n\022\024\n\020PLATE" +
      "_COLOR_BLUE\020=\022\026\n\022PLATE_COLOR_YELLOW\020>\022\025\n" +
      "\021PLATE_COLOR_WHITH\020?\022\025\n\021PLATE_COLOR_BLAC" +
      "K\020@\022\025\n\021PLATE_COLOR_GREEN\020A\022\036\n\032PLATE_COLO" +
      "R_GRADIENT_GREEN\020B\022\034\n\030PLATE_COLOR_YELLOW" +
      "_GREEN\020C\022\027\n\023PLATE_COLOR_UNKNOWN\020b\022\025\n\021PLA" +
      "TE_COLOR_OTHER\020c*\241\004\n\020ITS800PlateClass\022\025\n" +
      "\021ITS_PLATE_UNKNOWN\020\000\022\026\n\022ITS_PLATE_ONE_BL" +
      "UE\020\001\022\027\n\023ITS_PLATE_ONE_BLACK\020\002\022\030\n\024ITS_PLA" +
      "TE_ONE_YELLOW\020\003\022\033\n\027ITS_PLATE_DOUBLE_YELL" +
      "OW\020\004\022\032\n\026ITS_PLATE_WHITE_POLICE\020\005\022\026\n\022ITS_" +
      "PLATE_WHITE_WJ\020\006\022\024\n\020ITS_PLATE_INDIVI\020\007\022\026" +
      "\n\022ITS_PLATE_ONE_ARMY\020\010\022\031\n\025ITS_PLATE_DOUB" +
      "LE_ARMY\020\t\022\025\n\021ITS_PLATE_EMBASSY\020\n\022\020\n\014ITS_" +
      "PLATE_HK\020\013\022\031\n\025ITS_PLATE_AGRICULTURE\020\014\022\023\n" +
      "\017ITS_PLATE_MACAU\020\r\022\026\n\022ITS_PLATE_CHANGNEI" +
      "\020\016\022\035\n\031ITS_PLATE_DOUBLE_WHITE_WJ\020\017\022\023\n\017ITS" +
      "_PLATE_OTHER\020\020\022\030\n\024ITS_PLATE_NEW_ENERGY\020\021" +
      "\022\023\n\017ITS_PLATE_TEACH\020\022\022\025\n\021ITS_PLATE_TRAIL" +
      "ER\020\023\022\023\n\017ITS_PLATE_PLANE\020\024\022\021\n\rITS_PLATE_H" +
      "K2\020x*\377\003\n\021GAT1400PlateClass\022\030\n\024VEHICLE_PL" +
      "ATE_YELLOW\020\001\022\031\n\025VEHICLE_PLATE_EMBASSY\020\004\022" +
      "\035\n\031VEHICLE_PLATE_AGRICULTURE\020\016\022\031\n\025VEHICL" +
      "E_PLATE_TRAILER\020\017\022\027\n\023VEHICLE_PLATE_TEACH" +
      "\020\020\022\036\n\032VEHICLE_PLATE_WHITE_POLICE\020\027\022\024\n\020VE" +
      "HICLE_PLATE_HK\020\032\022\027\n\023VEHICLE_PLATE_MACAU\020" +
      "\033\022\032\n\026VEHICLE_PLATE_WHITE_WJ\020\037\022\035\n\031VEHICLE" +
      "_PLATE_DOUBLE_ARMY\020 \022\034\n\030VEHICLE_PLATE_NE" +
      "W_ENERGY\020(\022\032\n\026VEHICLE_PLATE_ONE_BLUE\020=\022\033" +
      "\n\027VEHICLE_PLATE_ONE_BLACK\020>\022\030\n\024VEHICLE_P" +
      "LATE_INDIVI\020?\022\032\n\026VEHICLE_PLATE_CHANGNEI\020" +
      "@\022\027\n\023VEHICLE_PLATE_PLANE\020A\022\031\n\025VEHICLE_PL" +
      "ATE_UNKNOWN\020b\022\027\n\023VEHICLE_PLATE_OTHER\020c*<" +
      "\n\023ROAD_SURFACE_TYPE_E\022\n\n\006NORMAL\020\000\022\007\n\003WET" +
      "\020\001\022\007\n\003ICE\020\002\022\007\n\003FOG\020\003"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          if_proto_common.BxtStatusPb.getDescriptor(),
          if_proto_common.BxtCommonMathMatrixXd.getDescriptor(),
          if_proto_common.BxtCommonMathVector3D.getDescriptor(),
          bxt.common.sensor.BxtCommonSensorSensorSource.getDescriptor(),
          if_proto_common.BxtCommonHeader.getDescriptor(),
          if_proto_common.BxtCommonMathPoint.getDescriptor(),
        });
    internal_static_if_proto_common_Point2D_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_if_proto_common_Point2D_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_if_proto_common_Point2D_descriptor,
        new java.lang.String[] { "Dbx", "Dby", });
    internal_static_if_proto_common_PixelPointCoordinate_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_if_proto_common_PixelPointCoordinate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_if_proto_common_PixelPointCoordinate_descriptor,
        new java.lang.String[] { "UlCameraType", "AstPixelPoint", });
    internal_static_if_proto_common_Obstacle_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_if_proto_common_Obstacle_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_if_proto_common_Obstacle_descriptor,
        new java.lang.String[] { "Id", "DrsuTimestamp", "Center", "EgoCenter", "Direction", "Theta", "Length", "Width", "Height", "DetConfidence", "ObjType", "TypeProb", "TrackId", "PositionUncertainty", "Velocity", "VelocityUncertainty", "AngularVelocity", "Acceleration", "AccelerationUncertainty", "DetectionTime", "TrackingTime", "LatestTrackedTime", "SensorSource", "IsValid", "IsOnHdmap", "IsStationary", "AucLane", "AucHdLane", "AucHdConnection", "AulCrosswalk", "AstPixelPointCoordinate", "CameraMidTimestamp", "CameraLongTimestamp", "RadarTimestamp", "VehicleClass", "VehicleColor", "VehicleBrand", "VehicleModel", "VehicleStyles", "PlateClass", "PlateColor", "PlateNo", "CarDirection", "SpecialVehicleType", "DataSourceIP", "Heading", "Speed", "Gps", "SpeedConfidence", "PosConfidence", "TargetCameraIP", "TargetCameraDis", "CameraSupplement", "LidarSupplement", "RadarSupplement", });
    internal_static_if_proto_common_LidarSupplement_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_if_proto_common_LidarSupplement_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_if_proto_common_LidarSupplement_descriptor,
        new java.lang.String[] { "OccupiedGrids", });
    internal_static_if_proto_common_Box2d_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_if_proto_common_Box2d_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_if_proto_common_Box2d_descriptor,
        new java.lang.String[] { "Xmin", "Ymin", "Xmax", "Ymax", });
    internal_static_if_proto_common_RadarSupplement_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_if_proto_common_RadarSupplement_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_if_proto_common_RadarSupplement_descriptor,
        new java.lang.String[] { "IsBackground", });
    internal_static_if_proto_common_CameraSupplement_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_if_proto_common_CameraSupplement_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_if_proto_common_CameraSupplement_descriptor,
        new java.lang.String[] { "DisFromLaneCenter", "DisFromEgo", "InLaneId", "ImgBox", "CameraObjectType", "Confidence", });
    internal_static_if_proto_common_SensorObstacles_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_if_proto_common_SensorObstacles_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_if_proto_common_SensorObstacles_descriptor,
        new java.lang.String[] { "Header", "ErrorCode", "Obstacles", "SensorSource", });
    internal_static_if_proto_common_RoadSurface_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_if_proto_common_RoadSurface_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_if_proto_common_RoadSurface_descriptor,
        new java.lang.String[] { "DbTimestamp", "StCenter", "Dblength", "Dbwidth", "UlRoadSurfaceType", "DbRoadSurfaceConfidence", });
    if_proto_common.BxtStatusPb.getDescriptor();
    if_proto_common.BxtCommonMathMatrixXd.getDescriptor();
    if_proto_common.BxtCommonMathVector3D.getDescriptor();
    bxt.common.sensor.BxtCommonSensorSensorSource.getDescriptor();
    if_proto_common.BxtCommonHeader.getDescriptor();
    if_proto_common.BxtCommonMathPoint.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
